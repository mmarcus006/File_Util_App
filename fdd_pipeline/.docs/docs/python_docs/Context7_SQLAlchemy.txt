TITLE: Creating PostgreSQL Engine using URL String - Python
DESCRIPTION: Demonstrates creating a SQLAlchemy Engine instance connected to a PostgreSQL database using the psycopg2 driver. The connection details are provided directly in a standard database URL string format.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine

engine = create_engine("postgresql+psycopg2://scott:tiger@localhost:5432/mydatabase")
```

----------------------------------------

TITLE: Recommended ORM Joins Using Relationships and Mapped Classes
DESCRIPTION: Illustrates the standard and recommended ways to perform ORM joins using relationships or by explicitly specifying the mapped class as the join target. These patterns do not involve joining directly to Core Table/Alias objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_17

LANGUAGE: python
CODE:
```
# normal join to relationship entity
q = s.query(User).join(User.addresses).filter(Address.email_address == "ed@foo.com")

# name Address target explicitly, not necessary but legal
q = (
    s.query(User)
    .join(Address, User.addresses)
    .filter(Address.email_address == "ed@foo.com")
)
```

----------------------------------------

TITLE: Managing SQLAlchemy ORM Session Scope with Context Manager
DESCRIPTION: Shows the recommended pattern for managing the lifecycle (scope) of an ORM Session itself using the Session constructor as a context manager. The session is automatically closed upon exiting the `with` block, ensuring resources are released.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_4

LANGUAGE: Python
CODE:
```
with Session(engine) as session:
    session.add(some_object())
    session.add(some_other_object())

    session.commit()  # commits

    session.add(still_another_object)
    session.flush()  # flush still_another_object

    session.commit()  # commits

    result = session.execute(text("<some SELECT statement>"))
```

----------------------------------------

TITLE: Creating SQLite Engines - Python
DESCRIPTION: Demonstrates creating SQLAlchemy Engines for SQLite, covering file-based databases with relative and absolute paths (Unix/Mac, Windows), including using raw strings for Windows paths, and connecting to an in-memory database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_9

LANGUAGE: Python
CODE:
```
# sqlite://<nohostname>/<path>
# where <path> is relative:
engine = create_engine("sqlite:///foo.db")
```

LANGUAGE: Python
CODE:
```
# Unix/Mac - 4 initial slashes in total
engine = create_engine("sqlite:////absolute/path/to/foo.db")
```

LANGUAGE: Python
CODE:
```
# Windows
engine = create_engine("sqlite:///C:\\path\\to\\foo.db")
```

LANGUAGE: Python
CODE:
```
# Windows alternative using raw string
engine = create_engine(r"sqlite:///C:\\path\\to\\foo.db")
```

LANGUAGE: Python
CODE:
```
# To use a SQLite :memory: database, specify an empty URL:
engine = create_engine("sqlite://")
```

----------------------------------------

TITLE: Using Outermost Transaction Block (Preferred Pattern) - SQLAlchemy Python
DESCRIPTION: Presents the recommended SQLAlchemy 2.0 pattern for transaction management. The transaction is explicitly started using `with session.begin():` at the outermost scope where database operations occur. Inner functions like `method_a` and `method_b` do not need to manage transactions themselves, simplifying the code and making transaction boundaries clear.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_102

LANGUAGE: Python
CODE:
```
def method_a(session):
    method_b(session)

def method_b(session):
    session.add(SomeObject("bat", "lala"))


Session = sessionmaker(engine)

# create a Session and call method_a
with Session() as session:
    with session.begin():
        method_a(session)
```

----------------------------------------

TITLE: Loading ORM Object by Primary Key in SQLAlchemy
DESCRIPTION: Loads a User object from the database using the Session's `get` method, which retrieves the object by its primary key. Shows the corresponding SQL query executed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_17

LANGUAGE: pycon+sql
CODE:
```
>>> patrick = session.get(User, 3)
{execsql}SELECT user_account.id AS user_account_id, user_account.name AS user_account_name,
user_account.fullname AS user_account_fullname
FROM user_account
WHERE user_account.id = ?
[...] (3,)
```

----------------------------------------

TITLE: Creating SQLAlchemy Engine - Python
DESCRIPTION: Creates a SQLAlchemy Engine object, which acts as a central source of database connections. It is configured using a database URL string and enables SQL echoing to standard output via the `echo=True` parameter for debugging purposes. This example connects to an in-memory SQLite database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/engine.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import create_engine
>>> engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)
```

----------------------------------------

TITLE: Setting up SQLAlchemy Database and Seeding Data in Python
DESCRIPTION: This snippet demonstrates how to set up an in-memory SQLite database using the defined ORM models. It creates an engine, generates the database schema based on the model metadata, establishes a connection and session, adds sample User and Address data, and commits the transaction to populate the database. This setup provides the necessary database state for querying examples.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_plain_setup.rst#_snippet_1

LANGUAGE: python
CODE:
```
engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)
Base.metadata.create_all(engine)
conn = engine.connect()
session = Session(conn)
session.add_all(
    [
        User(
            name="spongebob",
            fullname="Spongebob Squarepants",
            addresses=[Address(email_address="spongebob@sqlalchemy.org")],
        ),
        User(
            name="sandy",
            fullname="Sandy Cheeks",
            addresses=[
                Address(email_address="sandy@sqlalchemy.org"),
                Address(email_address="squirrel@squirrelpower.org"),
            ],
        ),
        User(
            name="patrick",
            fullname="Patrick Star",
            addresses=[Address(email_address="pat999@aol.com")],
        ),
        User(
            name="squidward",
            fullname="Squidward Tentacles",
            addresses=[Address(email_address="stentcl@sqlalchemy.org")],
        ),
        User(name="ehkrabs", fullname="Eugene H. Krabs"),
    ]
)
session.commit()
conn.begin()
```

----------------------------------------

TITLE: Nested Context Managers for Session and Transaction - SQLAlchemy ORM - Python
DESCRIPTION: Shows a more succinct way to manage a session and transaction using nested Python with statements. The inner with session.begin(): block handles the commit/rollback logic automatically upon exiting.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_2

LANGUAGE: Python
CODE:
```
with Session(engine) as session:
    with session.begin():
        session.add(some_object)
        session.add(some_other_object)
    # inner context calls session.commit(), if there were no exceptions
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Model for Logging
DESCRIPTION: Defines a SQLAlchemy ORM mapped class `LogRecord` with columns for id, message, code, and timestamp. This class is used as the target table for subsequent insert examples.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_8

LANGUAGE: python
CODE:
```
import datetime


class LogRecord(Base):
    __tablename__ = "log_record"
    id: Mapped[int] = mapped_column(primary_key=True)
    message: Mapped[str]
    code: Mapped[str]
    timestamp: Mapped[datetime.datetime]
```

----------------------------------------

TITLE: Setting up SQLAlchemy Engine, Tables, and Session in Python
DESCRIPTION: This snippet demonstrates how to create an in-memory SQLite database engine using SQLAlchemy, create all the defined tables based on the `Base.metadata`, establish a connection, and create a session. It also starts a transaction on the connection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_dml_setup.rst#_snippet_1

LANGUAGE: python
CODE:
```
engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)
Base.metadata.create_all(engine)
conn = engine.connect()
session = Session(conn)
conn.begin()
```

----------------------------------------

TITLE: Defining ORM Models with DeclarativeBase Subclasses (SQLAlchemy, Python)
DESCRIPTION: Provides a comprehensive example of defining SQLAlchemy ORM models (`User`, `Address`) by subclassing a `DeclarativeBase`. It illustrates how to specify table names (`__tablename__`), columns (`mapped_column`, `Mapped` annotation), and relationships (`relationship`).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_styles.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List
from typing import Optional

from sqlalchemy import ForeignKey
from sqlalchemy import func
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    name: Mapped[str]
    fullname: Mapped[Optional[str]]
    nickname: Mapped[Optional[str]] = mapped_column(String(64))
    create_date: Mapped[datetime] = mapped_column(insert_default=func.now())

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id = mapped_column(Integer, primary_key=True)
    user_id = mapped_column(ForeignKey("user.id"))
    email_address: Mapped[str]

    user: Mapped["User"] = relationship(back_populates="addresses")
```

----------------------------------------

TITLE: Define SQLAlchemy ORM Mapping with Mapped and mapped_column (Typed) - Python
DESCRIPTION: This snippet shows the same SQLAlchemy ORM declarative models as the previous one, but with explicit Python type annotations applied using `Mapped`. It demonstrates how to type columns (including optional ones) and relationships for improved static analysis and type checking.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_15

LANGUAGE: Python
CODE:
```
from typing import List
from typing import Optional
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(30), nullable=False)
    fullname: Mapped[Optional[str]] = mapped_column(String)
    addresses: Mapped[List["Address"]] = relationship("Address", back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    email_address: Mapped[str] = mapped_column(String, nullable=False)
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"), nullable=False)
    user: Mapped["User"] = relationship("User", back_populates="addresses")
```

----------------------------------------

TITLE: Using SQLAlchemy ORM Nested Transactions for Skipping Duplicates (IntegrityError)
DESCRIPTION: Demonstrates using `session.begin_nested()` with a specific exception handler (`IntegrityError`). This is a common pattern for gracefully handling unique constraint violations or duplicate keys by rolling back only the failed insert/update within the nested transaction, allowing the outer transaction to commit successfully with the valid records.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_9

LANGUAGE: Python
CODE:
```
from sqlalchemy import exc

with session.begin():
    for record in records:
        try:
            with session.begin_nested():
                obj = SomeRecord(id=record["identifier"], name=record["name"])
                session.add(obj)
        except exc.IntegrityError:
            print(f"Skipped record {record} - row already exists")
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Declarative Models in Python
DESCRIPTION: This snippet defines several SQLAlchemy ORM declarative models using type annotations. It includes standard mapped classes (User, Address, LogRecord) and a polymorphic inheritance example (Employee, Manager, Engineer). Dependencies include SQLAlchemy ORM components, `datetime`, and `typing`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_dml_setup.rst#_snippet_0

LANGUAGE: python
CODE:
```
from typing import List
from typing import Optional
import datetime

from sqlalchemy import Column
from sqlalchemy import create_engine
from sqlalchemy import ForeignKey
from sqlalchemy import Table
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Session


class Base(DeclarativeBase):
    pass
class User(Base):
    __tablename__ = "user_account"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(unique=True)
    fullname: Mapped[Optional[str]]
    species: Mapped[Optional[str]]
    addresses: Mapped[List["Address"]] = relationship(back_populates="user")

    def __repr__(self) -> str:
        return f"User(name={self.name!r}, fullname={self.fullname!r})"
class Address(Base):
    __tablename__ = "address"
    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
    email_address: Mapped[str]
    user: Mapped[User] = relationship(back_populates="addresses")

    def __repr__(self) -> str:
        return f"Address(email_address={self.email_address!r})"
class LogRecord(Base):
    __tablename__ = "log_record"
    id: Mapped[int] = mapped_column(primary_key=True)
    message: Mapped[str]
    code: Mapped[str]
    timestamp: Mapped[datetime.datetime]

    def __repr__(self):
        return f"LogRecord({self.message!r}, {self.code!r}, {self.timestamp!r})"

class Employee(Base):
    __tablename__ = "employee"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    type: Mapped[str]

    def __repr__(self):
        return f"{self.__class__.__name__}({self.name!r})"

    __mapper_args__ = {
        "polymorphic_identity": "employee",
        "polymorphic_on": "type",
    }
class Manager(Employee):
    __tablename__ = "manager"
    id: Mapped[int] = mapped_column(ForeignKey("employee.id"), primary_key=True)
    manager_name: Mapped[str]

    def __repr__(self):
        return f"{self.__class__.__name__}({self.name!r}, manager_name={self.manager_name!r})"

    __mapper_args__ = {
        "polymorphic_identity": "manager",
    }
class Engineer(Employee):
    __tablename__ = "engineer"
    id: Mapped[int] = mapped_column(ForeignKey("employee.id"), primary_key=True)
    engineer_info: Mapped[str]

    def __repr__(self):
        return f"{self.__class__.__name__}({self.name!r}, engineer_info={self.engineer_info!r})"

    __mapper_args__ = {
        "polymorphic_identity": "engineer",
    }
```

----------------------------------------

TITLE: Building Select Statement (2.0 Style) - SQLAlchemy Python
DESCRIPTION: Shows the recommended SQLAlchemy 2.0 way to build a `SELECT` statement. Columns are passed positionally, and filtering is done using the `.where()` method, promoting method chaining. This is the preferred pattern moving forward.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_43

LANGUAGE: Python
CODE:
```
stmt = select(table1.c.myid).where(table1.c.myid == table2.c.otherid)
```

----------------------------------------

TITLE: Creating a SQLAlchemy Engine (Python)
DESCRIPTION: Demonstrates the basic usage of `sqlalchemy.create_engine` to establish a connection pool to a database using a connection URL. This engine instance is typically created once per application process and manages multiple DBAPI connections.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_0

LANGUAGE: python
CODE:
```
engine = create_engine("mysql+mysqldb://scott:tiger@localhost/test")
```

----------------------------------------

TITLE: Filter and Fetch First Object (SQLAlchemy 2.0)
DESCRIPTION: Presents the 2.0 style for filtering results using `select` with `filter_by`, limiting to one result, and fetching the first object using `.first()` on the scalar result object. Returns `None` if no results are found. Requires a configured SQLAlchemy session, mapped User class, and the `select` function.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_44

LANGUAGE: Python
CODE:
```
session.scalars(
  select(User).
  filter_by(name="some user").
  limit(1)
).first()
```

----------------------------------------

TITLE: Execute Core SELECT Statement
DESCRIPTION: Shows how to execute a previously built Core `select` statement (`stmt`) using `engine.connect()` and `Connection.execute()`. It iterates through the returned `Result` object, printing each `Row`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_1

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    for row in conn.execute(stmt):
        print(row)
```

----------------------------------------

TITLE: Defining Bidirectional One-to-Many / Many-to-One (Annotated Declarative) - Python
DESCRIPTION: This example shows a bidirectional One-to-Many (Parent to Children) and Many-to-One (Child to Parent) relationship using the modern annotated Declarative style. The relationship targets and collection types are inferred from the Mapped annotation, and back_populates links the two sides.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_1

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship(back_populates="parent")


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent_table.id"))
    parent: Mapped["Parent"] = relationship(back_populates="children")
```

----------------------------------------

TITLE: Getting Object by Primary Key using Session.get (Python)
DESCRIPTION: Illustrates using `session.get()` to retrieve an object by its primary key. This method efficiently checks the session's identity map first before potentially querying the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_7

LANGUAGE: Python
CODE:
```
>>> some_squidward = session.get(User, 4)
>>> some_squidward
User(id=4, name='squidward', fullname='Squidward Tentacles')
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Models - Python
DESCRIPTION: This snippet defines the database schema and corresponding Python object models using SQLAlchemy's Declarative ORM. It includes the base class `Base`, a `User` model mapping to the `user_account` table, and an `Address` model mapping to the `address` table, demonstrating column definitions, primary/foreign keys, and one-to-many relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import List
from typing import Optional
from sqlalchemy import ForeignKey
from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship

class Base(DeclarativeBase):
    pass

class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(30))
    fullname: Mapped[Optional[str]]

    addresses: Mapped[List["Address"]] = relationship(
        back_populates="user", cascade="all, delete-orphan"
    )

    def __repr__(self) -> str:
        return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"

class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))

    user: Mapped["User"] = relationship(back_populates="addresses")

    def __repr__(self) -> str:
        return f"Address(id={self.id!r}, email_address={self.email_address!r})"
```

----------------------------------------

TITLE: Declaring User Mapped Class with Declarative (Python)
DESCRIPTION: Defines the `User` class, inheriting from the `Base` Declarative class, to represent the 'user_account' table. It uses `__tablename__` to name the table and `Mapped`/`mapped_column` for column definitions, including a primary key, string columns using `String(30)`, and a relationship to 'Address' objects. Requires standard SQLAlchemy imports for types like `String` and ORM constructs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_10

LANGUAGE: python
CODE:
```
from typing import List
from typing import Optional
from sqlalchemy import String # Requires import from sqlalchemy
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship

class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(30))
    fullname: Mapped[Optional[str]]

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")

    def __repr__(self) -> str:
        return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"
```

----------------------------------------

TITLE: Adding Instance to Session - Python
DESCRIPTION: Illustrates adding a mapped instance to a SQLAlchemy `Session` to track its state.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#_snippet_15

LANGUAGE: python
CODE:
```
>>> s.add(u1)
```

----------------------------------------

TITLE: Defining Declarative Mapping with DeclarativeBase and Mapped - SQLAlchemy Python
DESCRIPTION: This snippet illustrates the standard Declarative mapping approach in SQLAlchemy 2.0+. It defines a base class `Base` inheriting from `DeclarativeBase`, and a `User` class inheriting from `Base`. The `User` class defines database columns using type annotations with `Mapped` and the `mapped_column` function, along with the `__tablename__` class attribute.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import Integer, String, ForeignKey
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


# declarative base class
class Base(DeclarativeBase):
    pass


# an example mapping using the base
class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    fullname: Mapped[str] = mapped_column(String(30))
    nickname: Mapped[Optional[str]]
```

----------------------------------------

TITLE: Defining Type-Aware ORM Mapped Classes
DESCRIPTION: Defines SQLAlchemy ORM mapped classes using the new type-aware syntax introduced in 2.0. Includes relationships and foreign keys, providing type hints for attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy import ForeignKey
from typing import List

class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    addresses: Mapped[List["Address"]] = relationship()


class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id = mapped_column(ForeignKey("user_account.id"))
```

----------------------------------------

TITLE: Creating SQLAlchemy Engine - Python
DESCRIPTION: This snippet demonstrates how to create a SQLAlchemy Engine instance, which acts as a factory for database connections. It configures the engine to connect to an in-memory SQLite database and enables SQL logging via `echo=True` for demonstration purposes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
engine = create_engine("sqlite://", echo=True)
```

----------------------------------------

TITLE: Installing SQLAlchemy via pip (Shell)
DESCRIPTION: This command demonstrates the standard method for installing the latest released version of the SQLAlchemy library from PyPI using the pip package manager.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/intro.rst#_snippet_0

LANGUAGE: text
CODE:
```
pip install sqlalchemy
```

----------------------------------------

TITLE: Explicit Transaction with Connection.begin() - SQLAlchemy Core
DESCRIPTION: Shows an alternative recommended 2.0 style for managing transactions using the `Connection.begin()` context manager within an `Engine.connect()` block. This provides explicit transaction control on an existing connection object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_11

LANGUAGE: python
CODE:
```
with engine.connect() as conn:
    with conn.begin():
        conn.execute(some_table.insert().values(foo="bar"))
        conn.execute(some_other_table.insert().values(bat="hoho"))
```

----------------------------------------

TITLE: Initializing SQLAlchemy ORM Session
DESCRIPTION: Demonstrates the basic initialization of an SQLAlchemy ORM Session object, binding it to a database engine. This session object is the primary interface for ORM database operations.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import Session

session = Session(engine)
```

----------------------------------------

TITLE: Creating Multiple Tables with SQLAlchemy MetaData.create_all Python
DESCRIPTION: This snippet shows how to initialize an engine and define multiple `Table` objects associated with a `MetaData` object, including foreign key relationships. The `metadata_obj.create_all(engine)` call then inspects the defined schema and issues the necessary SQL CREATE TABLE statements to the database connected by the engine, respecting foreign key dependencies.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_5

LANGUAGE: python
CODE:
```
engine = create_engine("sqlite:///:memory:")

metadata_obj = MetaData()

user = Table(
    "user",
    metadata_obj,
    Column("user_id", Integer, primary_key=True),
    Column("user_name", String(16), nullable=False),
    Column("email_address", String(60), key="email"),
    Column("nickname", String(50), nullable=False),
)

user_prefs = Table(
    "user_prefs",
    metadata_obj,
    Column("pref_id", Integer, primary_key=True),
    Column("user_id", Integer, ForeignKey("user.user_id"), nullable=False),
    Column("pref_name", String(40), nullable=False),
    Column("pref_value", String(100)),
)

metadata_obj.create_all(engine)
```

LANGUAGE: sql
CODE:
```
PRAGMA table_info(user)
CREATE TABLE user(
        user_id INTEGER NOT NULL PRIMARY KEY,
        user_name VARCHAR(16) NOT NULL,
        email_address VARCHAR(60),
        nickname VARCHAR(50) NOT NULL
)
PRAGMA table_info(user_prefs)
CREATE TABLE user_prefs(
        pref_id INTEGER NOT NULL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES user(user_id),
        pref_name VARCHAR(40) NOT NULL,
        pref_value VARCHAR(100)
)
```

----------------------------------------

TITLE: Combined Context Managers for Session and Transaction - SQLAlchemy ORM - Python
DESCRIPTION: Demonstrates the most concise way to manage a session and transaction using a single Python with statement that combines the session and the transaction context managers. The transaction is automatically committed or rolled back upon exiting the with block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_3

LANGUAGE: Python
CODE:
```
with Session(engine) as session, session.begin():
        session.add(some_object)
        session.add(some_other_object)
    # inner context calls session.commit(), if there were no exceptions
    # outer context calls session.close()
```

----------------------------------------

TITLE: Establishing SQLAlchemy Declarative Base (Python)
DESCRIPTION: Defines a base class `Base` that inherits from `sqlalchemy.orm.DeclarativeBase`. This class acts as the root for ORM mapped class definitions, automatically managing an associated `MetaData` object and `registry` for mapping configuration.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_7

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
class Base(DeclarativeBase):
    pass
```

----------------------------------------

TITLE: Loading Single Object with Scalars - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates loading a single instance of `SomeClass` using `session.scalars()` combined with a `select()` construct and `limit(1)`. `scalars()` is used to retrieve the primary ORM object results directly from the scalar results returned by the `select` statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_7

LANGUAGE: python
CODE:
```
o = session.scalars(select(SomeClass).limit(1)).first()
```

----------------------------------------

TITLE: Defining Scalar Default for INSERT - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates how to set a simple scalar default value for a column using the `default` parameter of `Column`. The value '12' will be used during an INSERT statement if no value is provided for 'somecolumn'.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#_snippet_0

LANGUAGE: Python
CODE:
```
Table("mytable", metadata_obj, Column("somecolumn", Integer, default=12))
```

----------------------------------------

TITLE: Fetching First Object with Core Select via Session.execute().scalars().first()
DESCRIPTION: The SQLAlchemy 2.0 approach to fetching the first object using Session.execute() with a Core select() construct. It often includes limit(1) for efficiency and uses scalars().first() to get the ORM object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_64

LANGUAGE: Python
CODE:
```
# for first(), no LIMIT is applied automatically; add limit(1) if LIMIT
# is desired on the query
user = (
    session.execute(select(User).filter_by(name="some user").limit(1)).scalars().first()
)
```

----------------------------------------

TITLE: Selecting ORM Objects with JOIN and Multiple WHERE Clauses - Python/SQL
DESCRIPTION: Illustrates performing a SELECT query that involves a JOIN between two ORM-mapped classes (Address and User). It demonstrates how to use the `Select.join` method and apply multiple filtering conditions with `Select.where` that are implicitly combined with AND. Results are fetched using `Session.scalars().one()`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_5

LANGUAGE: python
CODE:
```
stmt = (
    select(Address)
    .join(Address.user)
    .where(User.name == "sandy")
    .where(Address.email_address == "sandy@sqlalchemy.org")
)
sandy_address = session.scalars(stmt).one()
```

LANGUAGE: sql
CODE:
```
{execsql}SELECT address.id, address.email_address, address.user_id
FROM address JOIN user_account ON user_account.id = address.user_id
WHERE user_account.name = ? AND address.email_address = ?
[...] ('sandy', 'sandy@sqlalchemy.org')
{stop}
>>> sandy_address
Address(id=2, email_address='sandy@sqlalchemy.org')
```

----------------------------------------

TITLE: Defining ORM Models - SQLAlchemy - Python
DESCRIPTION: Defines `User` and `Address` classes mapped to database tables "user" and "address". Includes primary keys, columns, and a one-to-many relationship between User and Address using `relationship` and `ForeignKey`. These models serve as canonical examples for demonstrating session operations.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#_snippet_8

LANGUAGE: Python
CODE:
```
class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(50), nullable=False)
    addresses = relationship("Address", backref="user")


class Address(Base):
    __tablename__ = "address"

    id = mapped_column(Integer, primary_key=True)
    email_address = mapped_column(String(50), nullable=False)
    user_id = mapped_column(Integer, ForeignKey("user.id"), nullable=False)
```

----------------------------------------

TITLE: Setting Up SQLAlchemy Declarative Base and Imports - Python
DESCRIPTION: This snippet provides the necessary imports and defines a base class for Declarative mapping. It includes standard library imports for typing and SQLAlchemy ORM components required for defining mapped classes and relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from __future__ import annotations
from typing import List

from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass
```

----------------------------------------

TITLE: Creating Basic DeclarativeBase Class (SQLAlchemy, Python)
DESCRIPTION: This snippet shows the most common way to create a Declarative Base class in modern SQLAlchemy by subclassing the `DeclarativeBase` superclass. This base class serves as the parent for all mapped ORM classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_styles.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase


# declarative base class
class Base(DeclarativeBase):
    pass
```

----------------------------------------

TITLE: Using ORM Session with Direct Engine Binding (2.0 Style) - SQLAlchemy Python
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 pattern where the ORM Session or sessionmaker is explicitly passed the Engine object. The Metadata object is no longer bound to the Engine, providing a more direct and explicit connection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_48

LANGUAGE: Python
CODE:
```
engine = create_engine("sqlite://")
Session = sessionmaker(engine)
Base = declarative_base()


class MyClass(Base): ...


session = Session()
session.add(MyClass())
session.commit()
```

----------------------------------------

TITLE: Defining SQLAlchemy Declarative Base Class (Python)
DESCRIPTION: This snippet defines a base class Base by inheriting from sqlalchemy.orm.DeclarativeBase. This base class is required for creating Declarative ORM mappings in SQLAlchemy 2.0+. Subsequent mapped classes will inherit from this base.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase


class Base(DeclarativeBase):
    pass
```

----------------------------------------

TITLE: Querying ORM Entities with Select and Session.execute - Python
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 style of querying ORM entities. It uses the `sql.select` construct combined with `Session.execute` to fetch `User` objects. It shows how to filter by attributes and join via relationships. Requires a `Session` initialized with `future=True`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_0

LANGUAGE: python
CODE:
```
with Session(engine, future=True) as sess:
    stmt = (
        select(User)
        .where(User.name == "sandy")
        .join(User.addresses)
        .where(Address.email_address.like("%gmail%"))
    )

    result = sess.execute(stmt)

    for user in result.scalars():
        print(user)
```

----------------------------------------

TITLE: Creating SQLAlchemy MySQL Engine with URL Query Args (Python)
DESCRIPTION: Initializes a SQLAlchemy engine using a database URL. This example shows how to pass simple DBAPI connection arguments like `charset` directly in the URL's query string for dialects that support it. The dialect parses these arguments and passes them to the underlying DBAPI `connect()` method.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_10

LANGUAGE: python
CODE:
```
engine = create_engine("mysql+pymysql://user:pass@host/test?charset=utf8mb4")
```

----------------------------------------

TITLE: Declaring Address Mapped Class with Declarative (Python)
DESCRIPTION: Defines the `Address` class, inheriting from the `Base` Declarative class, to represent the 'address' table. It uses `__tablename__` for the table name and `Mapped`/`mapped_column` for column definitions, including a primary key, a string column, and a foreign key referencing 'user_account.id'. A relationship to the 'User' parent is also defined. Requires standard SQLAlchemy imports for types like `ForeignKey` and ORM constructs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_11

LANGUAGE: python
CODE:
```
from sqlalchemy import ForeignKey # Requires import from sqlalchemy

class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id = mapped_column(ForeignKey("user_account.id"))

    user: Mapped[User] = relationship(back_populates="addresses")

    def __repr__(self) -> str:
        return f"Address(id={self.id!r}, email_address={self.email_address!r})"
```

----------------------------------------

TITLE: Defining Table with Columns and Constraints in SQLAlchemy Python
DESCRIPTION: This code defines a `Table` named "user" associated with the previously created `metadata_obj`. It includes four `Column` definitions with specified names, datatypes (`Integer`, `String`), constraints (`primary_key`, `nullable`), and lengths. This object represents the schema of the 'user' table in the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_1

LANGUAGE: python
CODE:
```
from sqlalchemy import Table, Column, Integer, String

user = Table(
    "user",
    metadata_obj,
    Column("user_id", Integer, primary_key=True),
    Column("user_name", String(16), nullable=False),
    Column("email_address", String(60)),
    Column("nickname", String(50), nullable=False),
)
```

----------------------------------------

TITLE: Declaring Table with Foreign Key Constraint - Python
DESCRIPTION: Defines a second Table object named 'address' with columns including a foreign key ('user_id') referencing the 'user_account.id' column. Also demonstrates defining 'NOT NULL' constraints using the 'nullable=False' parameter. Dependencies: sqlalchemy.Table, sqlalchemy.Column, sqlalchemy.Integer, sqlalchemy.String, sqlalchemy.ForeignKey.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from sqlalchemy import ForeignKey
address_table = Table(
    "address",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("user_id", ForeignKey("user_account.id"), nullable=False),
    Column("email_address", String, nullable=False),
)
```

----------------------------------------

TITLE: Defining SQLAlchemy Models and Session Usage (Python)
DESCRIPTION: This Python code defines two SQLAlchemy declarative models, `A` and `B`, with relationships. It then creates a SQLite engine with `echo=True` to enable logging, creates the tables, adds instances of `A` with related `B` objects, commits the session, and queries the `A` objects. This program is used to generate the SQL logs shown in the examples.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_27

LANGUAGE: python
CODE:
```
from sqlalchemy import Column
from sqlalchemy import create_engine
from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy import select
from sqlalchemy import String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Session

Base = declarative_base()


class A(Base):
    __tablename__ = "a"

    id = Column(Integer, primary_key=True)
    data = Column(String)
    bs = relationship("B")


class B(Base):
    __tablename__ = "b"
    id = Column(Integer, primary_key=True)
    a_id = Column(ForeignKey("a.id"))
    data = Column(String)


e = create_engine("sqlite://", echo=True)
Base.metadata.create_all(e)

s = Session(e)

s.add_all([A(bs=[B(), B(), B()]), A(bs=[B(), B(), B()]), A(bs=[B(), B(), B()])])
s.commit()

for a_rec in s.scalars(select(A)):
    print(a_rec.bs)
```

----------------------------------------

TITLE: Setting up SQLAlchemy Models and Fixture Data
DESCRIPTION: Defines SQLAlchemy declarative models User and Book with relationships, sets up an in-memory SQLite database engine and session, creates the tables based on the model metadata, and populates these tables with sample User and Book data.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_deferred_setup.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> from typing import List
>>> from typing import Optional
>>>
>>> from sqlalchemy import Column
>>> from sqlalchemy import create_engine
>>> from sqlalchemy import ForeignKey
>>> from sqlalchemy import LargeBinary
>>> from sqlalchemy import Table
>>> from sqlalchemy import Text
>>> from sqlalchemy.orm import DeclarativeBase
>>> from sqlalchemy.orm import Mapped
>>> from sqlalchemy.orm import mapped_column
>>> from sqlalchemy.orm import relationship
>>> from sqlalchemy.orm import Session
>>>
>>>
>>> class Base(DeclarativeBase):
...     pass
>>> class User(Base):
...     __tablename__ = "user_account"
...     id: Mapped[int] = mapped_column(primary_key=True)
...     name: Mapped[str]
...     fullname: Mapped[Optional[str]]
...     books: Mapped[List["Book"]] = relationship(back_populates="owner")
...
...     def __repr__(self) -> str:
...         return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"
>>> class Book(Base):
...     __tablename__ = "book"
...     id: Mapped[int] = mapped_column(primary_key=True)
...     owner_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
...     title: Mapped[str]
...     summary: Mapped[str] = mapped_column(Text)
...     cover_photo: Mapped[bytes] = mapped_column(LargeBinary)
...     owner: Mapped["User"] = relationship(back_populates="books")
...
...     def __repr__(self) -> str:
...         return f"Book(id={self.id!r}, title={self.title!r})"
>>> engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)
>>> Base.metadata.create_all(engine)
BEGIN ...
>>> conn = engine.connect()
>>> session = Session(conn)
>>> session.add_all(
...     [
...         User(
...             name="spongebob",
...             fullname="Spongebob Squarepants",
...             books=[
...                 Book(
...                     title="100 Years of Krabby Patties",
...                     summary="some long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="Sea Catch 22",
...                     summary="another long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="The Sea Grapes of Wrath",
...                     summary="yet another summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...             ],
...         ),
...         User(
...             name="sandy",
...             fullname="Sandy Cheeks",
...             books=[
...                 Book(
...                     title="A Nut Like No Other",
...                     summary="some long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="Geodesic Domes: A Retrospective",
...                     summary="another long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="Rocketry for Squirrels",
...                     summary="yet another summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...             ],
...         ),
...     ]
... )
>>> session.commit()
BEGIN ... COMMIT
>>> session.close()
>>> conn.begin()
BEGIN ...
```

----------------------------------------

TITLE: Join and Filter Related Objects (SQLAlchemy 2.0)
DESCRIPTION: Presents the 2.0 style for joining a related table using `select` with `.join()` and filtering using `.where()` based on an attribute of the joined table, then fetching all scalar results. Requires a configured SQLAlchemy session, mapped User and Address classes, and the `select` function.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_48

LANGUAGE: Python
CODE:
```
session.execute(
  select(User).
  join(Address).
  where(
    Address.email == "e@sa.us"
  )
).scalars().all()
```

----------------------------------------

TITLE: Defining ORM Relationships - SQLAlchemy Python
DESCRIPTION: This snippet shows the Python definition of the `User` and `Address` classes, illustrating the use of `relationship` and `Mapped` to define a bidirectional one-to-many/many-to-one link between them using `back_populates`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import relationship


class User(Base):
    __tablename__ = "user_account"

    # ... mapped_column() mappings

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


class Address(Base):
    __tablename__ = "address"

    # ... mapped_column() mappings

    user: Mapped["User"] = relationship(back_populates="addresses")
```

----------------------------------------

TITLE: Get SQLAlchemy ORM Object by Primary Key (Python)
DESCRIPTION: Demonstrates using the `session.get()` method to retrieve an ORM-mapped object (e.g., 'User') by its primary key. This method first checks the session's identity map before querying the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_14

LANGUAGE: Python
CODE:
```
my_user = session.get(User, 5)
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Mapped Class with DeclarativeBase
DESCRIPTION: This snippet defines a basic ORM mapped class `MyTable` using the modern DeclarativeBase. It maps to a table named "my_table" with an integer primary key `id` and a string column `name`. This class is used in subsequent examples demonstrating `schema_translate_map` and `identity_token`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#_snippet_6

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class MyTable(Base):
    __tablename__ = "my_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
```

----------------------------------------

TITLE: Joining with Relationship-Bound Attribute as ON Clause in SQLAlchemy ORM
DESCRIPTION: Illustrates using a `relationship`-bound attribute (`User.addresses`) as the ON clause when joining the `User` entity to the `Address` entity. This leverages the ORM relationship definition to generate the join condition.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_24

LANGUAGE: Python
CODE:
```
stmt = select(User).join(Address, User.addresses)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: Defining One-to-Many with Nullability using Mapped | None - Python
DESCRIPTION: This snippet demonstrates defining a One-to-Many relationship where the 'many' side (Child) can be nullable using Python 3.10+ `| None` syntax with `Mapped`. It shows how the ORM handles nullable foreign keys for relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_8

LANGUAGE: python
CODE:
```
from __future__ import annotations


class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    child_id: Mapped[int | None] = mapped_column(ForeignKey("child_table.id"))
    child: Mapped[Child | None] = relationship(back_populates="parents")


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parents: Mapped[List[Parent]] = relationship(back_populates="child")
```

----------------------------------------

TITLE: Defining Declarative Mapped Class in SQLAlchemy
DESCRIPTION: Defines a basic mapped class `User` using SQLAlchemy's Declarative style. It inherits from `DeclarativeBase` and defines mapped columns using type annotations with `Mapped` and `mapped_column`. This setup allows SQLAlchemy to automatically map the class to a database table named "user". This requires the SQLAlchemy ORM components.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column

class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    fullname: Mapped[str]
```

----------------------------------------

TITLE: Defining Basic Many-to-One (Annotated Declarative) - Python
DESCRIPTION: This snippet demonstrates a simple, non-bidirectional Many-to-One relationship using annotated Declarative. The foreign key is on the parent table, referencing the child, and the scalar relationship attribute is declared on the parent class.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_6

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    child_id: Mapped[int] = mapped_column(ForeignKey("child_table.id"))
    child: Mapped["Child"] = relationship()


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
```

----------------------------------------

TITLE: Defining Single Column ForeignKey - Python
DESCRIPTION: This snippet demonstrates how to define a single-column foreign key constraint within a table definition using the ForeignKey object. The ForeignKey specifies that the 'user_id' column in the 'user_preference' table must reference the 'user_id' column in the 'user' table. This is the most common method for single-column foreign keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_0

LANGUAGE: python
CODE:
```
user_preference = Table(
    "user_preference",
    metadata_obj,
    Column("pref_id", Integer, primary_key=True),
    Column("user_id", Integer, ForeignKey("user.user_id"), nullable=False),
    Column("pref_name", String(40), nullable=False),
    Column("pref_value", String(100)),
)
```

----------------------------------------

TITLE: Installing SQLAlchemy with AsyncIO Support (Shell)
DESCRIPTION: AsyncIO support in SQLAlchemy depends on the 'greenlet' project. This command installs SQLAlchemy along with the necessary 'greenlet' dependency by specifying the '[asyncio]' extra.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/intro.rst#_snippet_2

LANGUAGE: text
CODE:
```
pip install sqlalchemy[asyncio]
```

----------------------------------------

TITLE: Using engine.connect() context manager in SQLAlchemy (Python)
DESCRIPTION: Illustrates the use of the engine.connect() context manager for managing a database connection. The connection is automatically closed when the block is exited, but it does not automatically manage transactions like engine.begin().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#_snippet_1

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    # <work with conn>
    ...
```

----------------------------------------

TITLE: Selecting ORM Entities Directly with Session.scalars
DESCRIPTION: Demonstrates using `session.scalars()` to execute a SELECT statement that targets an ORM entity (`User`). This method directly returns a `ScalarResult` object which yields the ORM entity instances themselves, avoiding the intermediate `Row` objects. Includes the generated SQL and the final list of entities.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_4

LANGUAGE: python
CODE:
```
session.scalars(select(User).order_by(User.id)).all()
```

LANGUAGE: sql
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account ORDER BY user_account.id
```

----------------------------------------

TITLE: Executing SQLAlchemy Select Statement and Printing Results (Python)
DESCRIPTION: Demonstrates how to execute a SQLAlchemy `Select` statement using an engine connection and iterate through the results, printing a specific column value from each row. Requires a pre-defined `stmt` object and an `engine`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_13

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    for row in conn.execute(stmt):
        print(f"{row.username}")
```

----------------------------------------

TITLE: Creating and Using Session with sessionmaker Factory - SQLAlchemy ORM - Python
DESCRIPTION: Illustrates how to use sqlalchemy.orm.sessionmaker to create a factory for Session objects bound to a specific engine. This factory can then be used to create sessions within a with block, followed by an explicit session.commit().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# an Engine, which the Session will use for connection
# resources, typically in module scope
engine = create_engine("postgresql+psycopg2://scott:tiger@localhost/")

# a sessionmaker(), also in the same scope as the engine
Session = sessionmaker(engine)

# we can now construct a Session() without needing to pass the
# engine each time
with Session() as session:
    session.add(some_object)
    session.add(some_other_object)
    session.commit()
# closes the session
```

----------------------------------------

TITLE: Defining Declarative ORM Class with Mapped and mapped_column (Python)
DESCRIPTION: Illustrates how to define a SQLAlchemy Declarative ORM class using type annotations with `Mapped` and `mapped_column`. Shows how `mapped_column` can derive configuration from the `Mapped` annotation, including implicit column creation when only `Mapped` is present.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(50))
    fullname: Mapped[Optional[str]]
    nickname: Mapped[Optional[str]] = mapped_column(String(30))
```

----------------------------------------

TITLE: Create ORM-annotated Select Statement (Python)
DESCRIPTION: This Python snippet demonstrates creating a SQLAlchemy Core `Select` object from an ORM-mapped class (`User`). It illustrates how ORM entities implicitly provide context to Core constructs, forming the basis of 'ORM-annotated' objects, as explained in the surrounding text.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> stmt = select(User)
```

----------------------------------------

TITLE: Executing a SELECT Statement and Processing Results
DESCRIPTION: Shows how to execute a previously constructed `Select` object (`stmt`) using `session.execute`. The resulting `Result` object is then processed using `scalars()` to yield ORM entity instances directly, which are then iterated over to print attribute values. Includes the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_1

LANGUAGE: python
CODE:
```
result = session.execute(stmt)
for user_obj in result.scalars():
    print(f"{user_obj.name} {user_obj.fullname}")
```

LANGUAGE: sql
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name = ?
```

----------------------------------------

TITLE: Executing Statement within Transaction Block - SQLAlchemy Core Python
DESCRIPTION: Demonstrates the recommended explicit transaction pattern in SQLAlchemy 2.0 Core using the `engine.begin()` context manager. This ensures all operations within the block are part of a single transaction, which is automatically committed upon successful exit or rolled back on error. Requires an `engine` object and a `conn` object obtained from `engine.begin()`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_14

LANGUAGE: Python
CODE:
```
with engine.begin() as conn:
    conn.execute(some_table.insert().values(foo="bar"))
```

----------------------------------------

TITLE: Loading Object from SQLAlchemy Session
DESCRIPTION: Illustrates how to retrieve an object (`User`) from the database using a SQLAlchemy `Session`. The example uses the `select` construct to build a query filtering by the `User.name` attribute and fetches the first result using `scalars()` and `first()`. It's important to note that this process of loading data from the database does not invoke the class's `__init__` method.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#_snippet_6

LANGUAGE: Python
CODE:
```
u1 = session.scalars(select(User).where(User.name == "some name")).first()
```

----------------------------------------

TITLE: Defining Declarative Base Class (SQLAlchemy 2.0) - Python
DESCRIPTION: Demonstrates the new way to define the base class for declarative models in SQLAlchemy 2.0 using `DeclarativeBase`, which is better understood by typing tools compared to the function `declarative_base`. This is the first step in migrating existing mappings.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_12

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase

class Base(DeclarativeBase):
    pass
```

----------------------------------------

TITLE: Migrating to SQLAlchemy 2.0 Execution Styles (Python)
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 style for database interaction. It shows how to create an engine, execute DDL and DML within a transaction using `connection.execute` and the `text()` construct, and execute a select statement using the updated `select()` syntax with `connection.execute`. This replaces the legacy `engine.execute` calls.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_2

LANGUAGE: python
CODE:
```
from sqlalchemy import column
from sqlalchemy import create_engine
from sqlalchemy import select
from sqlalchemy import table
from sqlalchemy import text


engine = create_engine("sqlite://")

# don't rely on autocommit for DML and DDL
with engine.begin() as connection:
    # use connection.execute(), not engine.execute()
    # use the text() construct to execute textual SQL
    connection.execute(text("CREATE TABLE foo (id integer)"))
    connection.execute(text("INSERT INTO foo (id) VALUES (1)"))


foo = table("foo", column("id"))

with engine.connect() as connection:
    # use connection.execute(), not engine.execute()
    # select() now accepts column / table expressions positionally
    result = connection.execute(select(foo.c.id))

    print(result.fetchall())
```

----------------------------------------

TITLE: Creating Database Tables via Metadata - Python
DESCRIPTION: This snippet executes the DDL statements required to create the database tables defined by the ORM models. It calls the `create_all()` method on the `MetaData` object associated with the declarative `Base`, using the previously created engine to connect to the database and generate the schema.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_2

LANGUAGE: Python
CODE:
```
Base.metadata.create_all(engine)
```

----------------------------------------

TITLE: Using SQLAlchemy Session with Context Manager
DESCRIPTION: Demonstrates the basic pattern for creating a SQLAlchemy Engine and Session, adding objects, and committing changes using a Python context manager (`with` statement). This ensures the session is automatically closed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy.orm import Session

# an Engine, which the Session will use for connection
# resources
engine = create_engine("postgresql+psycopg2://scott:tiger@localhost/")

# create session and add objects
with Session(engine) as session:
    session.add(some_object)
    session.add(some_other_object)
    session.commit()
```

----------------------------------------

TITLE: Deleting ORM Objects with Session Delete and Commit - Python/SQL
DESCRIPTION: Shows how to delete a top-level ORM object (User) using the `Session.delete()` method. The actual DELETE statements for the object and its related cascaded objects are emitted upon the subsequent `Session.commit()`. Notes that reloading expired objects may occur before deletion.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_8

LANGUAGE: python
CODE:
```
session.delete(patrick)

session.commit()
```

LANGUAGE: sql
CODE:
```
{execsql}SELECT user_account.id AS user_account_id, user_account.name AS user_account_name, user_account.fullname AS user_account_fullname
FROM user_account
WHERE user_account.id = ?
[...] (3,)
SELECT address.id AS address_id, address.email_address AS address_email_address, address.user_id AS address_user_id
FROM address
WHERE ? = address.user_id
[...] (3,)

{execsql}DELETE FROM address WHERE address.id = ?
[...] (4,)
DELETE FROM user_account WHERE user_account.id = ?
[...] (3,)
COMMIT
{stop}
```

----------------------------------------

TITLE: Defining Declarative Mapped Properties - Declarative Table
DESCRIPTION: This snippet shows how to define ORM mapped properties directly within a declarative class that also defines its `__tablename__`. It demonstrates mapping columns using `mapped_column`, creating relationships with `relationship`, and defining SQL expressions using `column_property`, including type annotations for Mapped attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import List
from typing import Optional

from sqlalchemy import Column
from sqlalchemy import ForeignKey
from sqlalchemy import String
from sqlalchemy import Text
from sqlalchemy.orm import column_property
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    firstname: Mapped[str] = mapped_column(String(50))
    lastname: Mapped[str] = mapped_column(String(50))
    fullname: Mapped[str] = column_property(firstname + " " + lastname)

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("user.id"))
    email_address: Mapped[str]
    address_statistics: Mapped[Optional[str]] = mapped_column(Text, deferred=True)

    user: Mapped["User"] = relationship(back_populates="addresses")
```

----------------------------------------

TITLE: Filtering by Attributes with filter_by (ORM)
DESCRIPTION: Shows the `filter_by` method on a SQLAlchemy ORM `select` statement, which allows filtering based on keyword arguments matching ORM attributes. Filters against the primary entity in the FROM clause.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_29

LANGUAGE: Python
CODE:
```
print(select(User).filter_by(name="spongebob", fullname="Spongebob Squarepants"))
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name = :name_1 AND user_account.fullname = :fullname_1
```

----------------------------------------

TITLE: Mapping Python enum.Enum to SQLAlchemy Column (Python)
DESCRIPTION: Defines a Python `enum.Enum` class (`Status`) and uses it as the type annotation (`Mapped[Status]`) for an ORM mapped attribute (`status`). SQLAlchemy automatically maps this to the `Enum` SQL datatype. Requires `enum`, `sqlalchemy.orm.DeclarativeBase`, `Mapped`, `mapped_column`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_28

LANGUAGE: Python
CODE:
```
import enum

from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class Status(enum.Enum):
    PENDING = "pending"
    RECEIVED = "received"
    COMPLETED = "completed"


class SomeClass(Base):
    __tablename__ = "some_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    status: Mapped[Status]
```

----------------------------------------

TITLE: ORM Update with WHERE and RETURNING using session.scalars in SQLAlchemy
DESCRIPTION: Demonstrates performing an ORM update operation using the sqlalchemy.update construct with a where() clause and a returning() clause. The update is executed via session.scalars(), allowing retrieval of the updated ORM entities. It also shows how to use execution options like synchronize_session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_27

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
stmt = (
    update(User)
    .where(User.name == "squidward")
    .values(name="spongebob")
    .returning(User)
)
result = session.scalars(stmt, execution_options={"synchronize_session": "fetch"})
print(result.all())
```

----------------------------------------

TITLE: Defining Table with ForeignKey in SQLAlchemy Python
DESCRIPTION: This defines an 'employees' table within `metadata_obj`, similar to the 'user' table example. It demonstrates the inclusion of a `ForeignKey` constraint on the 'employee_dept' column, linking it to the 'department_id' column in a 'departments' table. This establishes a relationship between the two tables.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_3

LANGUAGE: python
CODE:
```
employees = Table(
    "employees",
    metadata_obj,
    Column("employee_id", Integer, primary_key=True),
    Column("employee_name", String(60), nullable=False),
    Column("employee_dept", Integer, ForeignKey("departments.department_id")),
)
```

----------------------------------------

TITLE: Managing Session Externally with Context Managers in SQLAlchemy (Recommended)
DESCRIPTION: This example demonstrates a recommended pattern for managing the SQLAlchemy Session and transaction externally using Python's `with` statement (context managers). The `run_my_program` function creates a single session and transaction scope, passing the session to the `go` methods. This ensures operations within the scope participate in the same transaction, simplifying error handling and resource management.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_23

LANGUAGE: Python
CODE:
```
### this is a **better** (but not the only) way to do it ###


class ThingOne:
    def go(self, session):
        session.execute(update(FooBar).values(x=5))


class ThingTwo:
    def go(self, session):
        session.execute(update(Widget).values(q=18))


def run_my_program():
    with Session() as session:
        with session.begin():
            ThingOne().go(session)
            ThingTwo().go(session)
```

----------------------------------------

TITLE: Retrieving Session from scoped_session Python
DESCRIPTION: This line demonstrates how to access the `Session` object managed by the `scoped_session` registry. Calling the `Session` object (which is the `scoped_session` instance) returns the `Session` associated with the current scope (typically the current thread). Subsequent calls within the same scope will return the *same* `Session` instance.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_1

LANGUAGE: Python
CODE:
```
some_session = Session()
```

----------------------------------------

TITLE: Augmenting Relationship JOIN ON Clause with Additional Criteria in SQLAlchemy ORM
DESCRIPTION: Demonstrates using the `PropComparator.and_` method on a relationship-bound attribute (`User.addresses`) to add extra criteria (`Address.email_address == "squirrel@squirrelpower.org"`) to the automatically generated ON clause for the join. This allows filtering the joined results directly in the join condition. Includes execution and result.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_25

LANGUAGE: Python
CODE:
```
stmt = select(User.fullname).join(
    User.addresses.and_(Address.email_address == "squirrel@squirrelpower.org")
)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.fullname
FROM user_account
JOIN address ON user_account.id = address.user_id AND address.email_address = ?
[...] ('squirrel@squirrelpower.org',){stop}
[('Sandy Cheeks',)]
```

----------------------------------------

TITLE: Accessing Mapped Rows with ORM Session (2.0 Style) - Python
DESCRIPTION: Demonstrates how to retrieve results as mappings when using the ORM Session in SQLAlchemy 2.0 style by calling the `mappings()` method on the result object. This allows accessing columns by string key. Requires an ORM Session and a statement (`stmt`).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_28

LANGUAGE: python
CODE:
```
from sqlalchemy.future.orm import Session

session = Session(some_engine)

result = session.execute(stmt)
for row in result.mappings():
    print("the user is: %s" % row["User"])
```

----------------------------------------

TITLE: Committing Session and Cascading Saves - SQLAlchemy ORM
DESCRIPTION: This snippet executes `session.commit()`, triggering SQLAlchemy's unit of work to issue INSERT statements in the correct order (User then Address), automatically populating the foreign key (`user_id`) on the Address rows with the newly generated primary key (`id`) from the User row.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_9

LANGUAGE: Python
CODE:
```
>>> session.commit()
```

LANGUAGE: SQL
CODE:
```
{execsql}INSERT INTO user_account (name, fullname) VALUES (?, ?)
[...] ('pkrabs', 'Pearl Krabs')
INSERT INTO address (email_address, user_id) VALUES (?, ?) RETURNING id
[... (insertmanyvalues) 1/2 (ordered; batch not supported)] ('pearl.krabs@gmail.com', 6)
INSERT INTO address (email_address, user_id) VALUES (?, ?) RETURNING id
[insertmanyvalues 2/2 (ordered; batch not supported)] ('pearl@aol.com', 6)
COMMIT
```

----------------------------------------

TITLE: Fetching Object by Primary Key with Session.get()
DESCRIPTION: The SQLAlchemy 2.0 approach to fetching an object by its primary key using the Session.get() method, which replaces the legacy Query.get().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_65

LANGUAGE: Python
CODE:
```
# get() moves to the Session directly
user = session.get(User, 5)
```

----------------------------------------

TITLE: Comparing Less Than SQLAlchemy Python
DESCRIPTION: Demonstrates using the Python `<` operator on a SQLAlchemy `column` object to generate a SQL less-than expression. The output shows the generated SQL with a bound parameter.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_3

LANGUAGE: Python
CODE:
```
print(column("x") < 5)
```

----------------------------------------

TITLE: Defining Declarative Mixins with SQLAlchemy 2.0 Annotated Base
DESCRIPTION: This snippet defines SQLAlchemy declarative mixin classes (`CommonMixin`, `HasLogRecord`) and example mapped classes (`LogRecord`, `MyModel`) using the 2.0 `DeclarativeBase` and `Mapped`/`mapped_column` style. It illustrates how to share columns, table/mapper arguments, dynamic `__tablename__` generation, and relationships using `declared_attr` within the mixins.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import ForeignKey
from sqlalchemy.orm import declared_attr
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class CommonMixin:
    """define a series of common elements that may be applied to mapped
    classes using this class as a mixin class."""

    @declared_attr.directive
    def __tablename__(cls) -> str:
        return cls.__name__.lower()

    __table_args__ = {"mysql_engine": "InnoDB"}
    __mapper_args__ = {"eager_defaults": True}

    id: Mapped[int] = mapped_column(primary_key=True)


class HasLogRecord:
    """mark classes that have a many-to-one relationship to the
    ``LogRecord`` class."""

    log_record_id: Mapped[int] = mapped_column(ForeignKey("logrecord.id"))

    @declared_attr
    def log_record(self) -> Mapped["LogRecord"]:
        return relationship("LogRecord")


class LogRecord(CommonMixin, Base):
    log_info: Mapped[str]


class MyModel(CommonMixin, HasLogRecord, Base):
    name: Mapped[str]
```

----------------------------------------

TITLE: Managing SQLAlchemy ORM Transaction with Context Manager
DESCRIPTION: Shows how to use `session.begin()` as a context manager to define a transaction block. All operations within the `with` block occur within a single transaction that is committed upon exiting the block successfully or rolled back if an exception occurs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_1

LANGUAGE: Python
CODE:
```
with session.begin():
    session.add(some_object())
    session.add(some_other_object())
# commits transaction at the end, or rolls back if there
# was an exception raised
```

----------------------------------------

TITLE: Define SQLAlchemy ORM Mapping with mapped_column (Untyped) - Python
DESCRIPTION: This snippet demonstrates defining SQLAlchemy ORM declarative models using `mapped_column` for column definitions and `relationship` for relationships. It shows the basic structure of a `DeclarativeBase` and two related models (`User` and `Address`) without explicit Python type annotations for the mapped attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_14

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user_account"

    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(30), nullable=False)
    fullname = mapped_column(String)
    addresses = relationship("Address", back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id = mapped_column(Integer, primary_key=True)
    email_address = mapped_column(String, nullable=False)
    user_id = mapped_column(ForeignKey("user_account.id"), nullable=False)
    user = relationship("User", back_populates="addresses")
```

----------------------------------------

TITLE: Managing SQLAlchemy ORM Session and Transaction Scope with sessionmaker Context Manager
DESCRIPTION: Illustrates using a `sessionmaker` instance as a context manager to manage the session's lifecycle. It shows combining this with the `session.begin()` context manager for transaction control within the session's scope.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_5

LANGUAGE: Python
CODE:
```
Session = sessionmaker(engine)

with Session() as session:
    with session.begin():
        session.add(some_object)
    # commits

# closes the Session
```

----------------------------------------

TITLE: Configuring Engine Pool Size and Overflow in SQLAlchemy Python
DESCRIPTION: This snippet demonstrates how to configure a SQLAlchemy Engine object using the `create_engine` function, specifically setting the `pool_size` and `max_overflow` parameters. These parameters control the connection pool's behavior, limiting the total number of connections the application can hold to the database. `pool_size` sets the number of connections to keep open idle, while `max_overflow` sets the maximum number of additional connections that can be created when the pool is exhausted.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_0

LANGUAGE: Python
CODE:
```
engine = create_engine("mysql+mysqldb://u:p@host/db", pool_size=10, max_overflow=20)
```

----------------------------------------

TITLE: Mapping Many-to-One Relationship Python
DESCRIPTION: Defines SQLAlchemy ORM classes for Department and Employee, showing how to configure a many-to-one relationship from the Employee class back to Department using the `relationship` function, linked by the foreign key.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_20

LANGUAGE: python
CODE:
```
class Department(Base):
    __tablename__ = "department"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))


class Employee(Base):
    __tablename__ = "employee"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))
    dep_id = Column(Integer, ForeignKey("department.id"))
    department = relationship("Department")
```

----------------------------------------

TITLE: Building SELECT Statement with Method Chaining (Python)
DESCRIPTION: This snippet demonstrates how to construct a SQLAlchemy `select` statement using the 'generative' or method chaining pattern. It shows adding multiple criteria with `.where()` and an ordering clause with `.order_by()`, where each method call returns a new, modified select object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_7

LANGUAGE: Python
CODE:
```
stmt = (
    select(user.c.name)
    .where(user.c.id > 5)
    .where(user.c.name.like("e%"))
    .order_by(user.c.name)
)
```

----------------------------------------

TITLE: Defining Relationships with String Class Names in SQLAlchemy ORM Python
DESCRIPTION: This Python code demonstrates defining SQLAlchemy ORM relationships using string names for the target classes instead of direct class references. This pattern, used with `Mapped` types or non-annotated forms with `registry.map_imperatively`, allows for forward references and helps resolve dependencies during the mapper resolution stage after all classes are defined.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_25

LANGUAGE: Python
CODE:
```
class Parent(Base):
    # ...

    children: Mapped[List["Child"]] = relationship(back_populates="parent")


class Child(Base):
    # ...

    parent: Mapped["Parent"] = relationship(back_populates="children")
```

LANGUAGE: Python
CODE:
```
registry.map_imperatively(
    Parent,
    parent_table,
    properties={"children": relationship("Child", back_populates="parent")},
)

registry.map_imperatively(
    Child,
    child_table,
    properties={"parent": relationship("Parent", back_populates="children")},
```

----------------------------------------

TITLE: Executing Query with Selectin Load (pycon+sql)
DESCRIPTION: This snippet shows a SQLAlchemy query using the `selectinload(User.addresses)` option and the resulting SQL output. It demonstrates how `selectinload` issues two queries: one for the main `User` objects and a second, separate query to fetch all related `Address` objects for the loaded users, effectively solving the N+1 problem.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_15

LANGUAGE: pycon+sql
CODE:
```
>>> from sqlalchemy.orm import selectinload
>>> stmt = select(User).options(selectinload(User.addresses)).order_by(User.id)
>>> for row in session.execute(stmt):
... print(
... f"{row.User.name} ({', '.join(a.email_address for a in row.User.addresses)})")
{execsql}SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account ORDER BY user_account.id
[...] ()
SELECT address.user_id AS address_user_id, address.id AS address_id,
address.email_address AS address_email_address
FROM address
```

----------------------------------------

TITLE: SQLAlchemy: 2.0 Recommended 'Commit As You Go' Block
DESCRIPTION: Shows an alternative SQLAlchemy 2.0 pattern for executing statements and committing changes within a connection checkout using a nested `with conn.begin():` block, providing transaction demarcation without relying on autobegin.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_24

LANGUAGE: Python
CODE:
```
# "commit as you go" but with a transaction block instead of autobegin
with engine.connect() as conn:
    with conn.begin():
        result = conn.execute(stmt)
```

----------------------------------------

TITLE: Committing SQLAlchemy Session Transaction (Python/SQL)
DESCRIPTION: Shows how calling `session.commit()` finalizes the current transaction, making all pending changes permanent in the database. Includes the resulting SQL COMMIT statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_9

LANGUAGE: Python
CODE:
```
>>> session.commit()
```

LANGUAGE: SQL
CODE:
```
COMMIT
```

----------------------------------------

TITLE: Updating and Inserting ORM Objects with Session Commit - Python/SQL
DESCRIPTION: Shows how the SQLAlchemy ORM tracks changes made to objects loaded into a Session. It demonstrates fetching an object, appending a new related object to a collection (triggering a lazy load), modifying an existing object's attribute, and finally committing the session to persist changes as UPDATE and INSERT statements.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_6

LANGUAGE: python
CODE:
```
stmt = select(User).where(User.name == "patrick")
patrick = session.scalars(stmt).one()

patrick.addresses.append(Address(email_address="patrickstar@sqlalchemy.org"))

sandy_address.email_address = "sandy_cheeks@sqlalchemy.org"

session.commit()
```

LANGUAGE: sql
CODE:
```
{execsql}SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name = ?
[...] ('patrick',){stop}

{execsql}SELECT address.id AS address_id, address.email_address AS address_email_address, address.user_id AS address_user_id
FROM address
WHERE ? = address.user_id
[...] (3,){stop}

{execsql}UPDATE address SET email_address=? WHERE address.id = ?
[...] ('sandy_cheeks@sqlalchemy.org', 2)
INSERT INTO address (email_address, user_id) VALUES (?, ?)
[...] ('patrickstar@sqlalchemy.org', 3)
COMMIT
{stop}
```

----------------------------------------

TITLE: Configuring scoped_session with Custom Scope Function - Python
DESCRIPTION: Demonstrates how to configure SQLAlchemy's `scoped_session` to use a custom scope function (like a framework's `get_current_request`) instead of the default thread-local scope. It also shows how to integrate the session removal process with a hypothetical web framework's "on request end" event. Requires a web framework providing the scope function and request lifecycle events, and SQLAlchemy.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_8

LANGUAGE: python
CODE:
```
from my_web_framework import get_current_request, on_request_end
from sqlalchemy.orm import scoped_session, sessionmaker

Session = scoped_session(sessionmaker(bind=some_engine), scopefunc=get_current_request)


@on_request_end
def remove_session(req):
    Session.remove()
```

----------------------------------------

TITLE: Creating ORM User Objects (Python)
DESCRIPTION: Demonstrates how to instantiate mapped 'User' objects using keyword arguments corresponding to column names. These objects represent potential rows to be inserted into the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_0

LANGUAGE: Python
CODE:
```
squidward = User(name="squidward", fullname="Squidward Tentacles")
krabs = User(name="ehkrabs", fullname="Eugene H. Krabs")
```

----------------------------------------

TITLE: Emitting DDL via ORM Metadata (Python)
DESCRIPTION: Shows how to use the `create_all` method associated with the ORM Declarative Base's metadata to generate database tables based on the mapped classes. Requires an active database engine connection. The output shows the SQL executed (or skipped if tables exist).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_13

LANGUAGE: python
CODE:
```
Base.metadata.create_all(engine)
```

----------------------------------------

TITLE: Bulk Insert with RETURNING using session.scalars in SQLAlchemy ORM
DESCRIPTION: Demonstrates performing a bulk insert operation using the sqlalchemy.dml.Insert construct with the returning() clause. The operation is executed via session.scalars(), passing a list of dictionaries for the rows to be inserted. This method optimizes batching and supports heterogeneous parameter sets.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_24

LANGUAGE: Python
CODE:
```
users = session.scalars(
    insert(User).returning(User),
    [
        {"name": "spongebob", "fullname": "Spongebob Squarepants"},
        {"name": "sandy", "fullname": "Sandy Cheeks"},
        {"name": "patrick", "fullname": "Patrick Star"},
        {"name": "squidward", "fullname": "Squidward Tentacles"},
        {"name": "ehkrabs", "fullname": "Eugene H. Krabs"},
    ],
)
print(users.all())
```

----------------------------------------

TITLE: Using SQLAlchemy ORM Session as Context Manager
DESCRIPTION: Illustrates the use of sqlalchemy.orm.Session as a context manager. It shows creating a session, adding an object, and committing the transaction within the with block. The context manager handles closing the session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import Session

with Session(engine) as session:
    session.add(MyObject())
    session.commit()
```

----------------------------------------

TITLE: Declaring SQLAlchemy Table Object - Python
DESCRIPTION: Defines a Table object named 'user_account' within the specified MetaData collection. It includes column definitions ('id', 'name', 'fullname') with their types and constraints (primary key). Dependencies: sqlalchemy.MetaData, sqlalchemy.Table, sqlalchemy.Column, sqlalchemy.Integer, sqlalchemy.String.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy import Table, Column, Integer, String
user_table = Table(
    "user_account",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("name", String(30)),
    Column("fullname", String),
)
```

----------------------------------------

TITLE: Configuring One-to-Many with Set Collection (Annotated Declarative) - Python
DESCRIPTION: This snippet demonstrates how to use a 'set' instead of the default 'list' for a One-to-Many collection attribute in annotated Declarative mapping. The Set type is specified directly in the Mapped annotation for the children attribute.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_4

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[Set["Child"]] = relationship(back_populates="parent")
```

----------------------------------------

TITLE: Configuring Sessionmaker with Engine and Options
DESCRIPTION: Demonstrates the new paradigm for creating sessions using 'sessionmaker'. It shows configuring the session factory directly with an engine binding and options like 'autoflush' and 'transactional'.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#_snippet_13

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

engine = create_engine("myengine://")
Session = sessionmaker(bind=engine, autoflush=True, transactional=True)
```

----------------------------------------

TITLE: Defining Nullable Many-to-One (Annotated Declarative) - Python
DESCRIPTION: This example shows how to configure a Many-to-One relationship that can be nullable using annotated Declarative. Both the foreign key column and the relationship attribute are explicitly typed using Optional[] from the typing module.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Optional


class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    child_id: Mapped[Optional[int]] = mapped_column(ForeignKey("child_table.id"))
    child: Mapped[Optional["Child"]] = relationship(back_populates="parents")


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parents: Mapped[List["Parent"]] = relationship(back_populates="child")
```

----------------------------------------

TITLE: Executing SQL and Committing with SQLAlchemy Engine Connection
DESCRIPTION: Shows how to establish a connection using engine.connect(), execute a SQL statement using conn.execute(), and explicitly commit the transaction using conn.commit(). This illustrates the "commit-as-you-go" pattern in the new Engine/Connection API.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine

engine = create_engine("postgresql+psycopg2:///")

with engine.connect() as conn:
    conn.execute(text("insert into table (x) values (:some_x)"), {"some_x": 10})

    conn.commit()  # commit as you go
```

----------------------------------------

TITLE: Force SQLAlchemy Session Flush (Python)
DESCRIPTION: Demonstrates how to explicitly trigger the flush process on a SQLAlchemy Session instance, forcing pending changes to be synchronized with the database immediately, regardless of autoflush settings.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_11

LANGUAGE: Python
CODE:
```
session.flush()
```

----------------------------------------

TITLE: Defining ORM Model with Identity Primary Key - Python
DESCRIPTION: Defines a SQLAlchemy ORM model (`MyOracleModel`) with a primary key column (`id`) mapped using `mapped_column(Identity(), primary_key=True)`. This mapping uses the database's native identity generation feature. SQLAlchemy Core and ORM handle fetching the newly generated primary key value automatically upon insert, typically utilizing `RETURNING` if the backend (like Oracle) supports it, or alternative methods like `scope_identity()` or `lastrowid` otherwise.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#_snippet_16

LANGUAGE: Python
CODE:
```
class MyOracleModel(Base):
    __tablename__ = "my_table"

    id: Mapped[int] = mapped_column(Identity(), primary_key=True)
    data: Mapped[str] = mapped_column(String(50))
```

----------------------------------------

TITLE: Accessing Columns and Properties of SQLAlchemy Table Python
DESCRIPTION: This illustrates various methods for accessing individual `Column` objects or properties from a defined `Table`. Access can be done via attribute access (`.c.column_name`), dictionary-like access (`.c["column_name"]`), iteration through `.c`, or accessing specific attributes on a column object (e.g., `.name`, `.type`, `.primary_key`). It shows how to retrieve primary keys, foreign keys, column attributes, and table relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_4

LANGUAGE: python
CODE:
```
# access the column "employee_id":
employees.columns.employee_id

# or just
employees.c.employee_id

# via string
employees.c["employee_id"]

# a tuple of columns may be returned using multiple strings
# (new in 2.0)
# Accessing specific columns by name
# emp_id, name, type = employees.c["employee_id", "name", "type"]

# iterate through all columns
for c in employees.c:
    print(c)

# get the table's primary key columns
for primary_key in employees.primary_key:
    print(primary_key)

# get the table's foreign key objects:
for fkey in employees.foreign_keys:
    print(fkey)

# access the table's MetaData:
employees.metadata

# access a column's name, type, nullable, primary key, foreign key
employees.c.employee_id.name
employees.c.employee_id.type
employees.c.employee_id.nullable
employees.c.employee_id.primary_key
employees.c.employee_dept.foreign_keys

# get the "key" of a column, which defaults to its name, but can
# be any user-defined string:
employees.c.employee_name.key

# access a column's table:
employees.c.employee_id.table is employees

# get the table related by a foreign key
list(employees.c.employee_dept.foreign_keys)[0].column.table
```

----------------------------------------

TITLE: Configuring Annotated One-to-One Relationship - Python
DESCRIPTION: This example shows how to configure a One-to-One relationship using annotated Mapped types in SQLAlchemy. By applying a non-collection type (e.g., `Mapped["Child"]`) to the relationship annotation on both sides, the ORM implies a one-to-one convention.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_9

LANGUAGE: python
CODE:
```
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    child: Mapped["Child"] = relationship(back_populates="parent")


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent_table.id"))
    parent: Mapped["Parent"] = relationship(back_populates="child")
```

----------------------------------------

TITLE: Apply Joined Loading Option to Query - SQLAlchemy Python
DESCRIPTION: This snippet shows how to apply the `joinedload` option to a SQLAlchemy select statement. This option configures the query to use a JOIN to eagerly load the `Parent.children` relationship along with the parent objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import joinedload

# set children to load eagerly with a join
stmt = select(Parent).options(joinedload(Parent.children))
```

----------------------------------------

TITLE: Explicitly Beginning a Session Transaction with Try/Except
DESCRIPTION: Demonstrates manually beginning a transaction on a Session using session.begin() and managing the commit or rollback explicitly within a try...except block. Useful for fine-grained control over transaction boundaries.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_16

LANGUAGE: Python
CODE:
```
Session = sessionmaker(bind=engine)
session = Session()
session.begin()
try:
    item1 = session.get(Item, 1)
    item2 = session.get(Item, 2)
    item1.foo = "bar"
    item2.bar = "foo"
    session.commit()
except:
    session.rollback()
    raise
```

----------------------------------------

TITLE: Executing SQL String/Expression with Session (ORM)
DESCRIPTION: Explains how to execute arbitrary SQL strings or SQLAlchemy expression constructs directly through the ORM Session's transaction context using `session.execute()`. The method returns a CursorResult similar to executing on a Connection or Engine.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#_snippet_3

LANGUAGE: Python
CODE:
```
Session = sessionmaker(bind=engine)
session = Session()

# execute a string statement
result = session.execute(text("select * from table where id=:id"), {"id": 7})

# execute a SQL expression construct
result = session.execute(select(mytable).where(mytable.c.id == 7))
```

----------------------------------------

TITLE: Iterating Over Scalar ORM Results with scalars() - SQLAlchemy Python
DESCRIPTION: Executes an ORM select statement using a session and iterates directly over the scalar objects returned from the first column of the result set using the Result.scalars() method, commonly used when selecting full ORM entities.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_46

LANGUAGE: Python
CODE:
```
result = session.execute(select(User).order_by(User.id))
for user_obj in result.scalars():
    ...
```

----------------------------------------

TITLE: Setting SQLAlchemy Engine Pool Recycle (Python)
DESCRIPTION: Details how to set the `pool_recycle` parameter on the SQLAlchemy engine. This ensures connections older than the specified age (in seconds) are replaced upon checkout, mitigating issues with databases that automatically close idle connections. Requires `sqlalchemy.create_engine`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_9

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine

e = create_engine("mysql+mysqldb://scott:tiger@localhost/test", pool_recycle=3600)
```

----------------------------------------

TITLE: Fetch All Objects (SQLAlchemy 2.0 - scalars())
DESCRIPTION: Shows an alternative, more concise 2.0 style for fetching all objects. It directly uses `Session.scalars` with a `select` construct, followed by `.all()`. Requires a configured SQLAlchemy session, mapped User class, and the `select` function.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_40

LANGUAGE: Python
CODE:
```
session.scalars(
  select(User)
).all()
```

----------------------------------------

TITLE: Basic ORM Querying with select and Session - SQLAlchemy ORM - Python
DESCRIPTION: Introduces the basic pattern for performing ORM queries using the sqlalchemy.select construct within a session context. It shows how to build a select statement targeting a mapped class and filter it. The example is incomplete, not showing execution or result handling.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_6

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import Session

with Session(engine) as session:
    # query for ``User`` objects
    statement = select(User).filter_by(name="ed")

    # list of ``User`` objects
```

----------------------------------------

TITLE: Appending Object to Relationship Collection - SQLAlchemy Python
DESCRIPTION: This snippet shows how to create an `Address` object and append it to the `addresses` collection of a `User` instance. This action updates the state of the collection and the associated `Address` object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_2

LANGUAGE: Python
CODE:
```
>>> a1 = Address(email_address="pearl.krabs@gmail.com")
>>> u1.addresses.append(a1)
```

----------------------------------------

TITLE: Accessing Columns by Key with mappings() Modifier (Future) - SQLAlchemy Python
DESCRIPTION: Shows a future usage pattern (using sqlalchemy.future) where the mappings() modifier is applied directly to the result object, allowing iteration over dictionary-like rows and accessing columns by key.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_49

LANGUAGE: Python
CODE:
```
# using sqlalchemy.future package
for row in result.mappings():
    row["id"]
```

----------------------------------------

TITLE: Mapping SQLAlchemy Class with mapped_column (Python)
DESCRIPTION: This code defines a User class that inherits from the Base class. It uses __tablename__ to specify the table name and mapped_column to define columns like id, name, fullname, and nickname, including types and constraints. This automatically generates the corresponding Table object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy import Integer, String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(50), nullable=False)
    fullname = mapped_column(String)
    nickname = mapped_column(String(30))
```

----------------------------------------

TITLE: Executing Statement With Bind Parameter Python
DESCRIPTION: Shows the correct approach to executing a statement that requires bind parameters. The parameter values are passed as a dictionary (or a list of dictionaries for executemany) to the `execute` method, with keys matching the bind parameter names.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_8

LANGUAGE: python
CODE:
```
result = conn.execute(stmt, {"my_param": 12})
```

----------------------------------------

TITLE: Using MetaData with Engine and Connection (Python)
DESCRIPTION: Demonstrates common operations like creating and reflecting tables using `MetaData` with both the `Engine` and `Connection` objects. Shows how to execute SQL statements using the preferred `Connection.execute()` method within a transaction block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_17

LANGUAGE: Python
CODE:
```
from sqlalchemy import MetaData

metadata_obj = MetaData()

# engine level:

# create tables
metadata_obj.create_all(engine)

# reflect all tables
metadata_obj.reflect(engine)

# reflect individual table
t = Table("t", metadata_obj, autoload_with=engine)


# connection level:


with engine.connect() as connection:
    # create tables, requires explicit begin and/or commit:
    with connection.begin():
        metadata_obj.create_all(connection)

    # reflect all tables
    metadata_obj.reflect(connection)

    # reflect individual table
t = Table("t", metadata_obj, autoload_with=connection)

    # execute SQL statements
    result = connection.execute(t.select())
```

----------------------------------------

TITLE: Querying and Updating with SQLAlchemy Hybrid Property (Python+SQL)
DESCRIPTION: Demonstrates using a `hybrid_property` (`EmailAddress.email`) in a SQLAlchemy `select` query's `where` clause, showing how it generates appropriate SQL. It also shows updating the attribute on an instance and committing the changes, reflecting its dual nature for SQL expressions and instance access.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#_snippet_6

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import Session
from sqlalchemy import select

session = Session()

address = session.scalars(
    select(EmailAddress).where(EmailAddress.email == "address@example.com")
).one()

address.email = "otheraddress@example.com"
session.commit()
```

LANGUAGE: sql
CODE:
```
SELECT address.email AS address_email, address.id AS address_id
FROM address
WHERE address.email = ?
('address@example.com',)
UPDATE address SET email=? WHERE address.id = ?
('otheraddress@example.com', 1)
COMMIT
```

----------------------------------------

TITLE: Explicit Transaction for Procedural Call - SQLAlchemy Core
DESCRIPTION: Demonstrates using the `Engine.begin()` context manager to wrap the execution of a procedural SQL statement via `text()`. This ensures the procedural call is executed within an explicit transaction, replacing the deprecated 1.x `autocommit=True` execution option.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_12

LANGUAGE: python
CODE:
```
with engine.begin() as conn:
    conn.execute(text("EXEC my_procedural_thing()"))
```

----------------------------------------

TITLE: Disabling SQLAlchemy Connection Pooling with NullPool in Python
DESCRIPTION: This snippet demonstrates the simplest approach to using SQLAlchemy with multiprocessing by disabling connection pooling entirely. By specifying `poolclass=NullPool`, the engine will create a new connection for each request and close it immediately after use, preventing connections from being shared across process boundaries.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_12

LANGUAGE: python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy.pool import NullPool

engine = create_engine("mysql+mysqldb://user:pass@host/dbname", poolclass=NullPool)
```

----------------------------------------

TITLE: Using Association Object for Relationship (SQLAlchemy Python)
DESCRIPTION: Python code snippet demonstrating how to create instances of the Project and Employee classes and establish a relationship between them using the EmployeeProject association object. New EmployeeProject instances are created with references to the employee and the specific role, then appended to the project's backref relationship attribute.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_27

LANGUAGE: Python
CODE:
```
proj = Project(name="Client A")

emp1 = Employee(name="emp1")
emp2 = Employee(name="emp2")

proj.project_employees.extend(
    [
        EmployeeProject(employee=emp1, role_name="tech lead"),
        EmployeeProject(employee=emp2, role_name="account executive"),
    ]
)
```

----------------------------------------

TITLE: Using Many-to-Many Relationship Python
DESCRIPTION: Provides a practical example of creating ORM objects (Project, Employee) and establishing a many-to-many link between them by adding Employee objects to the `employees` collection on the Project instance.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_24

LANGUAGE: python
CODE:
```
proj = Project(name="Client A")

emp1 = Employee(name="emp1")
emp2 = Employee(name="emp2")

proj.employees.extend([emp1, emp2])
```

----------------------------------------

TITLE: Using func.count() in SQLAlchemy
DESCRIPTION: Demonstrates how to use the func.count() object to generate a SQL COUNT(*) expression. This is a common aggregate function used to count the number of rows returned by a query.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_79

LANGUAGE: Python
CODE:
```
print(select(func.count()).select_from(user_table))
```

LANGUAGE: SQL
CODE:
```
SELECT count(*) AS count_1
FROM user_account
```

----------------------------------------

TITLE: Using scoped_session Method Proxying Python
DESCRIPTION: This snippet highlights a convenience feature of `scoped_session`. Instead of first calling `Session()` to get the session object and then calling methods on it, you can call methods like `scalars()` or `query()` directly on the `Session` *registry* object itself. The `scoped_session` automatically retrieves the current underlying session and forwards the method call to it.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_5

LANGUAGE: Python
CODE:
```
Session = scoped_session(some_factory)

# equivalent to:
#
# session = Session()
# print(session.scalars(select(MyClass)).all())
#
print(Session.scalars(select(MyClass)).all())
```

----------------------------------------

TITLE: Selecting Specific ORM Attributes (SQLAlchemy ORM)
DESCRIPTION: Demonstrates selecting individual attributes (User.name, Address.email_address) instead of full entities, resulting in a row object with columns corresponding to the selected attributes. Includes the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_8

LANGUAGE: Python
CODE:
```
result = session.execute(
    select(User.name, Address.email_address)
    .join(User.addresses)
    .order_by(User.id, Address.id)
)
for row in result:
    print(f"{row.name}  {row.email_address}")
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.name, address.email_address
FROM user_account JOIN address ON user_account.id = address.user_id
ORDER BY user_account.id, address.id
```

----------------------------------------

TITLE: Defining SQLAlchemy Relationship with String Class Name (Python)
DESCRIPTION: Demonstrates defining a SQLAlchemy relationship using a string literal ("myapp.mymodel.Child") for the target class argument. This pattern allows for type-checking imports via `typing.TYPE_CHECKING` while resolving the target class at runtime from the ORM registry, helping to avoid import cycles.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_27

LANGUAGE: Python
CODE:
```
import typing

if typing.TYPE_CHECKING:
    from myapp.mymodel import Child


class Parent(Base):
    # ...

    children: Mapped[List["Child"]] = relationship(
        "myapp.mymodel.Child",
        order_by="desc(myapp.mymodel.Child.email_address)",
        primaryjoin="myapp.mymodel.Parent.id == myapp.mymodel.Child.parent_id",
    )
```

----------------------------------------

TITLE: Bulk Update with Session.execute (List of Dicts) - Python
DESCRIPTION: Demonstrates performing a bulk update operation using session.execute with an update construct and a list of dictionaries providing primary key and updated values for multiple rows. This is the modern approach for bulk updates based on primary keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_21

LANGUAGE: Python
CODE:
```
session.execute(
    update(Manager),
    [
        {
            "id": 1,
            "name": "scheeks",
            "manager_name": "Sandy Cheeks, President",
        },
        {
            "id": 2,
            "name": "eugene",
            "manager_name": "Eugene H. Krabs, VP Marketing",
        },
    ],
)
```

----------------------------------------

TITLE: Begin Once Transaction Style with Engine (SQLAlchemy)
DESCRIPTION: Provides a shorthand for the 'begin once' style using `engine.begin()`. This method combines connecting and beginning a transaction into a single context manager. The transaction starts implicitly upon entering the 'with' block and is automatically committed upon successful exit or rolled back on exception.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_5

LANGUAGE: Python
CODE:
```
with engine.begin() as connection:
    connection.execute(some_table.insert(), {"x": 7, "y": "this is some data"})
    connection.execute(
        some_other_table.insert(), {"q": 8, "p": "this is some more data"}
    )

    # transaction is committed, and Connection is released to the connection
    # pool
```

----------------------------------------

TITLE: Executing SQLAlchemy ORM UNION via Aliased Subquery - Python
DESCRIPTION: Illustrates a more flexible approach to using a union_all statement by converting it into a subquery (u.subquery()), aliasing it to the target ORM entity (User) using aliased(), and then selecting from the aliased entity. This allows adding further clauses like ORDER BY outside the union. It shows the generated SQL and the fetched ORM objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_76

LANGUAGE: python
CODE:
```
user_alias = aliased(User, u.subquery())
orm_stmt = select(user_alias).order_by(user_alias.id)
with Session(engine) as session:
    for obj in session.execute(orm_stmt).scalars():
        print(obj)
```

LANGUAGE: sql
CODE:
```
BEGIN (implicit)
SELECT anon_1.id, anon_1.name, anon_1.fullname
FROM (SELECT user_account.id AS id, user_account.name AS name, user_account.fullname AS fullname
FROM user_account
WHERE user_account.name = ? UNION ALL SELECT user_account.id AS id, user_account.name AS name, user_account.fullname AS fullname
FROM user_account
WHERE user_account.name = ?) AS anon_1 ORDER BY anon_1.id
[generated in ...] ('sandy', 'spongebob')
ROLLBACK
```

----------------------------------------

TITLE: Explicitly Beginning a Session Transaction with Context Manager
DESCRIPTION: Shows the idiomatic approach to explicitly begin a transaction on a Session using session.begin() as a context manager. This pattern automatically handles the commit or rollback based on the success or failure of the 'with' block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_17

LANGUAGE: Python
CODE:
```
Session = sessionmaker(bind=engine)
session = Session()
with session.begin():
    item1 = session.get(Item, 1)
    item2 = session.get(Item, 2)
    item1.foo = "bar"
    item2.bar = "foo"
```

----------------------------------------

TITLE: Using SQLAlchemy ORM sessionmaker.begin() Context Manager
DESCRIPTION: Shows how to use the begin() method of a sessionmaker as a context manager. This pattern creates a session, begins a transaction, and automatically commits or rolls back upon exiting the with block. It demonstrates adding an object within the transaction.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_6

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import sessionmaker

Session = sessionmaker(engine)

with Session.begin() as session:
    session.add(MyObject())
```

----------------------------------------

TITLE: Bulk Update ORM Entities by Primary Key - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates how to perform a bulk update on an ORM entity (`User`) using SQLAlchemy's `Session.execute` method. It takes an `update` construct targeting the `User` class and a list of dictionaries, where each dictionary contains the primary key (`id`) and the values to update (`fullname`). SQLAlchemy automatically generates the `WHERE` clause for each primary key and uses `executemany` for efficiency. Each parameter dictionary *must* include the full primary key.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_19

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
session.execute(
    update(User),
    [
        {"id": 1, "fullname": "Spongebob Squarepants"},
        {"id": 3, "fullname": "Patrick Star"},
        {"id": 5, "fullname": "Eugene H. Krabs"},
    ],
)
```

----------------------------------------

TITLE: Building a Basic SELECT Statement with WHERE
DESCRIPTION: Demonstrates how to create a basic SELECT statement using the `select` function, targeting a mapped ORM class (`User`) and applying a filtering condition using the `where` method based on a mapped attribute (`User.name`). This statement object can then be executed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_0

LANGUAGE: python
CODE:
```
from sqlalchemy import select
stmt = select(User).where(User.name == "spongebob")
```

----------------------------------------

TITLE: Persisting Related Objects - SQLAlchemy Session - Python
DESCRIPTION: Creates a `User` instance with an associated `Address` instance. Adds the user object to the SQLAlchemy session and commits the transaction, persisting both objects to the database. This establishes an initial state for subsequent examples demonstrating session object management.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#_snippet_9

LANGUAGE: pycon+sql
CODE:
```
>>> u1 = User(name="ed", addresses=[Address(email_address="ed@ed.com")])
>>> session.add(u1)
>>> session.commit()
```

----------------------------------------

TITLE: Simplify SQLAlchemy ORM Mapping with Mapped (Typed and Concise) - Python
DESCRIPTION: This snippet demonstrates a further simplified version of the SQLAlchemy ORM declarative models, leveraging Python type annotations with `Mapped` to imply column types and nullability. It shows how `mapped_column` can be omitted or simplified when type annotations provide sufficient information.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_16

LANGUAGE: Python
CODE:
```
from typing import List
from typing import Optional
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(30))
    fullname: Mapped[Optional[str]]
    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
    user: Mapped["User"] = relationship(back_populates="addresses")
```

----------------------------------------

TITLE: Defining Bidirectional Relationship with Back Populates (Python)
DESCRIPTION: This snippet defines the same `User` and `Address` ORM classes using Declarative Base but explicitly configures the bidirectional relationship using the `back_populates` parameter on both the `User.addresses` relationship and the `Address.user` relationship. This is the modern, preferred approach to defining bidirectional links in SQLAlchemy, equivalent to the basic `backref` example.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/backref.rst#_snippet_1

LANGUAGE: python
CODE:
```
from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.orm import DeclarativeBase, relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String)

    addresses = relationship("Address", back_populates="user")


class Address(Base):
    __tablename__ = "address"
    id = mapped_column(Integer, primary_key=True)
    email = mapped_column(String)
    user_id = mapped_column(Integer, ForeignKey("user.id"))

    user = relationship("User", back_populates="addresses")
```

----------------------------------------

TITLE: Applying SQLAlchemy Selectin Load Option (Python)
DESCRIPTION: This Python snippet illustrates how to apply the `selectinload` loader strategy using the `select.options` method. This strategy causes SQLAlchemy to issue a separate SELECT query after the main query to load the `addresses` collection for all fetched `User` objects, avoiding the N+1 problem for collection access.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_13

LANGUAGE: python
CODE:
```
for user_obj in session.execute(
 select(User).options(selectinload(User.addresses))
 ).scalars():
 user_obj.addresses # access addresses collection already loaded
```

----------------------------------------

TITLE: Mapping One-to-Many Relationship Python
DESCRIPTION: Defines SQLAlchemy ORM classes for Department and Employee, demonstrating the configuration of a one-to-many relationship from the Department class to Employee using the `relationship` function.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_19

LANGUAGE: python
CODE:
```
class Department(Base):
    __tablename__ = "department"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))
    employees = relationship("Employee")


class Employee(Base):
    __tablename__ = "employee"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))
    dep_id = Column(Integer, ForeignKey("department.id"))
```

----------------------------------------

TITLE: Creating SQL Server Engines with Various Drivers - Python
DESCRIPTION: Provides examples of creating SQLAlchemy Engines for Microsoft SQL Server using the mssql dialect, demonstrating connections with the default pyodbc driver and the pymssql driver.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_8

LANGUAGE: Python
CODE:
```
# pyodbc
engine = create_engine("mssql+pyodbc://scott:tiger@mydsn")
```

LANGUAGE: Python
CODE:
```
# pymssql
engine = create_engine("mssql+pymssql://scott:tiger@hostname:port/dbname")
```

----------------------------------------

TITLE: Set Default Isolation Level for SQLAlchemy Engine
DESCRIPTION: Shows how to configure a default transaction isolation level for all connections created by a SQLAlchemy engine. By passing the `isolation_level` parameter to `create_engine`, every new DBAPI connection acquired from this engine will be initialized with the specified isolation level.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_10

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine

eng = create_engine(
    "postgresql://scott:tiger@localhost/test", isolation_level="REPEATABLE READ"
)
```

----------------------------------------

TITLE: Adding ORM Objects to Session (Python)
DESCRIPTION: Adds transient 'User' objects ('squidward', 'krabs') to the ORM 'Session'. This transitions the objects to a 'pending' state, marking them for potential insertion during the next flush.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_3

LANGUAGE: Python
CODE:
```
session.add(squidward)
session.add(krabs)
```

----------------------------------------

TITLE: Performing a Simple ORM Join using Relationship in SQLAlchemy
DESCRIPTION: Demonstrates how to use `select().join()` with a relationship attribute (`User.addresses`) to automatically construct a JOIN clause between the `User` and `Address` entities based on the defined relationship. The resulting SQL joins the `user_account` and `address` tables on the foreign key relationship.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_19

LANGUAGE: Python
CODE:
```
stmt = select(User).join(User.addresses)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: Disposing SQLAlchemy Engine Before Starting Child Process in Python
DESCRIPTION: This snippet shows an alternative method for using a SQLAlchemy engine with a single child process (`multiprocessing.Process`). Calling `engine.dispose()` in the parent process *before* forking ensures that the parent's connections are closed and not carried over to the child process, allowing the child to start with a new, independent connection pool.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_14

LANGUAGE: python
CODE:
```
from multiprocessing import Process
from sqlalchemy import create_engine, text # text is used in the example context, but not imported in the original text

engine = create_engine("mysql://user:pass@host/dbname")


def run_in_process():
    with engine.connect() as conn:
        # Example usage of text()
        conn.execute(text("SELECT 1")) # Replaced "..." with a simple example


# before process starts, ensure engine.dispose() is called
engine.dispose()

# Example usage with a Process
# Note: Need 'if __name__ == "__main__":' guard for multiprocessing
# if __name__ == "__main__":
#     p = Process(target=run_in_process)
#     p.start()
#     p.join()
```

----------------------------------------

TITLE: Assigning Relationship Attribute Explicitly - SQLAlchemy Python
DESCRIPTION: This snippet illustrates that explicitly assigning a `User` object to the `user` attribute of an `Address` object has the same effect as passing it during construction or appending to the `User.addresses` collection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_6

LANGUAGE: Python
CODE:
```
# equivalent effect as a2 = Address(user=u1)
>>> a2.user = u1
```

----------------------------------------

TITLE: Selecting Mapped Classes as Scalars
DESCRIPTION: Shows the typical use case of selecting ORM mapped classes using `session.scalars()`. The result is typed as a sequence or iterator of the mapped class instances.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_8

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import Session
from typing import Sequence, Iterator

# (variable) users1: Sequence[User]
users1 = session.scalars(select(User)).all()

# (variable) user_iter: Iterator[User]
user_iter = iter(session.scalars(select(User)))
```

----------------------------------------

TITLE: ORM Models with Unmapped PEP 484 Annotations (Will Raise Error)
DESCRIPTION: Provides an example of SQLAlchemy ORM models using PEP 484 type annotations for relationships (List["Bar"], Foo) without the required Mapped container. This code demonstrates a pattern that will raise errors in SQLAlchemy 2.0 due to the new typing requirements for relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_7

LANGUAGE: Python
CODE:
```
Base = declarative_base()


class Foo(Base):
    __tablename__ = "foo"

    id: int = Column(Integer, primary_key=True)

    # will raise
    bars: List["Bar"] = relationship("Bar", back_populates="foo")


class Bar(Base):
    __tablename__ = "bar"

    id: int = Column(Integer, primary_key=True)
    foo_id = Column(ForeignKey("foo.id"))

    # will raise
    foo: Foo = relationship(Foo, back_populates="bars", cascade="all")
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Models for Single Inheritance (Python)
DESCRIPTION: Defines the Python classes `Base`, `Employee`, `Manager`, and `Engineer` using SQLAlchemy's ORM and `DeclarativeBase` for single-table inheritance mapping. The `Employee` class acts as the base, using `polymorphic_on` on the 'type' column, while `Manager` and `Engineer` inherit, adding specific columns and defining their `polymorphic_identity`. Requires `sqlalchemy.orm`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_single_inheritance.rst#_snippet_0

LANGUAGE: python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy import ForeignKey
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Session


class Base(DeclarativeBase):
    pass
class Employee(Base):
    __tablename__ = "employee"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    type: Mapped[str]

    def __repr__(self):
        return f"{self.__class__.__name__}({self.name!r})"

    __mapper_args__ = {
        "polymorphic_identity": "employee",
        "polymorphic_on": "type",
    }
class Manager(Employee):
    manager_name: Mapped[str] = mapped_column(nullable=True)
    __mapper_args__ = {
        "polymorphic_identity": "manager",
    }
class Engineer(Employee):
    engineer_info: Mapped[str] = mapped_column(nullable=True)
    __mapper_args__ = {
        "polymorphic_identity": "engineer",
    }
```

----------------------------------------

TITLE: Use Annotated for Mapped Column Definitions in SQLAlchemy ORM
DESCRIPTION: Extends the use of `Annotated` to package full `mapped_column` definitions. This example defines `intpk` for primary key integers and `user_fk` for foreign key integers, demonstrating how `Annotated` can include column arguments directly. It then shows how these `Annotated` types are used within ORM mapped classes (`User`, `Address`) alongside the `type_annotation_map` approach.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_18

LANGUAGE: python
CODE:
```
from typing_extensions import Annotated
from typing import List
from typing import Optional
from sqlalchemy import ForeignKey
from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship

# declarative base from previous example
str50 = Annotated[str, 50]


class Base(DeclarativeBase):
    type_annotation_map = {
        str50: String(50),
    }


# set up mapped_column() overrides, using whole column styles that are
# expected to be used in multiple places
intpk = Annotated[int, mapped_column(primary_key=True)]
user_fk = Annotated[int, mapped_column(ForeignKey("user_account.id"))]


class User(Base):
    __tablename__ = "user_account"

    id: Mapped[intpk]
    name: Mapped[str50]
    fullname: Mapped[Optional[str]]
    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id: Mapped[intpk]
    email_address: Mapped[str50]
    user_id: Mapped[user_fk]
    user: Mapped["User"] = relationship(back_populates="addresses")
```

----------------------------------------

TITLE: Executing Select for Scalar Results
DESCRIPTION: Demonstrates executing a select statement that returns a single column and retrieving all results as a sequence of scalar values. Requires an active connection and a column object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_3

LANGUAGE: Python
CODE:
```
data = connection.execute(select(str_col)).scalars().all()
```

----------------------------------------

TITLE: Executing Select for ORM Entity (Scalars) - SQLAlchemy Python
DESCRIPTION: Executes a SQLAlchemy SELECT statement targeting a full ORM entity (`User`) using the `Session.scalars` method. This method returns a scalar result, directly yielding entity instances from the first column of each row.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_8

LANGUAGE: Python
CODE:
```
user = session.scalars(select(User)).first()
```

----------------------------------------

TITLE: ORM Update with Custom WHERE Clause - Python
DESCRIPTION: Demonstrates how to perform an ORM-enabled update operation using session.execute with an update construct that includes a custom where clause and values for the update. This allows updating multiple rows based on arbitrary criteria, bypassing the primary key-based bulk update mechanism.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_24

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
stmt = (
    update(User)
    .where(User.name.in_(["squidward", "sandy"]))
    .values(fullname="Name starts with S")
)
session.execute(stmt)
```

----------------------------------------

TITLE: Defining Bidirectional One-to-Many / Many-to-One (Non-Annotated Declarative) - Python
DESCRIPTION: This snippet demonstrates a bidirectional One-to-Many / Many-to-One relationship using the classic non-annotated Declarative style. The target class and collection type ('Child', 'Parent') are explicitly passed to the relationship function, along with back_populates.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_2

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent_table"

    id = mapped_column(Integer, primary_key=True)
    children = relationship("Child", back_populates="parent")


class Child(Base):
    __tablename__ = "child_table"

    id = mapped_column(Integer, primary_key=True)
    parent_id = mapped_column(ForeignKey("parent_table.id"))
    parent = relationship("Parent", back_populates="children")
```

----------------------------------------

TITLE: Recommended Select and Case Syntax (2.0 Style) - Python
DESCRIPTION: Shows the recommended, generative style for `select` and `case` constructs in SQLAlchemy 1.4+ and 2.0. This involves using generative methods like `.select_from()`, `.where()`, and `.order_by()`, and passing columns and case conditions positionally. This style is cross-compatible with 1.4 and 2.0.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_31

LANGUAGE: python
CODE:
```
# use generative methods
stmt = select(1).select_from(table).order_by(table.c.id)

# use generative methods
stmt = select(table).where(table.c.id == 5)

# use generative methods
stmt = table.select().where(table.c.id == 5)

# pass columns clause expressions positionally
stmt = select(table.c.x, table.c.y)

# case conditions passed positionally
case_clause = case(
    (table.c.x == 5, "five"), (table.c.x == 7, "seven"), else_="neither five nor seven"
)
```

----------------------------------------

TITLE: Explicitly Name Declarative Mapped Columns
DESCRIPTION: Provide a string as the first positional argument to mapped_column to specify the explicit database column name, distinct from the Python attribute name. Queries using the Python attribute name will generate SQL using the specified database name.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_50

LANGUAGE: python
CODE:
```
class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column("user_id", primary_key=True)
    name: Mapped[str] = mapped_column("user_name")
```

----------------------------------------

TITLE: Adding Multiple WHERE Clauses to SQLAlchemy Select (Python)
DESCRIPTION: Demonstrates how calling the `where()` method multiple times on a SQLAlchemy `Select` statement implicitly joins the conditions with `AND`. Prints the resulting SQL statement. Requires `address_table` and `user_table`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_25

LANGUAGE: Python
CODE:
```
print(
    select(address_table.c.email_address)
    .where(user_table.c.name == "squidward")
    .where(address_table.c.user_id == user_table.c.id)
)
```

----------------------------------------

TITLE: Querying with Mapped Attributes - SQLAlchemy 1.4/2.0 Core/ORM
DESCRIPTION: Shows equivalent querying, loading, and filtering operations using mapped attributes with the SQLAlchemy 1.4/2.0 style `select` construct and `session.execute`. This is cross-compatible.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_75

LANGUAGE: Python
CODE:
```
stmt = select(User).join(User.addresses)
result = session.execute(stmt)

stmt = select(User).options(joinedload(User.addresses))
result = session.execute(stmt)

stmt = select(Address).where(with_parent(u1, User.addresses))
result = session.execute(stmt)
```

----------------------------------------

TITLE: Selecting Multiple Columns by Name (Tuple) - SQLAlchemy Python
DESCRIPTION: Demonstrates how to select multiple columns from a SQLAlchemy `Table` object's `.c` collection by providing a tuple of column names. This generates a SQL SELECT statement for the specified columns.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_5

LANGUAGE: Python
CODE:
```
print(select(user_table.c["name", "fullname"]))
```

----------------------------------------

TITLE: Performing LEFT OUTER JOIN - SQLAlchemy
DESCRIPTION: Shows how to perform a LEFT OUTER JOIN using the join method with the isouter=True keyword argument. It selects from user_table and performs a left outer join with address_table.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_37

LANGUAGE: Python
CODE:
```
print(select(user_table).join(address_table, isouter=True))
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account LEFT OUTER JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: Adding Mapped Column with Alternate Name (Declarative) - SQLAlchemy Python
DESCRIPTION: Shows how to add a new column to a declarative-mapped class using `mapped_column`, specifying an alternate name for the database column. Requires the class to be based on `DeclarativeBase` and the declarative base to use a metaclass that intercepts attribute assignment.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_55

LANGUAGE: Python
CODE:
```
MyClass.some_new_column = mapped_column("some_name", String)
```

----------------------------------------

TITLE: Managing SQLAlchemy ORM Session and Transaction Scope with sessionmaker.begin()
DESCRIPTION: Demonstrates using the `sessionmaker.begin()` method as a context manager. This pattern combines the creation and scope management of the session with the initiation and scope management of a transaction, simplifying resource handling.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_6

LANGUAGE: Python
CODE:
```
with Session.begin() as session:
    session.add(some_object)
```

----------------------------------------

TITLE: Augmenting SQLAlchemy 2.0 DeclarativeBase Directly
DESCRIPTION: This snippet shows how to apply common mapping configurations directly to the `DeclarativeBase` class, affecting all derived classes. It defines shared attributes like a dynamic `__tablename__` (using `declared_attr.directive`), `__table_args__`, `__mapper_args__`, and a primary key `id` column within the `Base` class itself.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from sqlalchemy import ForeignKey
from sqlalchemy.orm import declared_attr
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    """define a series of common elements that may be applied to mapped
    classes using this class as a base class."""

    @declared_attr.directive
    def __tablename__(cls) -> str:
        return cls.__name__.lower()

    __table_args__ = {"mysql_engine": "InnoDB"}
    __mapper_args__ = {"eager_defaults": True}

    id: Mapped[int] = mapped_column(primary_key=True)


class HasLogRecord:
    """mark classes that have a many-to-one relationship to the
    ``LogRecord`` class."""

    log_record_id: Mapped[int] = mapped_column(ForeignKey("logrecord.id"))

    @declared_attr
    def log_record(self) -> Mapped["LogRecord"]:
        return relationship("LogRecord")


class LogRecord(Base):
    log_info: Mapped[str]


class MyModel(HasLogRecord, Base):
    name: Mapped[str]
```

----------------------------------------

TITLE: Initializing MetaData Object in SQLAlchemy Python
DESCRIPTION: This snippet demonstrates the fundamental step of creating an empty `MetaData` object, which serves as a container for all schema descriptions like tables, sequences, and constraints. It requires importing the `MetaData` class from the `sqlalchemy` library. The resulting `metadata_obj` is used to associate schema constructs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_0

LANGUAGE: python
CODE:
```
from sqlalchemy import MetaData

metadata_obj = MetaData()
```

----------------------------------------

TITLE: Fetch with Joined Eager Loading (SQLAlchemy 2.0)
DESCRIPTION: Shows the 2.0 approach for fetching objects and eagerly loading a related collection using `select` with `options(joinedload(...))`, applying `.unique()` to handle potential duplicates from the join, and fetching all results using `.all()`. Requires a configured SQLAlchemy session, mapped User class, and the `select` and `joinedload` functions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_46

LANGUAGE: Python
CODE:
```
session.scalars(
  select(User).
  options(
    joinedload(User.addresses)
  )
).unique().all()
```

----------------------------------------

TITLE: Loading ORM Object by Name in SQLAlchemy
DESCRIPTION: Loads a User object from the database using the Session, filtering by name. Demonstrates the use of `select`, `filter_by`, and `scalar_one` methods and shows the corresponding SQL query executed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_10

LANGUAGE: pycon+sql
CODE:
```
>>> sandy = session.execute(select(User).filter_by(name="sandy")).scalar_one()
{execsql}BEGIN (implicit)
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name = ?
[...] ('sandy',)
```

----------------------------------------

TITLE: Sending Multiple Parameter Sets for INSERT (Python)
DESCRIPTION: This snippet demonstrates executing an `INSERT` statement multiple times in an optimized way using the "executemany" pattern. It passes a list of dictionaries, each representing a row's parameters, as the second argument to `Connection.execute`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#_snippet_3

LANGUAGE: python
CODE:
```
with engine.connect() as conn:
    conn.execute(
        text("INSERT INTO some_table (x, y) VALUES (:x, :y)"),
        [{"x": 11, "y": 12}, {"x": 13, "y": 14}],
    )
    conn.commit()
```

----------------------------------------

TITLE: Defining SQLAlchemy Many-to-Many Relationship with Lambda Secondary (Python)
DESCRIPTION: Shows how to define the `secondary` parameter for a many-to-many SQLAlchemy relationship using a lambda function. This technique allows deferring the lookup or definition of the association table (`association_table`) until runtime, which is useful when the table is defined later in the module than the relationship.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_31

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "left_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship(
        "Child", secondary=lambda: association_table
    )
```

----------------------------------------

TITLE: Creating SQLAlchemy SQLite Engine and Schema (Python)
DESCRIPTION: Initializes a SQLAlchemy `create_engine` targeting an in-memory SQLite database (`"sqlite://"`). The `echo=True` parameter is set to display SQL commands executed. It then uses `Base.metadata.create_all()` to generate the database table(s) corresponding to the ORM models defined in the `Base.metadata`. Requires a defined `Base` with mapped classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_single_inheritance.rst#_snippet_1

LANGUAGE: python
CODE:
```
engine = create_engine("sqlite://", echo=True)

Base.metadata.create_all(engine)
```

----------------------------------------

TITLE: Defining DynamicMapped Relationship with write_only in SQLAlchemy ORM (Python)
DESCRIPTION: This snippet defines two SQLAlchemy ORM classes, `Account` and `AccountTransaction`, demonstrating the use of `DynamicMapped` with `lazy="write_only"` for the `account_transactions` relationship. This configuration provides an `AppenderQuery` collection type, allowing efficient querying and iteration without loading the entire collection into memory immediately.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_32

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DynamicMapped


class Base(DeclarativeBase):
    pass


class Account(Base):
    __tablename__ = "account"
    id: Mapped[int] = mapped_column(primary_key=True)
    identifier: Mapped[str]
    account_transactions: DynamicMapped["AccountTransaction"] = relationship(
        cascade="all, delete-orphan",
        passive_deletes=True,
        order_by="AccountTransaction.timestamp",
    )


class AccountTransaction(Base):
    __tablename__ = "account_transaction"
    id: Mapped[int] = mapped_column(primary_key=True)
    account_id: Mapped[int] = mapped_column(
        ForeignKey("account.id", ondelete="cascade")
    )
    description: Mapped[str]
    amount: Mapped[Decimal]
    timestamp: Mapped[datetime] = mapped_column(default=func.now())
```

----------------------------------------

TITLE: New Way: Chained Joined Load Nested Relationships (SQLAlchemy ORM Python)
DESCRIPTION: Demonstrates the new method using chained `joinedload` calls to explicitly apply joined loading to each link in a nested relationship path.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#_snippet_30

LANGUAGE: Python
CODE:
```
query(User).options(joinedload("orders").joinedload("items").joinedload("keywords"))
```

----------------------------------------

TITLE: Combining WHERE Conditions with AND/OR (ORM)
DESCRIPTION: Illustrates using the `sqlalchemy.and_` and `sqlalchemy.or_` functions to create complex WHERE clauses with ORM entities. Shows how these translate to SQL parentheses.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_28

LANGUAGE: Python
CODE:
```
from sqlalchemy import and_, or_
print(
    select(Address.email_address).where(
        and_(
            or_(User.name == "squidward", User.name == "sandy"),
            Address.user_id == User.id,
        )
    )
)
```

LANGUAGE: SQL
CODE:
```
SELECT address.email_address
FROM address, user_account
WHERE (user_account.name = :name_1 OR user_account.name = :name_2)
AND address.user_id = user_account.id
```

----------------------------------------

TITLE: Creating INSERT FROM SELECT statement in SQLAlchemy
DESCRIPTION: Illustrates how to use SQLAlchemy's `insert().from_select()` method to construct an INSERT statement that populates a table with data directly from a SELECT statement, avoiding client-side data transfer.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_12

LANGUAGE: Python
CODE:
```
select_stmt = select(user_table.c.id, user_table.c.name + "@aol.com")
insert_stmt = insert(address_table).from_select(
    ["user_id", "email_address"], select_stmt
)
print(insert_stmt)
```

LANGUAGE: SQL
CODE:
```
INSERT INTO address (user_id, email_address)
SELECT user_account.id, user_account.name || :name_1 AS anon_1
FROM user_account
```

----------------------------------------

TITLE: Using Synchronous Inspector with Async Connection - Python
DESCRIPTION: This example shows how to run a synchronous function that uses the SQLAlchemy Inspector within an asyncio application. It leverages the AsyncConnection.run_sync method to execute synchronous code that interacts with the database using a connection obtained from an async engine.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#_snippet_9

LANGUAGE: Python
CODE:
```
import asyncio

from sqlalchemy import inspect
from sqlalchemy.ext.asyncio import create_async_engine

engine = create_async_engine("postgresql+asyncpg://scott:tiger@localhost/test")


def use_inspector(conn):
    inspector = inspect(conn)
    # use the inspector
    print(inspector.get_view_names())
    # return any value to the caller
    return inspector.get_table_names()


async def async_main():
    async with engine.connect() as conn:
        tables = await conn.run_sync(use_inspector)


asyncio.run(async_main())
```

----------------------------------------

TITLE: Performing ORM Bulk Update with Update and Session.execute - Python
DESCRIPTION: Shows how to perform a bulk update on ORM entities using the SQLAlchemy 2.0 style. It uses the `sql.update` construct with `Session.execute`, filtering entities and setting new values. Demonstrates using `execution_options` for ORM-specific parameters like `synchronize_session`. Requires a `Session` initialized with `future=True`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_1

LANGUAGE: python
CODE:
```
with Session(engine, future=True) as sess:
    stmt = (
        update(User)
        .where(User.name == "sandy")
        .values(password="foobar")
        .execution_options(synchronize_session="fetch")
    )

    sess.execute(stmt)
```

----------------------------------------

TITLE: Selecting ORM Objects with Filtering (IN) - Python/SQL
DESCRIPTION: Demonstrates how to construct and execute a simple SELECT query using SQLAlchemy's ORM to fetch objects (User) based on a filtering condition using the SQL IN operator. It utilizes the `select` function and the `Session.scalars` method to iterate over results.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#_snippet_4

LANGUAGE: python
CODE:
```
from sqlalchemy import select

session = Session(engine)

stmt = select(User).where(User.name.in_(["spongebob", "sandy"]))

for user in session.scalars(stmt):
    print(user)
```

LANGUAGE: sql
CODE:
```
{execsql}BEGIN (implicit)
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name IN (?, ?)
[...] ('spongebob', 'sandy'){stop}
User(id=1, name='spongebob', fullname='Spongebob Squarepants')
User(id=2, name='sandy', fullname='Sandy Cheeks')
```

----------------------------------------

TITLE: Using SQLAlchemy Session as Context Manager in Python
DESCRIPTION: Demonstrates how to use a SQLAlchemy ORM Session object as a context manager. This pattern ensures that the Session's close() method is automatically called upon exiting the 'with' block, releasing resources and resetting the session state.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_20

LANGUAGE: python
CODE:
```
with Session(engine) as session:
    result = session.execute(select(User))

# closes session automatically
```

----------------------------------------

TITLE: Applying Python cProfile Context Manager to SQLAlchemy Query - Python
DESCRIPTION: This Python code demonstrates how to wrap a SQLAlchemy ORM query execution within the `profiled()` context manager defined previously. When executed, the code inside the `with` block, including the SQLAlchemy query execution and result fetching, will be profiled, and the statistics will be printed upon exiting the block. It requires a `session` object and relevant SQLAlchemy imports (`select`, `FooClass`).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/performance.rst#_snippet_3

LANGUAGE: Python
CODE:
```
with profiled():
    session.scalars(select(FooClass).where(FooClass.somevalue == 8)).all()
```

----------------------------------------

TITLE: Build and Print Core SELECT Statement
DESCRIPTION: Demonstrates how to construct a basic SELECT statement using `sqlalchemy.select()` with a Core `Table` object (`user_table`) and add a `WHERE` clause. Shows how printing the statement generates the SQL string.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
stmt = select(user_table).where(user_table.c.name == "spongebob")
print(stmt)
```

----------------------------------------

TITLE: Performing Bulk Insert with Fixed SQL Expression (SQLAlchemy ORM, Python)
DESCRIPTION: Demonstrates using `session.scalars` with an `insert` statement and `values` to perform a bulk insert. A fixed SQL expression (`func.now()`) is applied to the `timestamp` column for all inserted rows, while row-specific values for `message` are provided in a list passed as the second argument to `session.scalars`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_9

LANGUAGE: python
CODE:
```
from sqlalchemy import func
>>> log_record_result = session.scalars(
...     insert(LogRecord).values(code="SQLA", timestamp=func.now()).returning(LogRecord),
...     [
...         {"message": "log message #1"},
...         {"message": "log message #2"},
...         {"message": "log message #3"},
...         {"message": "log message #4"},
...     ],
... )
```

----------------------------------------

TITLE: Creating Basic SQLAlchemy Core Update Statement
DESCRIPTION: Shows how to use the `update()` function to build an `UPDATE` statement. It includes specifying the target table (`user_table`), filtering rows with `.where()`, and setting column values using `.values()`. The printed output shows the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
stmt = (
    update(user_table)
    .where(user_table.c.name == "patrick")
    .values(fullname="Patrick the Star")
)
print(stmt)
```

LANGUAGE: SQL
CODE:
```
UPDATE user_account SET fullname=:fullname WHERE user_account.name = :name_1
```

----------------------------------------

TITLE: URL-encoding Password Characters - Python
DESCRIPTION: Shows how to use the urllib.parse.quote_plus function to URL-encode special characters in a string, specifically demonstrating encoding an "@" and "/" character for safe inclusion in a database URL password.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_1

LANGUAGE: Python
CODE:
```
>>> import urllib.parse
>>> urllib.parse.quote_plus("kx@jj5/g")
'kx%40jj5%2Fg'
```

----------------------------------------

TITLE: Relationship Behavior on Pending Object Before and After Flush Python
DESCRIPTION: Illustrates the behavior of relationship attributes on a 'pending' ORM object (one added to the session but not yet inserted into the database). Accessing a relationship before flush typically yields `None`; after `Session.flush` (which performs the INSERT), the relationship can be lazy loaded.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_12

LANGUAGE: python
CODE:
```
new_obj = SomeClass()
new_obj.foo_id = 7

Session.add(new_obj)

# returns None but this is not a "lazyload", as the object is not
# persistent in the DB yet, and the None value is not part of the
# object's state
assert new_obj.foo is None

Session.flush()  # emits INSERT

assert new_obj.foo is foo_7  # now it loads
```

----------------------------------------

TITLE: Counting Objects with Core Select via Session.scalar
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 approach to counting objects using the Core select() construct with func.count() and executing it via Session.scalar(). Two variations are shown.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_56

LANGUAGE: Python
CODE:
```
session.scalar(
  select(func.count()).
  select_from(User)
)

# or

session.scalar(
  select(func.count(User.id))
)
```

----------------------------------------

TITLE: Execute ORM Select with Joined Load in SQLAlchemy
DESCRIPTION: Demonstrates executing a select statement against an ORM entity (User) using the session.execute method, applying a joined load option for the 'addresses' relationship and ordering the results. This is the modern SQLAlchemy 2.0 approach.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_67

LANGUAGE: python
CODE:
```
session.execute(select(User).options(joinedload(User.addresses)).order_by(User.id))
.unique()
.all()
```

----------------------------------------

TITLE: Explicit Transaction with Engine.begin() - SQLAlchemy Core
DESCRIPTION: Shows the recommended 2.0 style for managing transactions using the `Engine.begin()` context manager. This ensures that all operations within the `with` block are part of a single transaction, which is automatically committed upon successful exit or rolled back on error.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_10

LANGUAGE: python
CODE:
```
with engine.begin() as conn:
    conn.execute(some_table.insert().values(foo="bar"))
    conn.execute(some_other_table.insert().values(bat="hoho"))
```

----------------------------------------

TITLE: Mapping enum.Enum Type in SQLAlchemy Declarative
DESCRIPTION: Demonstrates how to map a standard Python `enum.Enum` type to SQLAlchemy's `Enum` type using the `type_annotation_map` within a Declarative base class. This allows SQLAlchemy to automatically handle the database representation for columns annotated with this `Status` enum type.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_33

LANGUAGE: python
CODE:
```
import enum
import sqlalchemy


class Base(DeclarativeBase):
    type_annotation_map = {Status: sqlalchemy.Enum(enum.Enum)}
```

----------------------------------------

TITLE: Defining SQLAlchemy ScalarSelect Statement (Python)
DESCRIPTION: Breaks down the construction of the `ScalarSelect` statement used with `column_property` to count related addresses. Explains the use of `select`, `func.count`, `where`, `correlate_except`, and `scalar_subquery` methods.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#_snippet_6

LANGUAGE: Python
CODE:
```
stmt = (
    select(func.count(Address.id))
    .where(Address.user_id == id)
    .correlate_except(Address)
    .scalar_subquery()
)
```

----------------------------------------

TITLE: Defining an Abstract Base Class (__abstract__) (SQLAlchemy Python)
DESCRIPTION: Shows a class with `__abstract__ = True`, preventing SQLAlchemy from creating a table or mapper for it directly. This abstract base can still provide methods and use `declared_attr` for `__mapper_args__` to be inherited by concrete subclasses like `MyMappedClass`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#_snippet_9

LANGUAGE: Python
CODE:
```
class SomeAbstractBase(Base):
    __abstract__ = True

    def some_helpful_method(self):
        """ """

    @declared_attr
    def __mapper_args__(cls):
        return {"helpful mapper arguments": True}


class MyMappedClass(SomeAbstractBase):
    pass
```

----------------------------------------

TITLE: Defining Declarative Mapped Class - Python SQLAlchemy
DESCRIPTION: This snippet demonstrates how to define a SQLAlchemy ORM mapped class using the declarative base. It shows that when a `Column` is defined directly as a class attribute, the column's name can be omitted, and SQLAlchemy will infer it from the attribute name.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#_snippet_4

LANGUAGE: python
CODE:
```
class Foo(Base):
    __tablename__ = 'foos'
    id = Column(Integer, primary_key=True)
```

----------------------------------------

TITLE: Defining SQLAlchemy Update with Returning Clause - Python
DESCRIPTION: This snippet demonstrates how to build an SQLAlchemy `Update` construct using the fluent API. It filters rows by name, sets a new column value, and includes a `returning` clause to select specific columns (`id` and `name`) from the modified rows.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#_snippet_10

LANGUAGE: Python
CODE:
```
update_stmt = (
    update(user_table)
    .where(user_table.c.name == "patrick")
    .values(fullname="Patrick the Star")
    .returning(user_table.c.id, user_table.c.name)
)
```

----------------------------------------

TITLE: Closing SQLAlchemy ORM Session
DESCRIPTION: Demonstrates how to close an ORM Session using the `session.close()` method. This action rolls back any in-progress transaction, expunges all objects from the session, and releases database connections back to the engine's connection pool.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_3

LANGUAGE: Python
CODE:
```
session.close()
```

----------------------------------------

TITLE: Defining SQLAlchemy Many-to-Many Relationship with String Secondary (Python)
DESCRIPTION: Demonstrates specifying the `secondary` table for a many-to-many SQLAlchemy relationship using a string literal ("association_table"). The string is evaluated as a Python expression, resolving against table names within the associated MetaData collection. Note: This requires the table name to be a valid Python identifier.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_32

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "left_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship(secondary="association_table")
```

----------------------------------------

TITLE: Defining a Relationship with Raise Lazy Loading in SQLAlchemy ORM
DESCRIPTION: Demonstrates configuring a relationship with `lazy="raise"`. Accessing this relationship attribute on an instance will raise an `InvalidRequestError` if the collection has not been previously loaded, helping to identify unexpected lazy loads.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#_snippet_27

LANGUAGE: python
CODE:
```
class MyClass(Base):
    __tablename__ = "some_table"

    # ...

    children: Mapped[List[MyRelatedClass]] = relationship(lazy="raise")
```

----------------------------------------

TITLE: Defining ORM Models with WriteOnlyMapped Relationship (Python)
DESCRIPTION: Demonstrates how to define SQLAlchemy ORM models using declarative mapping with Python type annotations. It shows the use of `WriteOnlyMapped` for a relationship (`account_transactions`) which supersedes the legacy `lazy="dynamic"` strategy. Includes definitions for `Account` and `AccountTransaction` classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_28

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import WriteOnlyMapped


class Base(DeclarativeBase):
    pass


class Account(Base):
    __tablename__ = "account"
    id: Mapped[int] = mapped_column(primary_key=True)
    identifier: Mapped[str]
    account_transactions: WriteOnlyMapped["AccountTransaction"] = relationship(
        cascade="all, delete-orphan",
        passive_deletes=True,
        order_by="AccountTransaction.timestamp",
    )


class AccountTransaction(Base):
    __tablename__ = "account_transaction"
    id: Mapped[int] = mapped_column(primary_key=True)
    account_id: Mapped[int] = mapped_column(
        ForeignKey("account.id", ondelete="cascade")
    )
    description: Mapped[str]
    amount: Mapped[Decimal]
    timestamp: Mapped[datetime] = mapped_column(default=func.now())
```

----------------------------------------

TITLE: Assigning SQL Expression to Attribute (ORM)
DESCRIPTION: Demonstrates how to assign a SQL expression directly to an ORM mapped attribute. Upon flushing, SQLAlchemy will embed this expression in the generated UPDATE or INSERT statement instead of a literal value. Useful for atomic updates or incorporating database functions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#_snippet_0

LANGUAGE: Python
CODE:
```
class SomeClass(Base):
    __tablename__ = "some_table"

    # ...

    value = mapped_column(Integer)


someobject = session.get(SomeClass, 5)

# set 'value' attribute to a SQL expression adding one
someobject.value = SomeClass.value + 1

# issues "UPDATE some_table SET value=value+1"
session.commit()
```

----------------------------------------

TITLE: Sending Single Bound Parameter to SELECT (Python)
DESCRIPTION: This snippet demonstrates executing a parameterized `SELECT` query using `Connection.execute`. It shows how to define a named parameter (`:y`) in the `text` construct and pass its value as a dictionary in the second argument to `execute`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#_snippet_2

LANGUAGE: python
CODE:
```
with engine.connect() as conn:
    result = conn.execute(text("SELECT x, y FROM some_table WHERE y > :y"), {"y": 2})
    for row in result:
        print(f"x: {row.x}  y: {row.y}")
```

----------------------------------------

TITLE: Define SQLAlchemy Self-Referential One-to-Many Relationship (Python)
DESCRIPTION: Defines an `Element` class with a self-referential one-to-many relationship (`descendants`) using `primaryjoin` and `remote`/`foreign` functions to model a hierarchical structure based on path strings. The relationship is configured as `viewonly` and ordered by path.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#_snippet_18

LANGUAGE: Python
CODE:
```
class Element(Base):
    __tablename__ = "element"

    path = mapped_column(String, primary_key=True)

    descendants = relationship(
        "Element",
        primaryjoin=remote(foreign(path)).like(path.concat("/%")),
        viewonly=True,
        order_by=path,
    )
```

----------------------------------------

TITLE: Initializing SQLAlchemy scoped_session Python
DESCRIPTION: This snippet shows the basic setup for using `scoped_session`. It imports the necessary classes, creates a `sessionmaker` configured with an engine (`some_engine` assumed), and then passes this factory to `scoped_session` to create a registry object named `Session`. This registry will manage `Session` instances.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import scoped_session
from sqlalchemy.orm import sessionmaker

session_factory = sessionmaker(bind=some_engine)
Session = scoped_session(session_factory)
```

----------------------------------------

TITLE: Using Joined Eager Loading as Query Option in SQLAlchemy ORM
DESCRIPTION: Demonstrates applying joined eager loading for the `User.addresses` relationship using the `joinedload` option on a SQLAlchemy `select` statement. Includes the Python code to execute the query and the resulting SQL statement generated by SQLAlchemy.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_18

LANGUAGE: python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import joinedload
>>> stmt = select(User).options(joinedload(User.addresses)).filter_by(name="spongebob")
>>> spongebob = session.scalars(stmt).unique().all()
```

LANGUAGE: sql
CODE:
```
SELECT
    addresses_1.id AS addresses_1_id,
    addresses_1.email_address AS addresses_1_email_address,
    addresses_1.user_id AS addresses_1_user_id,
    users.id AS users_id, users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
LEFT OUTER JOIN addresses AS addresses_1
    ON users.id = addresses_1.user_id
WHERE users.name = ?
['spongebob']
```

----------------------------------------

TITLE: Modern Session Get Method in SQLAlchemy 2.0
DESCRIPTION: Shows the recommended way to retrieve an object by primary key in SQLAlchemy 1.4 / 2.0 using the get() method directly on the Session object. This method is preferred over the legacy Query.get().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_70

LANGUAGE: python
CODE:
```
# 1.4 / 2.0 cross-compatible use
user_obj = session.get(User, 5)
```

----------------------------------------

TITLE: ORM Bulk Insert via Session Execute
DESCRIPTION: Demonstrates performing a bulk insert operation using session.execute with an insert statement. A list of dictionaries is passed to the insert().values() method, where keys correspond to ORM mapped attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_15

LANGUAGE: Python
CODE:
```
session.rollback()
session.execute(
    insert(User).values(
        [
            dict(name="sandy"),
            dict(name="spongebob", fullname="Spongebob Squarepants")
        ]
    )
)
```

----------------------------------------

TITLE: Creating an ORM Session (Python)
DESCRIPTION: Initializes a SQLAlchemy ORM 'Session' object, typically bound to an 'Engine'. This session will manage the lifecycle of ORM objects and interact with the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_2

LANGUAGE: Python
CODE:
```
session = Session(engine)
```

----------------------------------------

TITLE: Adding New Objects to SQLAlchemy Session in Python
DESCRIPTION: Shows how to create new mapped objects and add them individually to the SQLAlchemy Session using `session.add()`. The changes are persisted to the database upon calling `session.commit()`. Requires a `session` object and mapped object instances.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_8

LANGUAGE: Python
CODE:
```
user1 = User(name="user1")
user2 = User(name="user2")
session.add(user1)
session.add(user2)

session.commit()  # write changes to the database
```

----------------------------------------

TITLE: Adding Calculated Property to SQLAlchemy Mapped Class
DESCRIPTION: Defines a SQLAlchemy Declarative mapped class `Point` and adds an attribute `x_plus_y` implemented as a Python `@property`. This property dynamically calculates its value (`self.x + self.y`) whenever it's accessed, providing a simple way to expose derived or computed state on a mapped object without needing to store it in the database or initialize it upon loading.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#_snippet_7

LANGUAGE: Python
CODE:
```
class Point(Base):
    __tablename__ = "point"
    id: Mapped[int] = mapped_column(primary_key=True)
    x: Mapped[int]
    y: Mapped[int]

    @property
    def x_plus_y(self):
        return self.x + self.y
```

----------------------------------------

TITLE: Committing Transactions with SQLAlchemy ORM Session
DESCRIPTION: Illustrates creating an ORM Session from a sessionmaker using a context manager, adding ORM objects, and explicitly committing the transaction using session.commit(). Requires a sessionmaker configured with an engine and mapped ORM classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_11

LANGUAGE: Python
CODE:
```
Session = sessionmaker(engine)

with Session() as session:
    session.add_all(
        [
            SomeClass(data="some data one"),
            SomeClass(data="some data two"),
            SomeClass(data="some data three"),
        ]
    )
    session.commit()
```

----------------------------------------

TITLE: Managing Session Lifecycle with scoped_session (Thread-Local) - Python
DESCRIPTION: Illustrates the typical sequence of operations when using SQLAlchemy's `scoped_session` with a thread-local scope in a web request context. Shows how to acquire a session, perform operations (execute, add), commit changes, and remove the session at the end of the request lifecycle. Requires the `scoped_session` registry to be initialized.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_7

LANGUAGE: python
CODE:
```
# web request starts -> acquire the thread-local Session
Session()

# use the Session
Session.execute(select(MyClass))
Session.add(some_object)

# if data was modified, commit the transaction
Session.commit()

# web request ends  -> remove the Session
Session.remove()
```

----------------------------------------

TITLE: Committing SQLAlchemy Session - Python
DESCRIPTION: Committing the session persists pending changes to the database and, by default, expires all object state in the session. Expiring state ensures that subsequent attribute access will load the latest values, including those affected by foreign key changes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_9

LANGUAGE: python
CODE:
```
session.commit()  # expires all attributes
```

----------------------------------------

TITLE: Defining Select Statement with Row Typing in SQLAlchemy
DESCRIPTION: This Python snippet demonstrates how to define a simple SELECT statement using SQLAlchemy's SQL Expression Language. In SQLAlchemy 2.0, this statement would be typed as `Select[Tuple[int, str]]`, while in 2.1 it is typed more directly as `Select[int, str]` leveraging PEP 646 for improved type checking of row contents.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_21.rst#_snippet_0

LANGUAGE: python
CODE:
```
stmt = select(column("x", Integer), column("y", String))
```

----------------------------------------

TITLE: SQLAlchemy ORM: Select with Join and Where
DESCRIPTION: Demonstrates a standard SQLAlchemy ORM select statement using `select_from`, `join`, and `where` clauses. Shows how `select_from` can be overridden by subsequent join operations, resulting in the join being the primary FROM source.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_38

LANGUAGE: Python
CODE:
```
>>> stmt = select(Address).select_from(User).join(Address.user).where(User.name == "sandy")
>>> print(stmt)
```

LANGUAGE: SQL
CODE:
```
SELECT address.id, address.user_id, address.email_address
FROM address JOIN user_account ON user_account.id = address.user_id
WHERE user_account.name = :name_1
```

----------------------------------------

TITLE: Check SQLAlchemy Version Python
DESCRIPTION: This Python snippet demonstrates how to import the SQLAlchemy library and access its `__version__` attribute to verify the installed version. It's presented within a `doctest`-style interactive session context, suggesting it's intended to be run directly in a Python interpreter or via a testing tool like doctest.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/index.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> import sqlalchemy
>>> sqlalchemy.__version__  # doctest: +SKIP
2.1.0
```

----------------------------------------

TITLE: Initializing ORM Object (Python)
DESCRIPTION: Demonstrates instantiating an ORM-mapped object (`User`) using the default `__init__` method generated by SQLAlchemy's Declarative base. Attribute values are passed as keyword arguments. This requires an existing Declarative class definition like `User`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_12

LANGUAGE: python
CODE:
```
sandy = User(name="sandy", fullname="Sandy Cheeks")
```

----------------------------------------

TITLE: SQLAlchemy: 2.0 Recommended 'Begin Once' Transaction
DESCRIPTION: Shows the recommended SQLAlchemy 2.0 pattern for executing statements within a single transaction block per connection checkout using `engine.begin()`, suitable for operations that should either fully succeed or fail.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_22

LANGUAGE: Python
CODE:
```
# one choice - work with explicit connection, explicit transaction
# (there remain a few variants on how to demarcate the transaction)

# "begin once" - one transaction only per checkout
with engine.begin() as conn:
    result = conn.execute(stmt)
```

----------------------------------------

TITLE: Defining ORM Mapped Columns with Nullability Inference (Python)
DESCRIPTION: Illustrates how SQLAlchemy determines column nullability (NOT NULL or NULL) based on the `primary_key` parameter, the `nullable` parameter, and the presence or absence of `typing.Optional` in the `Mapped` type annotation.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class SomeClass(Base):
    __tablename__ = "some_table"

    # primary_key=True, therefore will be NOT NULL
    id: Mapped[int] = mapped_column(primary_key=True)

    # not Optional[], therefore will be NOT NULL
    data: Mapped[str]

    # Optional[], therefore will be NULL
    additional_info: Mapped[Optional[str]]
```

----------------------------------------

TITLE: Apply Lazy Loading Option to Query - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates how to apply the `lazyload` option to a SQLAlchemy select statement. This option ensures that the `Parent.children` relationship is loaded lazily (on first access) for objects returned by this specific query, overriding any default mapping-time configuration.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import lazyload

# set children to load lazily
stmt = select(Parent).options(lazyload(Parent.children))
```

----------------------------------------

TITLE: Using Reusable Annotated Types in Declarative Models
DESCRIPTION: This snippet demonstrates how to use the previously defined `Annotated` types (`intpk`, `required_name`, `timestamp`) directly within `Mapped` type hints in a SQLAlchemy Declarative model. Declarative automatically extracts the `mapped_column` configuration from the `Annotated` object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_22

LANGUAGE: Python
CODE:
```
class Base(DeclarativeBase):
    pass


class SomeClass(Base):
    __tablename__ = "some_table"

    id: Mapped[intpk]
    name: Mapped[required_name]
    created_at: Mapped[timestamp]
```

----------------------------------------

TITLE: Filter and Fetch One Object (SQLAlchemy 2.0)
DESCRIPTION: Shows the 2.0 approach for filtering results using `select` with `filter_by` and fetching exactly one scalar result using `.scalar_one()` on the result object. Raises an error if zero or more than one result is found. Requires a configured SQLAlchemy session, mapped User class, and the `select` function.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_42

LANGUAGE: Python
CODE:
```
session.execute(
  select(User).
  filter_by(name="some user")
).scalar_one()
```

----------------------------------------

TITLE: Selecting Count using func.count in SQLAlchemy Python
DESCRIPTION: This Python snippet demonstrates how to use SQLAlchemy's `func` object to invoke the SQL `COUNT` aggregate function. It constructs a select statement that counts all rows (`*`) from a specified table, illustrating the basic syntax for integrating standard SQL functions into a SQLAlchemy query expression.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/functions.rst#_snippet_0

LANGUAGE: Python
CODE:
```
select(func.count("*")).select_from(some_table)
```

----------------------------------------

TITLE: Performing ORM Bulk INSERT using Session.execute (Python)
DESCRIPTION: Demonstrates how to use the Session.execute method with an ORM-mapped class and a list of dictionaries passed to the params parameter to perform a bulk INSERT operation, optimizing for inserting multiple rows efficiently.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import insert
>>> session.execute(
...     insert(User),
...     [
...         {"name": "spongebob", "fullname": "Spongebob Squarepants"},
...         {"name": "sandy", "fullname": "Sandy Cheeks"},
...         {"name": "patrick", "fullname": "Patrick Star"},
...         {"name": "squidward", "fullname": "Squidward Tentacles"},

```

----------------------------------------

TITLE: Cascading Objects into Session - SQLAlchemy Python
DESCRIPTION: Demonstrates adding a 'root' object (`u1`) to the session and verifies that its related objects (`a1`, `a2`) are automatically cascaded and also become part of the session's state (pending).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_7

LANGUAGE: Python
CODE:
```
>>> session.add(u1)
>>> u1 in session
True
>>> a1 in session
True
>>> a2 in session
True
```

----------------------------------------

TITLE: Closing SQLAlchemy Session and Connection (Python)
DESCRIPTION: This snippet demonstrates the standard procedure for closing a SQLAlchemy session and the underlying database connection, typically performed as part of resource management or application shutdown.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#_snippet_48

LANGUAGE: Python
CODE:
```
session.close()
conn.close()
```

----------------------------------------

TITLE: Cleaning Up SQLAlchemy Session and Connection Python
DESCRIPTION: This snippet shows typical cleanup operations in SQLAlchemy. It closes a database session using `session.close()` and then closes the underlying connection using `conn.close()`. The `ROLLBACK` output indicates that the connection was likely in a transaction that was rolled back upon closure. This snippet is often used in setup or teardown routines for examples or tests.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#_snippet_14

LANGUAGE: Python
CODE:
```
>>> session.close()
>>> conn.close()
ROLLBACK
```

----------------------------------------

TITLE: Closing a SQLAlchemy ORM Session (Python+SQL)
DESCRIPTION: Demonstrates explicitly closing a SQLAlchemy ORM session using the close() method. This action releases connection resources and rolls back any pending transactions, as indicated by the SQL ROLLBACK command.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_27

LANGUAGE: pycon+sql
CODE:
```
>>> session.close()
{execsql}ROLLBACK
```

----------------------------------------

TITLE: Deleting Object from SQLAlchemy Session (Python)
DESCRIPTION: Marks an object for deletion within the SQLAlchemy ORM session. The actual DELETE SQL statement is not executed immediately but is pending until the session is flushed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_18

LANGUAGE: Python
CODE:
```
>>> session.delete(patrick)
```

----------------------------------------

TITLE: Demonstrate Typing with SQLAlchemy Select and Session
DESCRIPTION: Illustrates how the typing information provided by Mapped attributes, including those defined using `Annotated`, is propagated to `select` statements, `Session` execution results (`Row`), and ORM query results (`Sequence`). It shows examples of selecting specific columns and fetching full objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_19

LANGUAGE: python
CODE:
```
# (variable) stmt: Select[Tuple[int, str]]
stmt = select(User.id, User.name)

with Session(e) as sess:
    for row in sess.execute(stmt):
        # (variable) row: Row[Tuple[int, str]]
        print(row)

    # (variable) users: Sequence[User]
    users = sess.scalars(select(User)).all()

    # (variable) users_legacy: List[User]
    users_legacy = sess.query(User).all()
```

----------------------------------------

TITLE: Targeting aliases in Query results with aliased Python
DESCRIPTION: Shows how to use the `sqlalchemy.orm.aliased` construct as the standard method for creating aliases of mapped classes or tables that can be targeted within a `Query`'s results or join conditions. This replaces the deprecated `id` keyword argument previously used in methods like `join` and `add_column` for alias targeting.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#_snippet_18

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import aliased

address_alias = aliased(Address)
print(session.query(User, address_alias).join((address_alias, User.addresses)).all())
```

----------------------------------------

TITLE: Handling Timezone-Aware Datetimes with TypeDecorator (Python)
DESCRIPTION: This SQLAlchemy `TypeDecorator` handles timezone-aware Python `datetime` objects. It converts incoming timezone-aware values to timezone-naive UTC before storing them in the database and converts stored naive values back to timezone-aware UTC upon retrieval. Requires the input `datetime` object to have timezone information.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#_snippet_3

LANGUAGE: python
CODE:
```
import datetime


class TZDateTime(TypeDecorator):
    impl = DateTime
    cache_ok = True

    def process_bind_param(self, value, dialect):
        if value is not None:
            if not value.tzinfo or value.tzinfo.utcoffset(value) is None:
                raise TypeError("tzinfo is required")
            value = value.astimezone(datetime.timezone.utc).replace(tzinfo=None)
        return value

    def process_result_value(self, value, dialect):
        if value is not None:
            value = value.replace(tzinfo=datetime.timezone.utc)
        return value
```

----------------------------------------

TITLE: Reflecting Table from Database (Python)
DESCRIPTION: Illustrates how to populate a SQLAlchemy `Table` object's schema information by reading the definition from an existing database table. This is done by passing the target engine to the `autoload_with` parameter during `Table` instantiation. Requires the table name, a MetaData object, and a connected engine.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_14

LANGUAGE: python
CODE:
```
some_table = Table("some_table", metadata_obj, autoload_with=engine)
```

----------------------------------------

TITLE: Comparing Greater Than or Equal SQLAlchemy Python
DESCRIPTION: Demonstrates using the Python `>=` operator on a SQLAlchemy `column` object to generate a SQL greater-than-or-equal-to expression. The output shows the generated SQL with a bound parameter.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_4

LANGUAGE: Python
CODE:
```
print(column("x") >= 5)
```

----------------------------------------

TITLE: Comparing Less Than or Equal SQLAlchemy Python
DESCRIPTION: Demonstrates using the Python `<=` operator on a SQLAlchemy `column` object to generate a SQL less-than-or-equal-to expression. The output shows the generated SQL with a bound parameter.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_5

LANGUAGE: Python
CODE:
```
print(column("x") <= 5)
```

----------------------------------------

TITLE: Adding Single WHERE Clause to SQLAlchemy Select (Python)
DESCRIPTION: Shows how to add a single boolean expression as a `WHERE` clause to a SQLAlchemy `Select` statement using the `where()` method. Prints the resulting SQL statement. Requires `user_table`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_23

LANGUAGE: Python
CODE:
```
print(select(user_table).where(user_table.c.name == "squidward"))
```

----------------------------------------

TITLE: Comparing Greater Than SQLAlchemy Python
DESCRIPTION: Demonstrates using the Python `>` operator on a SQLAlchemy `column` object to generate a SQL greater-than expression. The output shows the generated SQL with a bound parameter.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_2

LANGUAGE: Python
CODE:
```
print(column("x") > 5)
```

----------------------------------------

TITLE: Accessing Result Columns by Key Name (Python)
DESCRIPTION: This snippet shows how to transform a `Result` object into a `MappingResult` using `.mappings()`. It then iterates through the `MappingResult`, accessing columns in each row using dictionary-style key access (`dict_row["x"]`, `dict_row["y"]`).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#_snippet_1

LANGUAGE: python
CODE:
```
result = conn.execute(text("select x, y from some_table"))

for dict_row in result.mappings():
    x = dict_row["x"]
    y = dict_row["y"]
```

----------------------------------------

TITLE: Setting ORM Relationship by Object - SQLAlchemy Python
DESCRIPTION: The recommended way to establish an ORM relationship is by assigning the target object directly to the relationship attribute. This snippet shows retrieving a `Foo` object by ID and then assigning it to the `o.foo` attribute, followed by committing the session to persist the change.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_6

LANGUAGE: python
CODE:
```
foo = session.get(Foo, 7)
o.foo = foo
Session.commit()
```

----------------------------------------

TITLE: Defining Table with Inline and External Indexes (Python/SQL)
DESCRIPTION: This snippet demonstrates defining a database table using SQLAlchemy's `Table` object. It includes `Column` definitions with the `index=True` and `unique=True` arguments for inline index creation. It also demonstrates defining composite and unique composite indexes externally using the `Index` object, referencing columns via `mytable.c`. The accompanying SQL shows the generated DDL for creating the table and all defined indexes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_31

LANGUAGE: python
CODE:
```
metadata_obj = MetaData()
mytable = Table(
    "mytable",
    metadata_obj,
    # an indexed column, with index "ix_mytable_col1"
    Column("col1", Integer, index=True),
    # a uniquely indexed column with index "ix_mytable_col2"
    Column("col2", Integer, index=True, unique=True),
    Column("col3", Integer),
    Column("col4", Integer),
    Column("col5", Integer),
    Column("col6", Integer),
)

# place an index on col3, col4
Index("idx_col34", mytable.c.col3, mytable.c.col4)

# place a unique index on col5, col6
Index("myindex", mytable.c.col5, mytable.c.col6, unique=True)

mytable.create(engine)
```

LANGUAGE: sql
CODE:
```
CREATE TABLE mytable (
    col1 INTEGER,
    col2 INTEGER,
    col3 INTEGER,
    col4 INTEGER,
    col5 INTEGER,
    col6 INTEGER
)
CREATE INDEX ix_mytable_col1 ON mytable (col1)
CREATE UNIQUE INDEX ix_mytable_col2 ON mytable (col2)
CREATE UNIQUE INDEX myindex ON mytable (col5, col6)
CREATE INDEX idx_col34 ON mytable (col3, col4)
```

----------------------------------------

TITLE: Many-to-Many Association Table with Primary Key - Python
DESCRIPTION: This snippet demonstrates a recommended practice for Many-to-Many association tables: defining the foreign key columns as a composite primary key. This prevents duplicate rows in the association table, ensuring each unique pair of parent and child is stored only once.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_14

LANGUAGE: python
CODE:
```
association_table = Table(
            "association_table",
            Base.metadata,
            Column("left_id", ForeignKey("left_table.id"), primary_key=True),
            Column("right_id", ForeignKey("right_table.id"), primary_key=True),
        )
```

----------------------------------------

TITLE: Joined Eager Loading with Collections (2.0 Migration Fix)
DESCRIPTION: Provides the 2.0 migration fix for joined eager loading of collections. The .unique() method must be explicitly called on the result object to ensure that duplicate rows from the join are collapsed into unique ORM objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_96

LANGUAGE: Python
CODE:
```
# 1.4 / 2.0 code

stmt = select(User).options(joinedload(User.addresses))

# statement will raise if unique() is not used, due to joinedload()
# of a collection.  in all other cases, unique() is not needed.
# By stating unique() explicitly, confusion over discrepancies between
# number of objects/ rows returned vs. "SELECT COUNT(*)" is resolved
rows = session.execute(stmt).unique().all()
```

----------------------------------------

TITLE: Comparing Equality SQLAlchemy Python
DESCRIPTION: Demonstrates using the Python `==` operator on a SQLAlchemy `column` object to generate a SQL equality expression. The output shows the generated SQL with a bound parameter.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_0

LANGUAGE: Python
CODE:
```
print(column("x") == 5)
```

----------------------------------------

TITLE: Using index_property for JSON Attributes (Python)
DESCRIPTION: Defines a SQLAlchemy ORM class `Person` with an `id` and a `data` JSON column. It demonstrates using `index_property("data", "name")` to create a `name` attribute that reads/writes the "name" field within the `data` JSON column, simplifying access and ensuring change tracking.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_11.rst#_snippet_8

LANGUAGE: Python
CODE:
```
class Person(Base):
    __tablename__ = "person"

    id = Column(Integer, primary_key=True)
    data = Column(JSON)

    name = index_property("data", "name")
```

----------------------------------------

TITLE: Loading Object Attributes After Commit - SQLAlchemy ORM
DESCRIPTION: After committing, objects are expired. Accessing an attribute like `u1.id` triggers a SELECT query to refresh the object's state from the database, demonstrating SQLAlchemy's lazy loading behavior and showing the newly assigned primary key.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_10

LANGUAGE: Python
CODE:
```
>>> u1.id
```

LANGUAGE: SQL
CODE:
```
{execsql}BEGIN (implicit)
SELECT user_account.id AS user_account_id, user_account.name AS user_account_name,
user_account.fullname AS user_account_fullname
FROM user_account
WHERE user_account.id = ?
[...] (6,){stop}
```

----------------------------------------

TITLE: Executing IN Query SQLAlchemy Python
DESCRIPTION: Shows how the `.in_()` method translates to a SQL `IN` clause upon execution with bound parameters. It demonstrates querying `User.id` where the ID is in a list of values.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_8

LANGUAGE: Python
CODE:
```
stmt = select(User.id).where(User.id.in_([1, 2, 3]))
result = conn.execute(stmt)
```

----------------------------------------

TITLE: Creating Equality Condition with SQLAlchemy Column (Python)
DESCRIPTION: Demonstrates using the Python `==` operator with a SQLAlchemy `Column` object to create a SQL equality expression. Prints the resulting SQL fragment. Requires `user_table`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_19

LANGUAGE: Python
CODE:
```
print(user_table.c.name == "squidward")
```

----------------------------------------

TITLE: Mapping Many-to-Many Relationship Python
DESCRIPTION: Defines SQLAlchemy ORM classes for Employee and Project, showing how to map a many-to-many relationship using `relationship` with the `secondary` argument pointing to a `Table` definition for the association table, and includes a backref.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_23

LANGUAGE: python
CODE:
```
class Employee(Base):
    __tablename__ = "employee"

    id = Column(Integer, primary_key=True)
    name = Column(String(30))

    projects = relationship(
        "Project",
        secondary=Table(
            "employee_project",
            Base.metadata,
            Column("employee_id", Integer, ForeignKey("employee.id"), primary_key=True),
            Column("project_id", Integer, ForeignKey("project.id"), primary_key=True),
        ),
        backref="employees",
    )


class Project(Base):
    __tablename__ = "project"

    id = Column(Integer, primary_key=True)
    name = Column(String(30))
```

----------------------------------------

TITLE: Checking IS NULL Operator SQLAlchemy Python
DESCRIPTION: Demonstrates using the `.is_()` method with Python's `None`. This is the standard way to generate the SQL `IS NULL` expression for checking null values.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_16

LANGUAGE: Python
CODE:
```
print(column("x").is_(None))
```

----------------------------------------

TITLE: Iterating Results with Core Select via Session.execute().scalars()
DESCRIPTION: The SQLAlchemy 2.0 approach to iterating over results from a Core select() construct executed via Session.execute(), including joins and filters. The scalars() modifier is used to yield ORM objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_66

LANGUAGE: Python
CODE:
```
for user in session.execute(
    select(User).join(User.addresses).filter(Address.email == "some@email.case")
).scalars():
    ...
```

----------------------------------------

TITLE: Instantiating SQLAlchemy Mapped Class with Default Constructor
DESCRIPTION: Demonstrates how to create an instance of a SQLAlchemy mapped class (`User`) using the default keyword constructor provided by the ORM registry. This constructor automatically accepts keyword arguments corresponding to the mapped attributes (`name`, `fullname`). This method is typically used when constructing objects directly in Python code, not when loading data from the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#_snippet_4

LANGUAGE: Python
CODE:
```
u1 = User(name="some name", fullname="some fullname")
```

----------------------------------------

TITLE: Setting SQLAlchemy Sequence as Server Default (ORM) Python
DESCRIPTION: Shows how to configure a column in a SQLAlchemy ORM mapped class (Base) to use a Sequence as both the Python-side default (by including the sequence object) and the server-side default (using server_default with sequence.next_value()). This ensures the database generates the value even for non-SQLAlchemy inserts, within the ORM context. Requires a declarative base (Base) and Sequence object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#_snippet_12

LANGUAGE: python
CODE:
```
class CartItem(Base):
    __tablename__ = "cartitems"

    cart_id_seq = Sequence("cart_id_seq", metadata=Base.metadata, start=1)
    cart_id = Column(
        Integer, cart_id_seq, server_default=cart_id_seq.next_value(), primary_key=True
    )
    description = Column(String(40))
    createdate = Column(DateTime)
```

----------------------------------------

TITLE: Re-attaching and Accessing Attribute on SQLAlchemy ORM Object (Python+SQL)
DESCRIPTION: Demonstrates re-associating a 'detached' SQLAlchemy ORM object (squidward) with a session using session.add(). Subsequently accessing an attribute triggers a refresh from the database, as shown by the executed SQL query.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_29

LANGUAGE: pycon+sql
CODE:
```
>>> session.add(squidward)
>>> squidward.name
{execsql}BEGIN (implicit)
SELECT user_account.id AS user_account_id, user_account.name AS user_account_name, user_account.fullname AS user_account_fullname
FROM user_account
WHERE user_account.id = ?
[...] (4,){stop}
'squidward'
```

----------------------------------------

TITLE: Loading Object by Primary Key with Get - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates retrieving an object (`Foo`) directly from the session or database using its class and primary key with the `session.get()` method. This is often used to load objects based on foreign key values or known IDs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_10

LANGUAGE: python
CODE:
```
foo_7 = session.get(Foo, 7)
```

----------------------------------------

TITLE: Rolling back SQLAlchemy Transaction in Python
DESCRIPTION: Demonstrates the correct method to roll back a transaction (`transaction1`) in SQLAlchemy, particularly when dealing with nested or 'deactivated' transaction patterns. This ensures the changes within the transaction are discarded at the database level. This snippet shows the specific call needed on the transaction object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_53

LANGUAGE: python
CODE:
```
transaction1.rollback()
```

----------------------------------------

TITLE: Adding Multiple Objects to SQLAlchemy Session in Python
DESCRIPTION: Demonstrates how to add a list of multiple mapped objects to the SQLAlchemy Session efficiently using `session.add_all()`. Requires a `session` object and an iterable of mapped object instances.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_9

LANGUAGE: Python
CODE:
```
session.add_all([item1, item2, item3])
```

----------------------------------------

TITLE: Using Table Aliases (SQLAlchemy Python)
DESCRIPTION: Demonstrates creating and using table aliases with the `alias()` method in SQLAlchemy Core to reference the same table multiple times in a query, such as for a self-join.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_44

LANGUAGE: Python
CODE:
```
user_alias_1 = user_table.alias()
user_alias_2 = user_table.alias()
print(
    select(user_alias_1.c.name, user_alias_2.c.name).join_from(
        user_alias_1, user_alias_2, user_alias_1.c.id > user_alias_2.c.id
    )
)
```

----------------------------------------

TITLE: SQLAlchemy ORM: Filter with Relationship any()
DESCRIPTION: Demonstrates using the `relationship.any()` method in a `where` clause for a one-to-many relationship (`User.addresses`). This generates a SQL EXISTS subquery to find parent objects (Users) that have at least one related child (Address) matching the provided criteria.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_40

LANGUAGE: Python
CODE:
```
>>> stmt = select(User.fullname).where(
...     User.addresses.any(Address.email_address == "squirrel@squirrelpower.org")
... )
>>> session.execute(stmt).all()
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.fullname
FROM user_account
WHERE EXISTS (SELECT 1
FROM address
WHERE user_account.id = address.user_id AND address.email_address = ?)
```

----------------------------------------

TITLE: Using ORM Entity Aliases (SQLAlchemy Python)
DESCRIPTION: Shows how to create aliases for ORM entities (like `Address`) using the `aliased()` function in SQLAlchemy ORM, allowing the same entity to be referenced multiple times in a query while maintaining ORM functionality.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_45

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import aliased
address_alias_1 = aliased(Address)
address_alias_2 = aliased(Address)
```

----------------------------------------

TITLE: Updating Objects with Core Update via Session.execute
DESCRIPTION: Shows the recommended way to perform an UPDATE operation on mapped objects in SQLAlchemy 2.0 using the Core update() construct in conjunction with Session.execute(). This aligns ORM updates with Core statement execution.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_54

LANGUAGE: Python
CODE:
```
session.execute(
  update(User)
  .where(User.name == "foo")
  .values(fullname="Foo Bar")
  .execution_options(
    synchronize_session="evaluate"
  )
)
```

----------------------------------------

TITLE: Configuring SQLAlchemy Relationship with Multiple Foreign Keys (Python)
DESCRIPTION: This snippet shows how to define two distinct relationships from the `Parent` class to the `Child` class, both referencing the `Child.id` primary key. It demonstrates the use of the `foreign_keys` argument within `relationship` to specify which local column corresponds to the relationship, eliminating the need for the more complex `primaryjoin` argument in this common scenario.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#_snippet_0

LANGUAGE: python
CODE:
```
class Parent(Base):
    __tablename__ = "parent"
    id = Column(Integer, primary_key=True)
    child_id_one = Column(Integer, ForeignKey("child.id"))
    child_id_two = Column(Integer, ForeignKey("child.id"))

    child_one = relationship("Child", foreign_keys=child_id_one)
    child_two = relationship("Child", foreign_keys=child_id_two)


class Child(Base):
    __tablename__ = "child"
    id = Column(Integer, primary_key=True)
```

----------------------------------------

TITLE: Rolling Back SQLAlchemy Session (Python/SQL)
DESCRIPTION: Rolls back the current transaction associated with the session. This cancels any pending database changes and also expires all objects currently associated with the session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_21

LANGUAGE: Python/SQL
CODE:
```
>>> session.rollback()
ROLLBACK
```

----------------------------------------

TITLE: Correct Ordering with Select.join in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates the correct way to order a query by a column in a related table (Address.email_address) by explicitly joining the table using Select.join. This ensures the necessary table alias is available in the SQL FROM clause for the ORDER BY clause.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_23

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
>>> stmt = (
    select(User)
    .join(User.addresses)
    .filter(User.name == "spongebob")
    .order_by(Address.email_address)
)
>>> result = session.scalars(stmt).unique().all()
```

LANGUAGE: SQL
CODE:
```
SELECT
    users.id AS users_id,
    users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
JOIN addresses ON users.id = addresses.user_id
WHERE users.name = ?
ORDER BY addresses.email_address
```

----------------------------------------

TITLE: Using AsyncResult and AsyncConnection as Context Managers (Python)
DESCRIPTION: Demonstrates the async context manager support for `AsyncConnection` and `AsyncResult` in SQLAlchemy's asyncio extension. Using `async with` ensures proper asynchronous resource management and cursor closing.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_36

LANGUAGE: Python
CODE:
```
async with async_engine.connect() as conn:
    async with conn.execution_options(yield_per=100).execute(
        text("select * from table")
    ) as result:
        for row in result:
            print(f"{row}")
```

----------------------------------------

TITLE: Refreshing Specific Attributes (SQLAlchemy Python)
DESCRIPTION: Immediately reloads only a specific list of column-mapped attributes for a given ORM object from the database. If only relationship attributes are provided in the list, an error is raised. Requires an active Session, a persistent object, and a list of attribute names.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#_snippet_25

LANGUAGE: Python
CODE:
```
session.refresh(obj1, ["attr1", "attr2"])
```

----------------------------------------

TITLE: Implementing Hybrid Attribute with hybrid_property (SQLAlchemy)
DESCRIPTION: Shows how to use `@hybrid_property` from `sqlalchemy.ext.hybrid` to create an attribute (`email`) that functions as a regular Python property for instance access and also provides SQL expression capabilities when accessed at the class level. It maps to an internal column attribute (`_email`).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#_snippet_5

LANGUAGE: python
CODE:
```
from sqlalchemy.ext.hybrid import hybrid_property


class EmailAddress(Base):
    __tablename__ = "email_address"

    id = mapped_column(Integer, primary_key=True)

    _email = mapped_column("email", String)

    @hybrid_property
    def email(self):
        return self._email

    @email.setter
    def email(self, email):
        self._email = email
```

----------------------------------------

TITLE: Using MetaData with Naming Convention in SQLAlchemy
DESCRIPTION: Demonstrates creating a `Table` object using a `MetaData` instance that has a naming convention configured. Constraints defined within this table without explicit names will have names automatically generated according to the convention.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_13

LANGUAGE: Python
CODE:
```
>>> user_table = Table(
...     "user",
...     metadata_obj,
...
```

----------------------------------------

TITLE: Performing Bulk ORM Insert with RETURNING in Python
DESCRIPTION: This example demonstrates using SQLAlchemy ORM's Session.scalars() with an insert() construct and the returning(User) method to execute a bulk insert and retrieve the newly created User objects. It includes the Python code, the generated SQL with RETURNING, and the resulting list of ORM objects. This feature requires a database backend that supports SQL RETURNING and executemany with RETURNING.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_2

LANGUAGE: Python (Interactive Trace)
CODE:
```
>>> users = session.scalars(
...     insert(User).returning(User),
...     [
...         {"name": "spongebob", "fullname": "Spongebob Squarepants"},
...         {"name": "sandy", "fullname": "Sandy Cheeks"},
...         {"name": "patrick", "fullname": "Patrick Star"},
...         {"name": "squidward", "fullname": "Squidward Tentacles"},
...         {"name": "ehkrabs", "fullname": "Eugene H. Krabs"},
...     ],
... )
{execsql}INSERT INTO user_account (name, fullname)
VALUES (?, ?), (?, ?), (?, ?), (?, ?), (?, ?)
RETURNING id, name, fullname, species
[...] ('spongebob', 'Spongebob Squarepants', 'sandy', 'Sandy Cheeks',
'patrick', 'Patrick Star', 'squidward', 'Squidward Tentacles',
'ehkrabs', 'Eugene H. Krabs')
{stop}>>> print(users.all())
[User(name='spongebob', fullname='Spongebob Squarepants'),
 User(name='sandy', fullname='Sandy Cheeks'),
 User(name='patrick', fullname='Patrick Star'),
 User(name='squidward', fullname='Squidward Tentacles'),
 User(name='ehkrabs', fullname='Eugene H. Krabs')]
```

----------------------------------------

TITLE: Defining ForeignKey ON UPDATE/ON DELETE in SQLAlchemy
DESCRIPTION: Demonstrates how to specify ON UPDATE and ON DELETE clauses for Foreign Key constraints using the `onupdate` and `ondelete` keyword arguments in `ForeignKey` (for single columns) and `ForeignKeyConstraint` (for composite keys). These options control cascading behavior upon parent row modifications.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_8

LANGUAGE: Python
CODE:
```
child = Table(
    "child",
    metadata_obj,
    Column(
        "id",
        Integer,
        ForeignKey("parent.id", onupdate="CASCADE", ondelete="CASCADE"),
        primary_key=True,
    ),
)

composite = Table(
    "composite",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("rev_id", Integer),
    Column("note_id", Integer),
    ForeignKeyConstraint(
        ["rev_id", "note_id"],
        ["revisions.id", "revisions.note_id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    ),
)
```

----------------------------------------

TITLE: Manually Flushing SQLAlchemy Session (Python/SQL)
DESCRIPTION: Demonstrates calling `session.flush()` to explicitly push pending changes (like inserts) to the database within the current transaction. Shows the resulting SQL INSERT statements emitted by the ORM.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_5

LANGUAGE: Python
CODE:
```
>>> session.flush()
```

LANGUAGE: SQL
CODE:
```
{execsql}BEGIN (implicit)
INSERT INTO user_account (name, fullname) VALUES (?, ?) RETURNING id
[... (insertmanyvalues) 1/2 (ordered; batch not supported)] ('squidward', 'Squidward Tentacles')
INSERT INTO user_account (name, fullname) VALUES (?, ?) RETURNING id
[insertmanyvalues 2/2 (ordered; batch not supported)] ('ehkrabs', 'Eugene H. Krabs')
```

----------------------------------------

TITLE: Navigating Back Along Relationship - SQLAlchemy Python
DESCRIPTION: Following the append operation, this snippet confirms that the `back_populates` parameter ensures synchronization, allowing navigation from the added `Address` object back to its related `User` object via the `user` attribute.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_3

LANGUAGE: Python
CODE:
```
>>> a1.user
User(id=None, name='pkrabs', fullname='Pearl Krabs')
```

----------------------------------------

TITLE: ORM Delete with Custom WHERE Clause - Python
DESCRIPTION: Shows how to perform an ORM-enabled delete operation using session.execute with a delete construct that includes a custom where clause. This allows deleting multiple rows based on arbitrary criteria, bypassing the ORM's unit of work for individual object deletion.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_25

LANGUAGE: Python
CODE:
```
from sqlalchemy import delete
stmt = delete(User).where(User.name.in_(["squidward", "sandy"]))
session.execute(stmt)
```

----------------------------------------

TITLE: Removing Session from scoped_session Python
DESCRIPTION: This command is used to clean up the `Session` instance currently held by the `scoped_session` registry for the active scope. It first calls `Session.close()` on the managed session to release resources (connections, transactions) and then discards the session object from the registry. This is crucial for resource management, especially at the end of a request or transaction scope.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_3

LANGUAGE: Python
CODE:
```
Session.remove()
```

----------------------------------------

TITLE: SQLAlchemy ORM: Filter with NOT relationship any()
DESCRIPTION: Shows how to use the negation operator (`~`) with `relationship.any()` to find parent objects (Users) that have *no* related child objects (Addresses). This generates a SQL NOT EXISTS subquery.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_41

LANGUAGE: Python
CODE:
```
>>> stmt = select(User.fullname).where(~User.addresses.any())
>>> session.execute(stmt).all()
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.fullname
FROM user_account
WHERE NOT (EXISTS (SELECT 1
FROM address
WHERE user_account.id = address.user_id))
```

----------------------------------------

TITLE: Executing Select for ORM Entity - SQLAlchemy Python
DESCRIPTION: Executes a SQLAlchemy SELECT statement that targets a full ORM entity (`User`) using `Session.execute` and retrieves the first result row. The row will contain the entity instance as its single element.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_7

LANGUAGE: Python
CODE:
```
row = session.execute(select(User)).first()
```

----------------------------------------

TITLE: Defining SQLAlchemy Table with String and Integer Types - Python
DESCRIPTION: Demonstrates the basic usage of 'CamelCase' SQLAlchemy types (`Integer`, `String`) to define columns within a `Table` object associated with `MetaData`. Shows how to specify column names, types, primary keys, and optional type arguments like string length.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/type_basics.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import MetaData
from sqlalchemy import Table, Column, Integer, String

metadata_obj = MetaData()

user = Table(
    "user",
    metadata_obj,
    Column("user_name", String, primary_key=True),
    Column("email_address", String(60)),
)
```

----------------------------------------

TITLE: Applying load_only to selectinload relationship - SQLAlchemy Python
DESCRIPTION: Demonstrates using the `.load_only()` method on a relationship loader like `selectinload` to apply column restrictions to objects loaded via that relationship. This restricts columns fetched in the secondary SELECT IN query for the relationship. Required dependencies: SQLAlchemy ORM, mapped classes (User, Book), relationship configured.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import selectinload
stmt = select(User).options(selectinload(User.books).load_only(Book.title))
```

LANGUAGE: Python
CODE:
```
for user in session.scalars(stmt):
    print(f"{user.fullname}   {[b.title for b in user.books]}")
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
[...] ()
```

LANGUAGE: SQL
CODE:
```
SELECT book.owner_id AS book_owner_id, book.id AS book_id, book.title AS book_title
FROM book
WHERE book.owner_id IN (?, ?)
[...] (1, 2)
```

LANGUAGE: text
CODE:
```
Spongebob Squarepants   ['100 Years of Krabby Patties', 'Sea Catch 22', 'The Sea Grapes of Wrath']
Sandy Cheeks   ['A Nut Like No Other', 'Geodesic Domes: A Retrospective', 'Rocketry for Squirrels']
```

----------------------------------------

TITLE: SQLAlchemy Select.join() with Automatic ON Clause
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 `select().join()` method when the ON clause can be automatically determined based on foreign key relationships between the joined tables.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_18

LANGUAGE: Python
CODE:
```
stmt = select(user_table).join(addresses_table)
```

----------------------------------------

TITLE: Constructing SQLAlchemy DML with 2.0 Generative Methods
DESCRIPTION: Illustrates the recommended way to build `insert`, `update`, and `delete` statements in SQLAlchemy 2.0 using generative methods like `.values()`, `.where()`, `.inline()`, `.returning()`, and `.ordered_values()` as replacements for deprecated constructor arguments.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_34

LANGUAGE: Python
CODE:
```
# use generative methods, **kwargs OK for values()
stmt = insert(table).values(x=10, y=15).inline()
```

LANGUAGE: Python
CODE:
```
# use generative methods, dictionary also still  OK for values()
stmt = insert(table).values({"x": 10, "y": 15}).returning(table.c.x)
```

LANGUAGE: Python
CODE:
```
# use generative methods
stmt = table.delete().where(table.c.x > 15)
```

LANGUAGE: Python
CODE:
```
# use generative methods, ordered_values() replaces preserve_parameter_order
stmt = (
    table.update()
    .where(
        table.c.x < 15,
    )
    .ordered_values((table.c.y, 20), (table.c.x, table.c.y + 10))
)
```

----------------------------------------

TITLE: Querying with Subqueryload without Limit - SQLAlchemy
DESCRIPTION: Shows SQLAlchemy's `subqueryload` eager loading strategy fetching related collections. It issues two separate queries: a main query for the primary objects and a load query for the related items, joined back to the main query results.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#_snippet_14

LANGUAGE: python
CODE:
```
>>> session.scalars(select(User).options(subqueryload(User.addresses))).all()
```

LANGUAGE: sql
CODE:
```
-- the "main" query
SELECT users.id AS users_id
FROM users
```

LANGUAGE: sql
CODE:
```
-- the "load" query issued by subqueryload
SELECT addresses.id AS addresses_id,
       addresses.user_id AS addresses_user_id,
       anon_1.users_id AS anon_1_users_id
FROM (SELECT users.id AS users_id FROM users) AS anon_1
JOIN addresses ON anon_1.users_id = addresses.user_id
ORDER BY anon_1.users_id
```

----------------------------------------

TITLE: Query with Joined Eager Load and Limit - Python
DESCRIPTION: Shows a standard SQLAlchemy query using `joinedload` for eager loading of a related collection (`A.b`) and applying a `limit`. This structure is used to demonstrate changes in `FOR UPDATE` rendering.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#_snippet_33

LANGUAGE: Python
CODE:
```
session.query(A).options(joinedload(A.b)).limit(5)
```

----------------------------------------

TITLE: Creating All Tables from Declarative Metadata
DESCRIPTION: Provides an example of how to create all tables defined in the metadata associated with a DeclarativeBase using the create_all method, typically used for small scripts or initial setup.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_42

LANGUAGE: python
CODE:
```
engine = create_engine("sqlite://")

Base.metadata.create_all(engine)
```

----------------------------------------

TITLE: Defining ORM Model with Server Defaults and Eager Fetching - Python
DESCRIPTION: Defines a SQLAlchemy ORM model (`MyModel`) using Declarative mapping. It shows how to mark columns (`timestamp`, `special_identifier`) with server-side default generation using `server_default`, including SQL functions (`func.now()`) and generic `FetchedValue`. The `__mapper_args__ = {"eager_defaults": True}` setting enables eager fetching of these defaults upon INSERT, typically using the database's RETURNING feature when available.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#_snippet_10

LANGUAGE: Python
CODE:
```
class MyModel(Base):
    __tablename__ = "my_table"

    id = mapped_column(Integer, primary_key=True)

    # server-side SQL date function generates a new timestamp
    timestamp = mapped_column(DateTime(), server_default=func.now())

    # some other server-side function not named here, such as a trigger,
    # populates a value into this column during INSERT
    special_identifier = mapped_column(String(50), server_default=FetchedValue())

    # set eager defaults to True.  This is usually optional, as if the
    # backend supports RETURNING + insertmanyvalues, eager defaults
    # will take place regardless on INSERT
    __mapper_args__ = {"eager_defaults": True}
```

----------------------------------------

TITLE: Creating SQLAlchemy Core INSERT Statement with Values
DESCRIPTION: Demonstrates how to construct a basic SQL INSERT statement using the `sqlalchemy.insert` function and specifying column values using the `.values()` method. This creates an `Insert` object representing the statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import insert
stmt = insert(user_table).values(name="spongebob", fullname="Spongebob Squarepants")
```

----------------------------------------

TITLE: Loading Persistent Object by Name - SQLAlchemy ORM - Python
DESCRIPTION: Demonstrates loading a `User` object from the database into the session's persistent state using `select`, filtering by name, and retrieving the first result with `scalars`. This establishes an object in the session with loaded attribute data, which is then used to demonstrate the `expire` operation.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#_snippet_16

LANGUAGE: Python
CODE:
```
user = session.scalars(select(User).filter_by(name="user1").limit(1)).first()
```

----------------------------------------

TITLE: Mapping Python Union Types to Database Types - SQLAlchemy ORM
DESCRIPTION: This Python code demonstrates configuring SQLAlchemy's ORM to map Python union types (both pipe-style and `typing.Union`) to specific database types like JSON or JSONB using the `type_annotation_map` on a declarative base class. It shows examples of mapping list unions and scalar type unions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Union
from sqlalchemy import JSON
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from sqlalchemy.schema import CreateTable

# new style Union using a pipe operator
json_list = list[int] | list[str]

# old style Union using Union explicitly
json_scalar = Union[float, str, bool]


class Base(DeclarativeBase):
    type_annotation_map = {
        json_list: postgresql.JSONB,
        json_scalar: JSON,
    }


class SomeClass(Base):
    __tablename__ = "some_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    list_col: Mapped[list[str] | list[int]]

    # uses JSON
    scalar_col: Mapped[json_scalar]

    # uses JSON and is also nullable=True
    scalar_col_nullable: Mapped[json_scalar | None]

    # these forms all use JSON as well due to the json_scalar entry
    scalar_col_newstyle: Mapped[float | str | bool]
    scalar_col_oldstyle: Mapped[Union[float, str, bool]]
    scalar_col_mixedstyle: Mapped[Optional[float | str | bool]]
```

----------------------------------------

TITLE: Configuring SQLAlchemy Session with create_savepoint for Testing
DESCRIPTION: Demonstrates how to set up a SQLAlchemy Session in a test environment using `join_transaction_mode="create_savepoint"`. This mode ensures the Session operates within its own savepoint, leaving the externally initiated transaction active and allowing for easy rollback of all changes in the test's `tearDown`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_37

LANGUAGE: python
CODE:
```
class SomeTest(TestCase):
    def setUp(self):
        # connect to the database
        self.connection = engine.connect()

        # begin a non-ORM transaction
        self.trans = self.connection.begin()

        # bind an individual Session to the connection, selecting
        # "create_savepoint" join_transaction_mode
        self.session = Session(
            bind=self.connection, join_transaction_mode="create_savepoint"
        )

    def tearDown(self):
        self.session.close()

        # rollback non-ORM transaction
        self.trans.rollback()

        # return connection to the Engine
        self.connection.close()
```

----------------------------------------

TITLE: Iterating Large Result Sets with Yield Per (SQLAlchemy ORM)
DESCRIPTION: Demonstrates using the `yield_per=10` execution option with a SQLAlchemy `select` statement executed via `session.scalars()`. This option optimizes memory usage for large results by fetching and processing objects in batches of 10, suitable for iterating through many rows without loading them all into memory at once. It requires a `select` statement and session iteration.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#_snippet_3

LANGUAGE: python
CODE:
```
stmt = select(User).execution_options(yield_per=10)
for user_obj in session.scalars(stmt):
    print(user_obj)

```

----------------------------------------

TITLE: Accessing deferred column after load_only - SQLAlchemy Python
DESCRIPTION: Shows that accessing a column attribute on an object previously loaded with `load_only`, which was not included in the initial load, triggers a lazy loading SELECT statement for that specific column. Required dependencies: An object loaded with `load_only` and an active session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#_snippet_1

LANGUAGE: Python
CODE:
```
img_data = books[0].cover_photo
```

LANGUAGE: SQL
CODE:
```
SELECT book.cover_photo AS book_cover_photo
FROM book
WHERE book.id = ?
[...] (1,)
```

----------------------------------------

TITLE: Define SQLAlchemy Joined Inheritance Subclasses (Python)
DESCRIPTION: Configures the `Engineer` and `Manager` subclasses for a joined table inheritance hierarchy in SQLAlchemy. Each class maps to its own table (`engineer`, `manager`), includes a foreign key (`ForeignKey("employee.id")`) linking to the base `employee` table's primary key, defines unique attributes (`engineer_name`, `manager_name`), and sets its specific `polymorphic_identity` (`engineer`, `manager`).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#_snippet_1

LANGUAGE: Python
CODE:
```
class Engineer(Employee):
    __tablename__ = "engineer"
    id: Mapped[int] = mapped_column(ForeignKey("employee.id"), primary_key=True)
    engineer_name: Mapped[str]

    __mapper_args__ = {
        "polymorphic_identity": "engineer",
    }


class Manager(Employee):
    __tablename__ = "manager"
    id: Mapped[int] = mapped_column(ForeignKey("employee.id"), primary_key=True)
    manager_name: Mapped[str]

    __mapper_args__ = {
        "polymorphic_identity": "manager",
    }
```

----------------------------------------

TITLE: Executing Query and Fetching Single Row with one() - SQLAlchemy Python
DESCRIPTION: Executes a Core select statement against the database using an engine connection and fetches exactly one row using the Result.one() method. This method raises an error if no row is found or if multiple rows are returned.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_43

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    row = conn.execute(table.select().where(table.c.id == 5)).one()
```

----------------------------------------

TITLE: Defining JSONEncodedDict TypeDecorator in SQLAlchemy
DESCRIPTION: Defines a custom SQLAlchemy TypeDecorator to handle the conversion of Python dictionaries to JSON strings for storage in a VARCHAR column and vice-versa upon retrieval. It uses the `json` module for encoding and decoding.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#_snippet_7

LANGUAGE: Python
CODE:
```
class JSONEncodedDict(TypeDecorator):
    """Represents an immutable structure as a json-encoded string.

    Usage:

        JSONEncodedDict(255)

    """

    impl = VARCHAR

    cache_ok = True

    def process_bind_param(self, value, dialect):
        if value is not None:
            value = json.dumps(value)

        return value

    def process_result_value(self, value, dialect):
        if value is not None:
            value = json.loads(value)
        return value
```

----------------------------------------

TITLE: SQLAlchemy: 2.0 Result Row Behavior (Future Mode)
DESCRIPTION: Illustrates how result rows returned by `Connection.execute` behave like named tuples when using SQLAlchemy's "future" mode, allowing access to columns by name or index.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_27

LANGUAGE: Python
CODE:
```
engine = create_engine(..., future=True)  # using future mode

with engine.connect() as conn:
    result = conn.execute(text("select x, y from table"))

    row = result.first()  # suppose the row is (1, 2)
```

----------------------------------------

TITLE: Accessing Declarative Base MetaData (Python)
DESCRIPTION: Shows how to access the `MetaData` object associated with the `Base` Declarative class via the `metadata` attribute. This object collects the table definitions declared by mapped classes inheriting from `Base`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_8

LANGUAGE: python
CODE:
```
>>> Base.metadata
```

----------------------------------------

TITLE: Reflecting All Tables in MetaData Default Schema (Python)
DESCRIPTION: Shows how calling `MetaData.reflect()` on a `MetaData` object configured with a default schema will reflect all tables found within that specific schema, assuming no schema parameter is passed to `reflect()`. Requires a `MetaData` object configured with a schema and an engine.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#_snippet_9

LANGUAGE: Python
CODE:
```
# uses `schema` configured in metadata_obj
metadata_obj.reflect(someengine)
```

----------------------------------------

TITLE: Merging with session.merge in SQLAlchemy ORM
DESCRIPTION: Demonstrates the updated behavior of session.merge(), which now checks for existing objects by primary key before merging state. This allows merging a transient object like MyObject(id=1) to load the persistent object with ID 1 from the database if it exists, then copy attributes from the transient instance.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#_snippet_1

LANGUAGE: Python
CODE:
```
x = MyObject(id=1)
x = sess.merge(x)
```

----------------------------------------

TITLE: Demonstrating Context Manager Use - SQLAlchemy Python
DESCRIPTION: This snippet shows how SQLAlchemy's Connection and Engine objects can be used as context managers. Using `with conn.connect()` returns a branched connection that can be closed independently, leaving the original connection open. Using `with engine.connect()` returns a connection from the engine's pool which is automatically returned to the pool (or closed if detached/invalidated) upon exiting the `with` block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#_snippet_3

LANGUAGE: python
CODE:
```
with conn.connect() as c:  # leaves the Connection open
    c.execute("...")

with engine.connect() as c:  # closes the Connection
    c.execute("...")
```

----------------------------------------

TITLE: Committing New Account (Python)
DESCRIPTION: Adds the newly created `Account` object (which has associated `AccountTransaction` objects assigned) to a SQLAlchemy `Session` and commits the transaction, triggering INSERT operations for both the account and its related transactions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#_snippet_3

LANGUAGE: Python
CODE:
```
>>> with Session(engine) as session:
...     session.add(new_account)
...     session.commit()
```

----------------------------------------

TITLE: Defining Declarative Mixin with Columns in Python
DESCRIPTION: This snippet demonstrates defining a simple mixin class `TimestampMixin` in SQLAlchemy Declarative using the 'declarative table' style. It includes two columns (`created_at`, `updated_at`) declared using annotated attributes (`Mapped`) and `mapped_column`, with a default value provided for `created_at`. It also shows how a mapped class `MyModel` inherits from this mixin and `Base` to include these columns.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_4

LANGUAGE: Python
CODE:
```
class TimestampMixin:
    created_at: Mapped[datetime] = mapped_column(default=func.now())
    updated_at: Mapped[datetime]


class MyModel(TimestampMixin, Base):
    __tablename__ = "test"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
```

----------------------------------------

TITLE: Configure Inner Join on SQLAlchemy Relationship Mapping
DESCRIPTION: Configures a many-to-one relationship (`Address.user`) to use an INNER JOIN instead of the default LEFT OUTER JOIN when eagerly loaded via `joinedload`. This is suitable when the foreign key (`user_id`) is guaranteed to be NOT NULL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_19

LANGUAGE: Python
CODE:
```
class Address(Base):
    # ...

    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    user: Mapped[User] = relationship(lazy="joined", innerjoin=True)
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Mappings for Relationship/FK Example
DESCRIPTION: Defines two simple SQLAlchemy ORM classes, A and B, with a one-to-many relationship from B to A via a foreign key 'a_id'. This mapping is used to illustrate changes in how relationship and foreign key assignments interact.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#_snippet_51

LANGUAGE: Python
CODE:
```
class A(Base):
    __tablename__ = "table_a"

    id = Column(Integer, primary_key=True)


class B(Base):
    __tablename__ = "table_b"

    id = Column(Integer, primary_key=True)
    a_id = Column(ForeignKey("table_a.id"))
    a = relationship(A)
```

----------------------------------------

TITLE: Handling Duplicate PK with Savepoint - Python
DESCRIPTION: This Python snippet demonstrates the recommended pattern for handling potential primary key conflicts consistently using a nested transaction (savepoint) and catching the IntegrityError. This approach works regardless of whether the conflicting object is already present in the session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_78

LANGUAGE: python
CODE:
```
# add another Product with same primary key
try:
    with session.begin_nested():
        session.add(Product(id=1))
except exc.IntegrityError:
    print("row already exists")
```

----------------------------------------

TITLE: Performing New Bulk Insert (Python)
DESCRIPTION: Shows the modern way to perform bulk inserts using `session.execute()` with an `insert()` construct and a list of dictionaries. Requires importing `insert`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_14

LANGUAGE: Python
CODE:
```
from sqlalchemy import insert

session.execute(insert(User), [{"name": "u1"}, {"name": "u2"}, {"name": "u3"}])
```

----------------------------------------

TITLE: Custom Pessimistic Ping via SQLAlchemy Event (Python)
DESCRIPTION: Illustrates implementing a custom pessimistic connection check using the `engine_connect` event. It shows testing the connection with `connection.scalar(select(1))` and handling disconnects by catching `exc.DBAPIError` and checking `connection_invalidated`. Requires imports for `exc`, `event`, and `select` from `sqlalchemy`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_7

LANGUAGE: Python
CODE:
```
from sqlalchemy import exc
from sqlalchemy import event
from sqlalchemy import select

some_engine = create_engine(...)


@event.listens_for(some_engine, "engine_connect")
def ping_connection(connection, branch):
    if branch:
        # this parameter is always False as of SQLAlchemy 2.0,
        # but is still accepted by the event hook.  In 1.x versions
        # of SQLAlchemy, "branched" connections should be skipped.
        return

    try:
        # run a SELECT 1.   use a core select() so that
        # the SELECT of a scalar value without a table is
        # appropriately formatted for the backend
        connection.scalar(select(1))
    except exc.DBAPIError as err:
        # catch SQLAlchemy's DBAPIError, which is a wrapper
        # for the DBAPI's exception.  It includes a .connection_invalidated
        # attribute which specifies if this connection is a "disconnect"
        # condition, which is based on inspection of the original exception
        # by the dialect in use.
        if err.connection_invalidated:
            # run the same SELECT again - the connection will re-validate
            # itself and establish a new connection.  The disconnect detection
            # here also causes the whole connection pool to be invalidated
            # so that all stale connections are discarded.
            connection.scalar(select(1))
        else:
            raise
```

----------------------------------------

TITLE: Subqueryload with Order By and Limit - SQLAlchemy Python
DESCRIPTION: Provides the recommended solution to the `LIMIT` issue with `subqueryload`. By adding `order_by(User.id)`, the main query becomes deterministic, ensuring the subquery receives a consistent set of rows to join against and loads the correct related collections.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#_snippet_17

LANGUAGE: python
CODE:
```
session.scalars(
    select(User).options(subqueryload(User.addresses)).order_by(User.id).limit(1)
).first()
```

----------------------------------------

TITLE: Defining Basic Polymorphic Inheritance Classes - SQLAlchemy ORM
DESCRIPTION: Defines SQLAlchemy ORM mapped classes `Employee`, `Manager`, and `Engineer` using single-table inheritance. The `Employee` class serves as the base with a `type` column for discrimination. `Manager` and `Engineer` inherit from `Employee` and specify their `polymorphic_identity`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#_snippet_11

LANGUAGE: Python
CODE:
```
class Employee(Base):
    __tablename__ = "employee"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    type: Mapped[str]

    __mapper_args__ = {
        "polymorphic_identity": "employee",
        "polymorphic_on": "type",
    }


class Manager(Employee):
    manager_name: Mapped[str] = mapped_column(nullable=True)

    company_id: Mapped[int] = mapped_column(ForeignKey("company.id"))
    company: Mapped[Company] = relationship(back_populates="managers")

    __mapper_args__ = {
        "polymorphic_identity": "manager",
    }


class Engineer(Employee):
    engineer_info: Mapped[str] = mapped_column(nullable=True)

    __mapper_args__ = {
        "polymorphic_identity": "engineer",
    }
```

----------------------------------------

TITLE: Defining Unique Constraints in SQLAlchemy
DESCRIPTION: Illustrates creating unique constraints using SQLAlchemy Core. Anonymous per-column unique constraints are defined with `Column(..., unique=True)`, while explicitly named or multi-column unique constraints are created using the `UniqueConstraint` table-level construct.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_9

LANGUAGE: Python
CODE:
```
from sqlalchemy import UniqueConstraint

metadata_obj = MetaData()
mytable = Table(
    "mytable",
    metadata_obj,
    # per-column anonymous unique constraint
    Column("col1", Integer, unique=True),
    Column("col2", Integer),
    Column("col3", Integer),
    # explicit/composite unique constraint.  'name' is optional.
    UniqueConstraint("col2", "col3", name="uix_1"),
)
```

----------------------------------------

TITLE: SQLAlchemy Select.join() Adding ON Clause to Query
DESCRIPTION: Shows the new SQLAlchemy 2.0 behavior of `select().join()`. This method now adds a JOIN clause directly to the existing SELECT statement's FROM clause, similar to ORM Query.join, rather than creating a subquery.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_16

LANGUAGE: Python
CODE:
```
stmt = select(user_table).join(
    addresses_table, user_table.c.id == addresses_table.c.user_id
)
```

----------------------------------------

TITLE: Accessing Entities/Attributes from Mapped Rows (2.0 Style) - Python
DESCRIPTION: Shows how to access entire entities or specific attributes directly from a mapped row obtained via `result.mappings()` in SQLAlchemy 2.0 style. This is useful when selecting multiple entities or attributes in a single statement. Requires an ORM Session and a statement selecting entities/attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_29

LANGUAGE: python
CODE:
```
from sqlalchemy.future import select

stmt = select(User, Address).join(User.addresses)

for row in session.execute(stmt).mappings():
    print("the user is: %s  the address is: %s" % (row[User], row[Address]))
```

----------------------------------------

TITLE: Inserting Fixture Data using SQLAlchemy Session (Python)
DESCRIPTION: Establishes a SQLAlchemy `Session` bound to a database connection obtained from the engine. It populates the database with sample data by creating instances of the `Manager` and `Engineer` ORM classes, adds them to the session using `session.add_all()`, and persists the changes by calling `session.commit()`. Requires an engine, `Session` class, and the ORM classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_single_inheritance.rst#_snippet_2

LANGUAGE: python
CODE:
```
conn = engine.connect()
from sqlalchemy.orm import Session
session = Session(conn)
session.add_all(
    [
        Manager(
            name="Mr. Krabs",
            manager_name="Eugene H. Krabs",
        ),
        Engineer(name="SpongeBob", engineer_info="Krabby Patty Master"),
        Engineer(
            name="Squidward",
            engineer_info="Senior Customer Engagement Engineer",
        ),
    ],
)
session.commit()
```

----------------------------------------

TITLE: Batch Insert Performance Comparison - Text
DESCRIPTION: This text snippet displays performance comparison results from SQLAlchemy's example performance suite for various batch insert methods. It shows execution times for 100,000 iterations in SQLAlchemy 1.3 and 1.4, illustrating the significant speedup (3x-5x) achieved in version 1.4 due to optimizations like using psycopg2's `execute_values()` extension.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_53

LANGUAGE: text
CODE:
```
# 1.3
$ python -m examples.performance bulk_inserts --dburl postgresql://scott:tiger@localhost/test
test_flush_no_pk : (100000 iterations); total time 14.051527 sec
test_bulk_save_return_pks : (100000 iterations); total time 15.002470 sec
test_flush_pk_given : (100000 iterations); total time 7.863680 sec
test_bulk_save : (100000 iterations); total time 6.780378 sec
test_bulk_insert_mappings :  (100000 iterations); total time 5.363070 sec
test_core_insert : (100000 iterations); total time 5.362647 sec

# 1.4 with enhancement
$ python -m examples.performance bulk_inserts --dburl postgresql://scott:tiger@localhost/test
test_flush_no_pk : (100000 iterations); total time 3.820807 sec
test_bulk_save_return_pks : (100000 iterations); total time 3.176378 sec
test_flush_pk_given : (100000 iterations); total time 4.037789 sec
test_bulk_save : (100000 iterations); total time 2.604446 sec
test_bulk_insert_mappings : (100000 iterations); total time 1.204897 sec
test_core_insert : (100000 iterations); total time 0.958976 sec
```

----------------------------------------

TITLE: Using Subquery in SQLAlchemy Core Select
DESCRIPTION: Demonstrates creating a subquery from a statement and then selecting from that subquery in subsequent statements. This is the correct pattern for using subqueries in SQLAlchemy expressions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_14

LANGUAGE: python
CODE:
```
subq = stmt.subquery()

new_stmt_1 = select(subq)

new_stmt_2 = select(some_table).select_from(some_table.join(subq))
```

----------------------------------------

TITLE: Performing Multi-VALUES Insert in SQLAlchemy Core
DESCRIPTION: Demonstrates the new capability of the `Insert.values()` method to accept a list of dictionaries, generating a multi-VALUES SQL statement suitable for backends like PostgreSQL, SQLite, and MySQL. Note that this differs from `executemany()`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#_snippet_34

LANGUAGE: Python
CODE:
```
users.insert().values(
    [
        {"name": "some name"},
        {"name": "some other name"},
        {"name": "yet another name"},
    ]
)
```

----------------------------------------

TITLE: Execute ORM SELECT Statement
DESCRIPTION: Demonstrates executing a SELECT statement built against an ORM entity (`User`) using `Session.execute()`. It shows how the result rows can contain ORM-mapped instances. Requires a `Session` and an ORM-mapped class `User`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_2

LANGUAGE: Python
CODE:
```
stmt = select(User).where(User.name == "spongebob")
with Session(engine) as session:
    for row in session.execute(stmt):
        print(row)
```

----------------------------------------

TITLE: Defining declarative model with default deferred columns in SQLAlchemy (Python)
DESCRIPTION: Shows how to configure default column deferral directly in a declarative mapping using `mapped_column(deferred=True)`. Columns like `summary` and `cover_photo` are marked to be excluded from default SELECTs for this model.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#_snippet_10

LANGUAGE: python
CODE:
```
class Base(DeclarativeBase):
    pass

class Book(Base):
    __tablename__ = "book"
    id: Mapped[int] = mapped_column(primary_key=True)
    owner_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
    title: Mapped[str]
    summary: Mapped[str] = mapped_column(Text, deferred=True)
    cover_photo: Mapped[bytes] = mapped_column(LargeBinary, deferred=True)

    def __repr__(self) -> str:
        return f"Book(id={self.id!r}, title={self.title!r})"
```

----------------------------------------

TITLE: Selecting from a Single Table (Core)
DESCRIPTION: Demonstrates how SQLAlchemy infers the FROM clause when selecting columns from a single table using SQLAlchemy Core table objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_30

LANGUAGE: Python
CODE:
```
print(select(user_table.c.name))
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.name
FROM user_account
```

----------------------------------------

TITLE: Selecting Full ORM Entity - SQLAlchemy Python
DESCRIPTION: Shows how to create a SELECT statement targeting an entire ORM entity class (e.g., `User`). When executed with `Session.execute`, this returns rows where the entity instance is the single element.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_6

LANGUAGE: Python
CODE:
```
print(select(User))
```

----------------------------------------

TITLE: Selecting Specific ORM Entity Columns - SQLAlchemy Python
DESCRIPTION: Illustrates creating a SELECT statement by passing ORM entity class attributes (e.g., `User.name`, `User.fullname`) to `select`. These attributes resolve to the underlying table columns.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_9

LANGUAGE: Python
CODE:
```
print(select(User.name, User.fullname))
```

----------------------------------------

TITLE: Creating Anonymous ORM Alias with aliased() - SQLAlchemy Python
DESCRIPTION: To create a SQL alias of an ORM entity, use the `aliased` construct against a mapped class. This creates an anonymously named alias in the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_10

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import aliased
u1 = aliased(User)
print(select(u1).order_by(u1.id))
```

LANGUAGE: SQL
CODE:
```
SELECT user_account_1.id, user_account_1.name, user_account_1.fullname
FROM user_account AS user_account_1 ORDER BY user_account_1.id
```

----------------------------------------

TITLE: Ordering Results Ascending - SQLAlchemy
DESCRIPTION: Illustrates how to apply an ORDER BY clause to a select statement using the order_by method. It orders the results from user_table by the name column in ascending order (default).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_39

LANGUAGE: Python
CODE:
```
print(select(user_table).order_by(user_table.c.name))
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account ORDER BY user_account.name
```

----------------------------------------

TITLE: Modifying ORM Object Attribute in SQLAlchemy
DESCRIPTION: Modifies an attribute (`fullname`) of a loaded SQLAlchemy ORM object. This change is tracked by the Session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_12

LANGUAGE: pycon
CODE:
```
>>> sandy.fullname = "Sandy Squirrel"
```

----------------------------------------

TITLE: Incorrect Ordering with Joinedload in SQLAlchemy ORM
DESCRIPTION: This snippet shows an incorrect attempt to order a query by a column in a related table (Address.email_address) when only using joinedload. The generated SQL is invalid because the 'addresses' table alias required for ordering is not present in the FROM clause derived from joinedload.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_22

LANGUAGE: Python
CODE:
```
select(User)
.options(joinedload(User.addresses))
.filter(User.name == "spongebob")
.order_by(Address.email_address)
)
>>> result = session.scalars(stmt).unique().all()
```

LANGUAGE: SQL
CODE:
```
SELECT
    addresses_1.id AS addresses_1_id,
    addresses_1.email_address AS addresses_1_email_address,
    addresses_1.user_id AS addresses_1_user_id,
    users.id AS users_id,
    users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
LEFT OUTER JOIN addresses AS addresses_1
    ON users.id = addresses_1.user_id
WHERE users.name = ?
ORDER BY addresses.email_address
```

----------------------------------------

TITLE: Defining Hybrid Property with Update Expression in SQLAlchemy
DESCRIPTION: Defines a SQLAlchemy model `Person` with a hybrid property `name` that combines `first_name` and `last_name`. It includes an `@name.expression` for SQL generation and an `@name.update_expression` to handle splitting a single value into multiple column updates during bulk UPDATE operations.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#_snippet_5

LANGUAGE: Python
CODE:
```
class Person(Base):
    # ...

    first_name = Column(String(10))
    last_name = Column(String(10))

    @hybrid.hybrid_property
    def name(self):
        return self.first_name + " " + self.last_name

    @name.expression
    def name(cls):
        return func.concat(cls.first_name, " ", cls.last_name)

    @name.update_expression
    def name(cls, value):
        f, l = value.split(" ", 1)
        return [(cls.first_name, f), (cls.last_name, l)]
```

----------------------------------------

TITLE: Accessing Result Columns by Attribute Name (Python)
DESCRIPTION: This snippet demonstrates fetching rows using `conn.execute(text(...))` and iterating through the result. It shows accessing columns in each row using attribute names (`row.x`, `row.y`), which are derived from the SQL column names when results are treated as Python named tuples.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#_snippet_0

LANGUAGE: python
CODE:
```
result = conn.execute(text("select x, y from some_table"))

for row in result:
    y = row.y

    # illustrate use with Python f-strings
    print(f"Row: {row.x} {y}")
```

----------------------------------------

TITLE: Validating Single Attribute with validates (SQLAlchemy)
DESCRIPTION: Demonstrates using the `@validates` decorator to add a simple validation routine to a mapped attribute (`email`). The validator method receives the object instance, attribute key, and the value being set, allowing validation checks and potential value modification before assignment.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#_snippet_0

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import validates


class EmailAddress(Base):
    __tablename__ = "address"

    id = mapped_column(Integer, primary_key=True)
    email = mapped_column(String)

    @validates("email")
    def validate_email(self, key, address):
        if "@" not in address:
            raise ValueError("failed simple email validation")
        return address
```

----------------------------------------

TITLE: Using Engine.begin() Context Manager for Automatic Commit
DESCRIPTION: Shows using the engine.begin() context manager to acquire a connection within an automatically managed transaction block. The transaction is committed upon exiting the 'with' block successfully or rolled back if an exception occurs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_12

LANGUAGE: Python
CODE:
```
engine = create_engine("postgresql+psycopg2://user:pass@host/dbname")

with engine.begin() as conn:
    conn.execute(
        some_table.insert(),
        [
            {"data": "some data one"},
            {"data": "some data two"},
            {"data": "some data three"},
        ],
    )
# commits and closes automatically
```

----------------------------------------

TITLE: Using Python Native Enum with SQLAlchemy
DESCRIPTION: Demonstrates how to map a native Python `enum.Enum` class directly to a database column using `sqlalchemy.Enum`. It shows creating a table, inserting an enum value, and asserting that the retrieved value is the original enum object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_11.rst#_snippet_37

LANGUAGE: Python
CODE:
```
import enum
from sqlalchemy import Table, MetaData, Column, Enum, create_engine


class MyEnum(enum.Enum):
    one = 1
    two = 2
    three = 3


t = Table("data", MetaData(), Column("value", Enum(MyEnum)))

e = create_engine("sqlite://")
t.create(e)

e.execute(t.insert(), {"value": MyEnum.two})
assert e.scalar(t.select()) is MyEnum.two
```

----------------------------------------

TITLE: Querying User with Outer Join - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates querying `User` objects and performing an outer join to their associated addresses. It is used to illustrate how SQLAlchemy's ORM deduplicates primary objects when fetching full entities, even if the underlying SQL query would return multiple rows for the same primary key.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_2

LANGUAGE: python
CODE:
```
q = session.query(User).outerjoin(User.addresses).filter(User.name == "jack")
```

----------------------------------------

TITLE: SQLAlchemy Select IN Load Many-to-One - Python & SQL
DESCRIPTION: Illustrates `selectinload` for a many-to-one relationship, where SQLAlchemy first selects the child objects (Addresses) and then issues a second SELECT query to fetch the related parent objects (Users) using an IN clause with the foreign key values from the child objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_28

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import select
>>> from sqlalchemy.orm import selectinload
>>> stmt = select(Address).options(selectinload(Address.user))
>>> result = session.scalars(stmt).all()
```

LANGUAGE: SQL
CODE:
```
SELECT
    addresses.id AS addresses_id,
    addresses.email_address AS addresses_email_address,
    addresses.user_id AS addresses_user_id
    FROM addresses
SELECT
    users.id AS users_id,
    users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
WHERE users.id IN (?, ?)
(1, 2)
```

----------------------------------------

TITLE: SQLAlchemy Hybrid Property with Separate Expressions (Python)
DESCRIPTION: Shows how to define different logic for a hybrid property at the Python level and the SQL level using `@hybrid_property` and `@<property_name>.expression`. The Python version uses standard `if/else`, while the SQL version uses SQLAlchemy's `case` construct for conditional logic.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy.sql import case


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    firstname = mapped_column(String(50))
    lastname = mapped_column(String(50))

    @hybrid_property
    def fullname(self):
        if self.firstname is not None:
            return self.firstname + " " + self.lastname
        else:
            return self.lastname

    @fullname.expression
    def fullname(cls):
        return case(
            (cls.firstname != None, cls.firstname + " " + cls.lastname),
            else_=cls.lastname,
        )
```

----------------------------------------

TITLE: Triggering InvalidRequestError with lazy='raise_on_sql'
DESCRIPTION: Demonstrates that attempting to lazily load a relationship configured with `lazy="raise_on_sql"` results in an `sqlalchemy.exc.InvalidRequestError`. This enforces explicit loading strategies.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_20

LANGUAGE: python
CODE:
```
# Assuming models with lazy="raise_on_sql" are defined and session is available
from sqlalchemy import select

u1 = session.execute(select(User)).scalars().first()
# Attempting lazy load will raise an error
u1.addresses
```

LANGUAGE: python
CODE:
```
Traceback (most recent call last):
...
sqlalchemy.exc.InvalidRequestError: 'User.addresses' is not available due to lazy='raise_on_sql'
```

LANGUAGE: sql
CODE:
```
SELECT user_account.id FROM user_account
-- Parameters: ()
```

----------------------------------------

TITLE: Defining ORM Models with Mixin - SQLAlchemy Python
DESCRIPTION: This snippet defines SQLAlchemy Declarative ORM models that inherit from a Python mixin class (`HasTimestamp`). The mixin provides a common column (`timestamp`) shared by different mapped entities (`SomeEntity`, `SomeOtherEntity`), demonstrating code reuse in model definitions. Requires SQLAlchemy ORM components like `mapped_column`, `DateTime`, `Integer`, and a `Base` declarative base.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#_snippet_2

LANGUAGE: Python
CODE:
```
    import datetime


    class HasTimestamp:
        timestamp = mapped_column(DateTime, default=datetime.datetime.now)


    class SomeEntity(HasTimestamp, Base):
        __tablename__ = "some_entity"
        id = mapped_column(Integer, primary_key=True)


    class SomeOtherEntity(HasTimestamp, Base):
        __tablename__ = "some_entity" # NOTE: This appears to be a typo in the original text, likely should be "some_other_entity"
        id = mapped_column(Integer, primary_key=True)
```

----------------------------------------

TITLE: Retrieving Existing Account (Python)
DESCRIPTION: Creates a new session and retrieves an existing `Account` object from the database using `session.scalar()` and a `select` statement filtered by the identifier.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#_snippet_7

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import select
>>> session = Session(engine, expire_on_commit=False)
>>> existing_account = session.scalar(select(Account).filter_by(identifier="account_01"))
```

----------------------------------------

TITLE: Checking Object State After Relationship Assignment - SQLAlchemy Session - Python
DESCRIPTION: Creates a new `Address` object. Assigns it to a persistent `User`'s relationship (`a1.user = u1`). Demonstrates that this action, due to default cascades, automatically adds the new `Address` object to the session as pending, distinct from the original persistent address. This explains why a subsequent merge might fail.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#_snippet_11

LANGUAGE: pycon+sql
CODE:
```
>>> a1 = Address()
>>> a1.user = u1
>>> a1 in session
True
>>> existing_a1 in session
True
>>> a1 is existing_a1
False
```

----------------------------------------

TITLE: Retrieving Inserted Primary Key from Result
DESCRIPTION: Shows how to access the primary key value(s) of the newly inserted row from the result object returned by the execution. The result is returned as a tuple, even for single-column primary keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_5

LANGUAGE: Python
CODE:
```
result.inserted_primary_key
```

----------------------------------------

TITLE: Executing SQLAlchemy Core INSERT Statement
DESCRIPTION: Demonstrates executing a SQLAlchemy `Insert` statement using an engine connection's `.execute()` method within a transaction context. The transaction is committed to persist the changes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_4

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    result = conn.execute(stmt)
    conn.commit()
```

----------------------------------------

TITLE: Loading specific columns with load_only - SQLAlchemy Python
DESCRIPTION: Demonstrates using the `load_only` loader option with a `select` statement to specify a subset of column-mapped attributes to be loaded. It omits other non-primary-key columns by default. Required dependencies: SQLAlchemy ORM, a mapped class (Book), and a session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import load_only
stmt = select(Book).options(load_only(Book.title, Book.summary))
books = session.scalars(stmt).all()
```

LANGUAGE: SQL
CODE:
```
SELECT book.id, book.title, book.summary
FROM book
[...] ()
```

LANGUAGE: Python
CODE:
```
for book in books:
    print(f"{book.title}  {book.summary}")
```

LANGUAGE: text
CODE:
```
100 Years of Krabby Patties  some long summary
Sea Catch 22  another long summary
The Sea Grapes of Wrath  yet another summary
A Nut Like No Other  some long summary
Geodesic Domes: A Retrospective  another long summary
Rocketry for Squirrels  yet another summary
```

----------------------------------------

TITLE: Configuring Pessimistic Ping in SQLAlchemy (Python)
DESCRIPTION: Explains how to use the built-in `pool_pre_ping` argument when creating a SQLAlchemy engine to enable automatic connection testing upon checkout. This helps detect and replace stale connections proactively.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_6

LANGUAGE: Python
CODE:
```
engine = create_engine("mysql+pymysql://user:pw@host/db", pool_pre_ping=True)
```

----------------------------------------

TITLE: Using sessionmaker.begin() for Session and Transaction - SQLAlchemy ORM - Python
DESCRIPTION: Shows how to use the begin() method directly on a sessionmaker factory. This method returns a session object that also acts as a context manager, automatically handling the transaction commit/rollback and session closing upon exiting the with block.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# an Engine, which the Session will use for connection
# resources
engine = create_engine("postgresql+psycopg2://scott:tiger@localhost/")

# a sessionmaker(), also in the same scope as the engine
Session = sessionmaker(engine)

# we can now construct a Session() and include begin()/commit()/rollback()
# at once
with Session.begin() as session:
    session.add(some_object)
    session.add(some_other_object)
# commits the transaction, closes the session
```

----------------------------------------

TITLE: Basic contains_eager Usage with Join - SQLAlchemy Python
DESCRIPTION: Demonstrates the basic application of `contains_eager` to eagerly load a relationship (`User.addresses`) based on an explicit `join` in the select statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_36

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import contains_eager

stmt = select(User).join(User.addresses).options(contains_eager(User.addresses))
```

----------------------------------------

TITLE: Save-Update Cascade: Adding Child to Existing Parent
DESCRIPTION: Demonstrates the `save-update` cascade when a new child object (`address3`) is associated with a parent object (`user1`) that is already in a `Session`. The new child object is automatically added to the same session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_3

LANGUAGE: Python
CODE:
```
>>> address3 = Address()
>>> user1.addresses.append(address3)
>>> address3 in sess
True
```

----------------------------------------

TITLE: Defining Many-to-Many Relationship with Set using Mapped
DESCRIPTION: This snippet demonstrates how to define a many-to-many relationship using SQLAlchemy ORM's declarative style with type annotations (`Mapped`) and the `relationship.secondary` parameter. It specifically shows using a `Set` for the collection type. The `Parent` class is linked to a `Child` class via an `association_table` (not shown).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_16

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "left_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[Set["Child"]] = relationship(secondary=association_table)
```

----------------------------------------

TITLE: Triggering SQLAlchemy Invalid Identity Map Error (Python)
DESCRIPTION: Shows how attempting to iterate an unbuffered `Result` object obtained from a `Session` after the session has been closed (e.g., exiting a context manager) can lead to an `Object cannot be converted to 'persistent' state` error because the session's identity map is no longer valid.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_33

LANGUAGE: Python
CODE:
```
# context manager creates new Session
with Session(engine) as session_obj:
    result = sess.execute(select(User).where(User.id == 7))

# context manager is closed, so session_obj above is closed, identity
# map is replaced

# iterating the result object can't associate the object with the
# Session, raises this error.
user = result.first()
```

----------------------------------------

TITLE: SQLAlchemy Select with New .selected_columns Attribute
DESCRIPTION: Demonstrates the correct SQLAlchemy 2.0 style for referencing columns within the columns clause of a `select()` statement using the new `.selected_columns` attribute. This replaces the problematic use of `.c` on the select object itself.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_15

LANGUAGE: Python
CODE:
```
stmt = select(users)
stmt = stmt.where(stmt.selected_columns.name == "foo")
```

----------------------------------------

TITLE: Typing SQLAlchemy Select and Returning Insert Statements (Python)
DESCRIPTION: Illustrates how row-returning constructs like `select()` and `insert().returning()` are typed as `Tuple[]`, preserving the individual Python types of the selected or returned columns. This allows type checkers to understand the structure and types of the result rows.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_1

LANGUAGE: python
CODE:
```
# (variable) stmt: Select[Tuple[str, int]]
stmt = select(str_col, int_col)

# (variable) stmt: ReturningInsert[Tuple[str, int]]
ins_stmt = insert(table("t")).returning(str_col, int_col)
```

----------------------------------------

TITLE: Use Scalar Subquery in Comparison
DESCRIPTION: Demonstrates how a scalar subquery object can be used like any other column element in a comparison expression within SQLAlchemy's expression language.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_61

LANGUAGE: python
CODE:
```
print(subq == 5)
```

----------------------------------------

TITLE: Execute ORM Select from Raw SQL Statement in SQLAlchemy
DESCRIPTION: Shows how to execute a raw SQL statement using session.execute and map the results to ORM entities (User) using the from_statement and scalars methods. This allows using raw SQL while still getting ORM objects back.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_68

LANGUAGE: python
CODE:
```
users = (
    session.execute(select(User).from_statement(text("select * from users")))
    .scalars()
    .all()
)
```

----------------------------------------

TITLE: Mapping Imperative Class in SQLAlchemy
DESCRIPTION: Shows how to imperatively map a plain Python class `User` to a SQLAlchemy `Table` object using the `registry.map_imperatively` method. This approach explicitly defines the database table structure and then maps the Python class to it using the ORM registry. It requires core SQLAlchemy components like `Table`, `Column`, `Integer`, and `String`, as well as the ORM registry.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import registry
from sqlalchemy import Table, Column, Integer, String # Assuming these are imported from sqlalchemy core

mapper_registry = registry()

user_table = Table(
    "user",
    mapper_registry.metadata,
    Column("id", Integer, primary_key=True),
    Column("name", String(50)),
)


class User:
    pass


mapper_registry.map_imperatively(User, user_table)
```

----------------------------------------

TITLE: Modern Bulk Update with Session.execute (List of Dicts) - Python
DESCRIPTION: Illustrates the recommended modern way to perform bulk updates using session.execute with an update construct and a list of dictionaries. This is similar to the first snippet but uses a different model (User) and is presented as the modern alternative to the legacy method.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_23

LANGUAGE: Python
CODE:
```
from sqlalchemy import update

session.execute(
    update(User),
    [
        {"id": 1, "name": "scheeks", "manager_name": "Sandy Cheeks, President"},
        {"id": 2, "name": "eugene", "manager_name": "Eugene H. Krabs, VP Marketing"},
    ],
)
```

----------------------------------------

TITLE: Accessing Expired Attribute Triggers Reload - SQLAlchemy ORM - Python
DESCRIPTION: Shows the output when accessing an attribute (`user.name`) on an object that has been previously expired. The ORM detects the expired state and emits a `SELECT` query to the database to retrieve the most current state for the object's row before returning the attribute value. This is a 'lazy load' behavior.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#_snippet_19

LANGUAGE: pycon+sql
CODE:
```
>>> print(user.name)
{execsql}SELECT user.id AS user_id, user.name AS user_name
FROM user
WHERE user.id = ?
(1,)
{stop}user1
```

----------------------------------------

TITLE: Chain Joined and Subquery Loading Options - SQLAlchemy Python
DESCRIPTION: This snippet illustrates chaining loader options on a SQLAlchemy select statement. It configures the query to eagerly load `Parent.children` using a JOIN and then, for each loaded child, eagerly load its `subelements` using a separate subquery.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import joinedload

stmt = select(Parent).options(
    joinedload(Parent.children).subqueryload(Child.subelements)
)
```

----------------------------------------

TITLE: Fetching Single Object with Core Select via Session.execute().scalar_one()
DESCRIPTION: The SQLAlchemy 2.0 approach to fetching a single object using Session.execute() with a Core select() construct and retrieving the scalar result using scalar_one().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_63

LANGUAGE: Python
CODE:
```
session = Session(engine)

user = session.execute(select(User).filter_by(name="some user")).scalar_one()
```

----------------------------------------

TITLE: Update and Access Collection After Session Commit
DESCRIPTION: Demonstrates adding a new Task to a User's 'all_tasks' collection, committing the session (which flushes changes and expires objects), and then accessing the 'current_week_tasks' @property. The commit ensures the change is in the database and the expiration forces a reload when the property is accessed, reflecting the updated data.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#_snippet_42

LANGUAGE: python
CODE:
```
>>> with Session(e) as sess:
...     u1 = sess.scalar(select(User).where(User.id == 1))
...     u1.all_tasks.append(Task(task_date=datetime.datetime.now()))
...     sess.commit()
...     print(u1.current_week_tasks)
[<__main__.Task object at 0x7f8711b90ec0>, <__main__.Task object at 0x7f8711b90a10>]
```

----------------------------------------

TITLE: Selecting Multiple Mapped Classes with Join
DESCRIPTION: Demonstrates selecting multiple ORM mapped classes in a single statement using a join. The result is typed as a tuple containing instances of the selected mapped classes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_6

LANGUAGE: Python
CODE:
```
from sqlalchemy import select
from sqlalchemy.orm import Session

with Session(engine) as session:
    # (variable) stmt: Select[Tuple[User, Address]]
    stmt_2 = select(User, Address).join_from(User, Address)

    # (variable) result_2: Result[Tuple[User, Address]]
    result_2 = session.execute(stmt_2)

    # (variable) user_obj: User
    # (variable) address_obj: Address
    user_obj, address_obj = result_2.one().t
```

----------------------------------------

TITLE: Creating URL with URL.create Method in SQLAlchemy
DESCRIPTION: Illustrates the new recommended method (`URL.create`) for programmatically constructing a SQLAlchemy `URL` object using positional and keyword arguments, replacing the direct constructor for keyword arguments.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_23

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy.engine import URL
>>> url = URL.create("postgresql", "user", "pass", host="host", database="dbname")
>>> str(url)
'postgresql://user:pass@host/dbname'
```

----------------------------------------

TITLE: Define SQLAlchemy Models for Single-Table Inheritance
DESCRIPTION: Defines a base model 'Widget' and a subclass 'FooWidget' using single-table inheritance, where both map to the same table 'widget_table'. This setup is used to illustrate changes in query generation for subclasses.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#_snippet_80

LANGUAGE: Python
CODE:
```
class Widget(Base):
    __table__ = "widget_table"


class FooWidget(Widget):
    pass
```

----------------------------------------

TITLE: Configure Selectin Loading at Mapping Time - SQLAlchemy Python
DESCRIPTION: This snippet defines SQLAlchemy Declarative models `Parent` and `Child` and configures the `Parent.children` relationship to use the `selectin` loader strategy by default whenever `Parent` objects are loaded. This strategy emits a second query to load related children for all loaded parents.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import List

from sqlalchemy import ForeignKey
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class Parent(Base):
    __tablename__ = "parent"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship(lazy="selectin")


class Child(Base):
    __tablename__ = "child"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent.id"))
```

----------------------------------------

TITLE: Configuring Default Selectin Load Strategy (Python)
DESCRIPTION: This Python snippet shows how to set `selectinload` as the default loading strategy for the `addresses` relationship by using the `lazy="selectin"` parameter in the `relationship` definition. This configuration means that anytime a `User` object's `addresses` collection is accessed, it will be loaded using the selectin strategy unless overridden by a query option.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_14

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import relationship


class User(Base):
 __tablename__ = "user_account"

 addresses: Mapped[List["Address"]] = relationship(
 back_populates="user", lazy="selectin"
 )
```

----------------------------------------

TITLE: Defining Declarative Base with MappedAsDataclass Mixin - Python/SQLAlchemy
DESCRIPTION: Demonstrates how to create a custom Declarative base class that inherits from `DeclarativeBase` and includes the `MappedAsDataclass` mixin. Any class inheriting from this custom base will automatically be processed and converted into a Python dataclass during the mapping setup.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import MappedAsDataclass


class Base(MappedAsDataclass, DeclarativeBase):
    """subclasses will be converted to dataclasses"""


class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(init=False, primary_key=True)
    name: Mapped[str]
```

----------------------------------------

TITLE: Saving Object and Committing with Scoped Session
DESCRIPTION: Demonstrates saving an object and committing changes using the thread-local session instance returned by the 'scoped_session' factory function (aliased as 'Session').
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#_snippet_17

LANGUAGE: Python
CODE:
```
u = User(name="wendy")

sess = Session()
sess.save(u)
sess.commit()
```

----------------------------------------

TITLE: Updating ORM Objects with RETURNING in SQLAlchemy
DESCRIPTION: Demonstrates how to use the `returning()` method with an ORM-enabled UPDATE statement in SQLAlchemy. This allows fetching the updated ORM objects directly after the update operation, compatible with the 'fetch' synchronization strategy.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#_snippet_28

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import update
>>> stmt = (
...     update(User)
...     .where(User.name == "squidward")
...     .values(fullname="Squidward Tentacles")
...     .returning(User)
... )
>>> result = session.scalars(stmt)
```

----------------------------------------

TITLE: Resolving raiseload by using selectinload
DESCRIPTION: Shows how to satisfy the `lazy="raise_on_sql"` requirement by explicitly loading the relationship using a suitable strategy, like `selectinload`, which prevents the `InvalidRequestError` and fetches the data.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_21

LANGUAGE: python
CODE:
```
# Assuming models with lazy="raise_on_sql" are defined and session is available
from sqlalchemy import select
from sqlalchemy.orm import selectinload

u1 = (
    session.execute(select(User).options(selectinload(User.addresses)))
    .scalars()
    .first()
)
# Accessing the addresses attribute is now valid
# print(u1.addresses) # Example usage
```

LANGUAGE: sql
CODE:
```
SELECT user_account.id
FROM user_account
-- Parameters: ()
SELECT address.user_id AS address_user_id, address.id AS address_id
FROM address
WHERE address.user_id IN (?, ?, ?, ?, ?, ?)
-- Parameters: (1, 2, 3, 4, 5, 6)
```

----------------------------------------

TITLE: Generating and Displaying SQL CREATE TABLE for Annotated Type Mapping (Python/SQL)
DESCRIPTION: Shows the Python code using `sqlalchemy.schema.CreateTable` to generate the SQL `CREATE TABLE` statement for the `SomeClass` ORM mapping. The output demonstrates how the annotated Python types are translated into SQL types with specific parameters.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_19

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy.schema import CreateTable
>>> print(CreateTable(SomeClass.__table__))
{printsql}CREATE TABLE some_table (
  short_name VARCHAR(30) NOT NULL,
  long_name VARCHAR(50) NOT NULL,
  num_value NUMERIC(12, 4) NOT NULL,
  short_num_value NUMERIC(6, 2) NOT NULL,
  PRIMARY KEY (short_name)
)
```

----------------------------------------

TITLE: Configuring Correct Delete-Orphan Cascade on One-to-Many - SQLAlchemy Python
DESCRIPTION: Shows the correct way to configure the 'delete-orphan' cascade by placing it on the one-to-many side of a relationship (`A.bs`). This indicates that when an `A` object is deleted, all associated `B` objects that are only linked to this `A` will also be deleted.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_23

LANGUAGE: python
CODE:
```
class A(Base):
    __tablename__ = "a"

    id = Column(Integer, primary_key=True)

    bs = relationship("B", back_populates="a", cascade="all, delete-orphan")


class B(Base):
    __tablename__ = "b"
    id = Column(Integer, primary_key=True)
    a_id = Column(ForeignKey("a.id"))

    a = relationship("A", back_populates="bs")
```

----------------------------------------

TITLE: Explicit JOIN using join (Core)
DESCRIPTION: Demonstrates using the `join` method on a SQLAlchemy Core `select` statement, where the left side of the JOIN is inferred from the existing FROM clause. The ON clause is inferred based on foreign keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_33

LANGUAGE: Python
CODE:
```
print(select(user_table.c.name, address_table.c.email_address).join(address_table))
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.name, address.email_address
FROM user_account JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: Accessing Autogenerated Primary Keys After Flush (Python)
DESCRIPTION: Shows how to access the `id` attribute on ORM objects after a flush operation. The ORM automatically retrieves database-assigned primary keys for newly inserted rows and updates the objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#_snippet_6

LANGUAGE: Python
CODE:
```
>>> squidward.id
4
>>> krabs.id
5
```

----------------------------------------

TITLE: Defining Relationships in Single Table Inheritance (Python)
DESCRIPTION: Shows how to define relationships between classes involved in single table inheritance in SQLAlchemy Declarative. A Company class has a relationship to the base Employee class, and the Employee class has a foreign key and relationship back to Company. Subclasses Manager and Engineer inherit these relationships.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#_snippet_9

LANGUAGE: Python
CODE:
```
class Company(Base):
    __tablename__ = "company"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    employees: Mapped[List[Employee]] = relationship(back_populates="company")


class Employee(Base):
    __tablename__ = "employee"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    type: Mapped[str]
    company_id: Mapped[int] = mapped_column(ForeignKey("company.id"))
    company: Mapped[Company] = relationship(back_populates="employees")

    __mapper_args__ = {
        "polymorphic_identity": "employee",
        "polymorphic_on": "type",
    }


class Manager(Employee):
    manager_data: Mapped[str] = mapped_column(nullable=True)

    __mapper_args__ = {
        "polymorphic_identity": "manager",
    }


class Engineer(Employee):
    engineer_info: Mapped[str] = mapped_column(nullable=True)

    __mapper_args__ = {
        "polymorphic_identity": "engineer",
    }
```

----------------------------------------

TITLE: Defining ORM Model with Explicit Schema
DESCRIPTION: This snippet demonstrates how to define a SQLAlchemy ORM model (`User`) and explicitly assign it to a database schema (`"per_user"`) using the `__table_args__` attribute. This is a prerequisite for using the `schema_translate_map` feature for multi-tenancy, allowing the ORM table to be associated with a logical schema name.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_11.rst#_snippet_56

LANGUAGE: Python
CODE:
```
class User(Base):
    __tablename__ = "user"
    id = Column(Integer, primary_key=True)

    __table_args__ = {"schema": "per_user"}
```

----------------------------------------

TITLE: Mapping Association Object (SQLAlchemy Python)
DESCRIPTION: SQLAlchemy Declarative ORM class definitions corresponding to the employee, project, and employee_project tables. The EmployeeProject class serves as the association object, defining columns, foreign keys, primary keys, and relationships to both the Employee and Project classes, enabling traversal and data storage on the link.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_26

LANGUAGE: Python
CODE:
```
class Employee(Base):
    __tablename__ = "employee"

    id = Column(Integer, primary_key=True)
    name = Column(String(30))


class Project(Base):
    __tablename__ = "project"

    id = Column(Integer, primary_key=True)
    name = Column(String(30))


class EmployeeProject(Base):
    __tablename__ = "employee_project"

    employee_id = Column(Integer, ForeignKey("employee.id"), primary_key=True)
    project_id = Column(Integer, ForeignKey("project.id"), primary_key=True)
    role_name = Column(String(30))

    project = relationship("Project", backref="project_employees")
    employee = relationship("Employee", backref="employee_projects")
```

----------------------------------------

TITLE: Defining Composite ForeignKeyConstraint - Python
DESCRIPTION: This snippet defines the 'invoice_item' table, demonstrating how to create a composite foreign key using the ForeignKeyConstraint object. This is the only way to define a composite foreign key in SQLAlchemy. It references the composite primary key ('invoice_id', 'ref_num') of the 'invoice' table by listing the foreign key columns and the referenced columns.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_3

LANGUAGE: python
CODE:
```
invoice_item = Table(
    "invoice_item",
    metadata_obj,
    Column("item_id", Integer, primary_key=True),
    Column("item_name", String(60), nullable=False),
    Column("invoice_id", Integer, nullable=False),
    Column("ref_num", Integer, nullable=False),
    ForeignKeyConstraint(
        ["invoice_id", "ref_num"], ["invoice.invoice_id", "invoice.ref_num"]
    ),
)
```

----------------------------------------

TITLE: Validating SQLAlchemy Enum Strings in Python
DESCRIPTION: Shows how to enable in-Python validation for `sqlalchemy.Enum` when defining allowed string values using `validate_strings=True`. It demonstrates that attempting to insert a string not in the defined list results in a `sqlalchemy.exc.StatementError`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_11.rst#_snippet_39

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import Table, MetaData, Column, Enum, create_engine
>>> t = Table(
...     "data",
...     MetaData(),
...     Column("value", Enum("one", "two", "three", validate_strings=True)),
... )
>>> e = create_engine("sqlite://")
>>> t.create(e)
>>> e.execute(t.insert(), {"value": "four"})
Traceback (most recent call last):
  ...
sqlalchemy.exc.StatementError: (exceptions.LookupError)
"four" is not among the defined enum values
[SQL: u'INSERT INTO data (value) VALUES (?)']
[parameters: [{'value': 'four'}]]
```

----------------------------------------

TITLE: Defining SQLAlchemy Hybrid Property (Python)
DESCRIPTION: Illustrates how to use `@hybrid_property` to create an attribute (`fullname`) that concatenates two other mapped columns (`firstname`, `lastname`). This property works at both the Python instance level and the SQL query level.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy.ext.hybrid import hybrid_property


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    firstname = mapped_column(String(50))
    lastname = mapped_column(String(50))

    @hybrid_property
    def fullname(self):
        return self.firstname + " " + self.lastname
```

----------------------------------------

TITLE: "Commit As You Go" with Connection.commit() (Future Style) - SQLAlchemy Core
DESCRIPTION: Illustrates the "commit as you go" pattern available in 2.0 future style (`create_engine(future=True)`). The connection exhibits autobegin behavior, starting a transaction on the first execute, which is then explicitly committed using `Connection.commit()`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_13

LANGUAGE: python
CODE:
```
with engine.connect() as conn:
    conn.execute(some_table.insert().values(foo="bar"))
    conn.execute(some_other_table.insert().values(bat="hoho"))

    conn.commit()
```

----------------------------------------

TITLE: Implementing Backend-Agnostic GUID Type (Python)
DESCRIPTION: This `TypeDecorator` provides a platform-independent GUID type for SQLAlchemy. It uses native database UUID types for PostgreSQL and MSSQL, falling back to `CHAR(32)` for other backends, storing the UUID as a hex string. It handles conversion between Python `uuid.UUID` objects and the database representation.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#_snippet_4

LANGUAGE: python
CODE:
```
from operator import attrgetter
from sqlalchemy.types import TypeDecorator, CHAR
from sqlalchemy.dialects.mssql import UNIQUEIDENTIFIER
from sqlalchemy.dialects.postgresql import UUID
import uuid


class GUID(TypeDecorator):
    """Platform-independent GUID type.

    Uses PostgreSQL's UUID type or MSSQL's UNIQUEIDENTIFIER,
    otherwise uses CHAR(32), storing as stringified hex values.

    """

    impl = CHAR
    cache_ok = True

    _default_type = CHAR(32)
    _uuid_as_str = attrgetter("hex")

    def load_dialect_impl(self, dialect):
        if dialect.name == "postgresql":
            return dialect.type_descriptor(UUID())
        elif dialect.name == "mssql":
            return dialect.type_descriptor(UNIQUEIDENTIFIER())
        else:
            return dialect.type_descriptor(self._default_type)

    def process_bind_param(self, value, dialect):
        if value is None or dialect.name in ("postgresql", "mssql"):
            return value
        else:
            if not isinstance(value, uuid.UUID):
                value = uuid.UUID(value)
            return self._uuid_as_str(value)

    def process_result_value(self, value, dialect):
        if value is None:
            return value
        else:
            if not isinstance(value, uuid.UUID):
                value = uuid.UUID(value)
            return value
```

----------------------------------------

TITLE: Defining SQLAlchemy Relationship with Filtered Join (Python)
DESCRIPTION: This snippet demonstrates defining a SQLAlchemy ORM relationship (`boston_addresses`) between `User` and `Address` classes. It uses the `primaryjoin` argument with a string expression to include an additional filtering condition (`Address.city=='Boston'`) alongside the standard foreign key join (`User.id==Address.user_id`). This limits the loaded `Address` objects to only those located in Boston.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from sqlalchemy import Integer, ForeignKey, String, Column
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String)
    boston_addresses = relationship(
        "Address",
        primaryjoin="and_(User.id==Address.user_id, Address.city=='Boston')",
    )


class Address(Base):
    __tablename__ = "address"
    id = mapped_column(Integer, primary_key=True)
    user_id = mapped_column(Integer, ForeignKey("user.id"))

    street = mapped_column(String)
    city = mapped_column(String)
    state = mapped_column(String)
    zip = mapped_column(String)
```

----------------------------------------

TITLE: Deleting Object via Collection Removal with Cascade (Python)
DESCRIPTION: Illustrates how removing an object from a collection configured with the `delete-orphan` cascade automatically marks the object for deletion in the database upon flushing the session, effectively replacing the need for explicit `session.delete()`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_20

LANGUAGE: Python
CODE:
```
del user.addresses[1]
session.flush()
```

----------------------------------------

TITLE: Avoid Redundant Joins with Explicit Join and joinedload
DESCRIPTION: Shows an example where explicitly joining a table (`.join()`) and then also applying `joinedload` to the same relationship results in an unnecessary duplicate join in the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_18

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import joinedload
from sqlalchemy import select

stmt = (
    select(Address)
    .join(Address.user)
    .where(User.name == "pkrabs")
    .options(joinedload(Address.user))
    .order_by(Address.id)
)

# Print the statement to see the generated SQL
print(stmt)
```

LANGUAGE: sql
CODE:
```
SELECT address.id, address.email_address, address.user_id,
user_account_1.id AS id_1, user_account_1.name, user_account_1.fullname
FROM address JOIN user_account ON user_account.id = address.user_id
LEFT OUTER JOIN user_account AS user_account_1 ON user_account_1.id = address.user_id
WHERE user_account.name = :name_1 ORDER BY address.id
```

----------------------------------------

TITLE: Executing SQLAlchemy Core Update with Multiple Parameters (executemany)
DESCRIPTION: Shows how to structure an `UPDATE` statement using `bindparam` for both `WHERE` and `SET` clauses, enabling efficient execution of the same statement with different data sets. It demonstrates executing this statement within a transaction using `conn.execute()` and a list of parameter dictionaries.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from sqlalchemy import bindparam
stmt = (
    update(user_table)
    .where(user_table.c.name == bindparam("oldname"))
    .values(name=bindparam("newname"))
)
with engine.begin() as conn:
    conn.execute(
        stmt,
        [
            {"oldname": "jack", "newname": "ed"},
            {"oldname": "wendy", "newname": "mary"},
            {"oldname": "jim", "newname": "jake"},
        ],
    )
```

LANGUAGE: SQL
CODE:
```
BEGIN (implicit)
UPDATE user_account SET name=? WHERE user_account.name = ?
[...] [('ed', 'jack'), ('mary', 'wendy'), ('jake', 'jim')]
<sqlalchemy.engine.cursor.CursorResult object at 0x...>
COMMIT
```

----------------------------------------

TITLE: SQLAlchemy: 2.0 Recommended Execute Parameter Styles
DESCRIPTION: Examples of the recommended parameter passing styles for `Connection.execute` in SQLAlchemy 2.0, using `text()` for SQL strings, a single dictionary for single execution, and a list of dictionaries for `executemany` operations.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_26

LANGUAGE: Python
CODE:
```
connection = engine.connect()

from sqlalchemy import text

result = connection.execute(text("select * from table"))

# pass a single dictionary for single statement execution
result = connection.execute(table.insert(), {"x": 10, "y": 5})

# pass a list of dictionaries for executemany
result = connection.execute(
    table.insert(), [{"x": 10, "y": 5}, {"x": 15, "y": 12}, {"x": 9, "y": 8}]
)
```

----------------------------------------

TITLE: Joining Session into External Transaction for Testing (Python)
DESCRIPTION: Presents a common testing pattern where a SQLAlchemy ORM session is configured to operate within an existing database connection and transaction managed externally (e.g., by a test framework's setup). Using `join_transaction_mode="create_savepoint"` allows ORM session `commit()` and `rollback()` calls to use savepoints, enabling the outer connection's transaction to be ultimately rolled back in the test teardown, discarding all changes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_26

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from unittest import TestCase

# global application scope.  create Session class, engine
Session = sessionmaker()

engine = create_engine("postgresql+psycopg2://...")


class SomeTest(TestCase):
    def setUp(self):
        # connect to the database
        self.connection = engine.connect()

        # begin a non-ORM transaction
        self.trans = self.connection.begin()

        # bind an individual Session to the connection, selecting
        # "create_savepoint" join_transaction_mode
        self.session = Session(
            bind=self.connection, join_transaction_mode="create_savepoint"
        )

    def test_something(self):
        # use the session in tests.

        self.session.add(Foo())
        self.session.commit()

    def test_something_with_rollbacks(self):
        self.session.add(Bar())
        self.session.flush()
        self.session.rollback()

        self.session.add(Foo())
        self.session.commit()

    def tearDown(self):
        self.session.close()

        # rollback - everything that happened with the
        # Session above (including calls to commit())
        # is rolled back.
        self.trans.rollback()

        # return connection to the Engine
        self.connection.close()
```

----------------------------------------

TITLE: Streaming Results and Processing in Chunks with partitions() - SQLAlchemy Python
DESCRIPTION: Executes a Core select statement with streaming enabled via execution_options and iterates over the result set in chunks of a specified size (e.g., 500 records) using the Result.partitions() method.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_44

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    result = conn.execute(
        table.select().order_by(table.c.id),
        execution_options={"stream_results": True},
    )
    for chunk in result.partitions(500):
        # process up to 500 records
        ...
```

----------------------------------------

TITLE: Resolving SQLAlchemy Relationship Conflict with back_populates (Python)
DESCRIPTION: Demonstrates how to resolve the relationship conflict warning by adding the `back_populates` parameter to both `Parent.children` and `Child.parent` relationships. This explicitly links the two sides of the relationship, allowing SQLAlchemy to coordinate column writes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_31

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent"
    id = Column(Integer, primary_key=True)
    children = relationship("Child", back_populates="parent")


class Child(Base):
    __tablename__ = "child"
    id = Column(Integer, primary_key=True)
    parent_id = Column(ForeignKey("parent.id"))
    parent = relationship("Parent", back_populates="children")
```

----------------------------------------

TITLE: Using SQLAlchemy Select and Subquery with Join (Correct)
DESCRIPTION: Demonstrates the recommended SQLAlchemy 2.0 style for creating a subquery from a select statement and then joining another table to that subquery. It shows how to explicitly create the subquery using `.subquery()` before referencing it in the join.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_10

LANGUAGE: Python
CODE:
```
sq1 = select(user.c.id, user.c.name).subquery()
stmt2 = select(addresses, sq1).select_from(addresses.join(sq1))
```

----------------------------------------

TITLE: Select Specific Columns from Core Table
DESCRIPTION: Demonstrates selecting specific columns from a Core `Table` by passing `Column` objects accessed via the `.c` attribute to `select()`. The FROM clause is inferred from the columns.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_4

LANGUAGE: Python
CODE:
```
print(select(user_table.c.name, user_table.c.fullname))
```

----------------------------------------

TITLE: Creating Greater Than Condition with SQLAlchemy Column (Python)
DESCRIPTION: Demonstrates using the Python `>` operator with a SQLAlchemy `Column` object to create a SQL greater than expression. Prints the resulting SQL fragment. Requires `address_table`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_21

LANGUAGE: Python
CODE:
```
print(address_table.c.user_id > 10)
```

----------------------------------------

TITLE: Defining Models with Association Proxy SQLAlchemy Python
DESCRIPTION: Defines the `User` and `Keyword` ORM classes with a many-to-many relationship mediated by `user_keyword_table`. The `User` class includes an `association_proxy` called `keywords` that provides a simplified view of the `keyword` attribute from the related `Keyword` objects, allowing direct manipulation via the proxy.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from __future__ import annotations

from typing import Final
from typing import List

from sqlalchemy import Column
from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy import Table
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy.ext.associationproxy import AssociationProxy


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(64))
    kw: Mapped[List[Keyword]] = relationship(secondary=lambda: user_keyword_table)

    def __init__(self, name: str):
        self.name = name

    # proxy the 'keyword' attribute from the 'kw' relationship
    keywords: AssociationProxy[List[str]] = association_proxy("kw", "keyword")


class Keyword(Base):
    __tablename__ = "keyword"
    id: Mapped[int] = mapped_column(primary_key=True)
    keyword: Mapped[str] = mapped_column(String(64))

    def __init__(self, keyword: str):
        self.keyword = keyword


user_keyword_table: Final[Table] = Table(
    "user_keyword",
    Base.metadata,
    Column("user_id", Integer, ForeignKey("user.id"), primary_key=True),
    Column("keyword_id", Integer, ForeignKey("keyword.id"), primary_key=True),
)
```

----------------------------------------

TITLE: Selecting Aggregate Function with select_from (Core)
DESCRIPTION: Illustrates selecting an aggregate function like `count(*)` using `sqlalchemy.func` and explicitly specifying the table to select FROM using `select_from`, as the columns clause doesn't provide enough information for inference.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_35

LANGUAGE: Python
CODE:
```
from sqlalchemy import func
print(select(func.count("*")).select_from(user_table))
```

LANGUAGE: SQL
CODE:
```
SELECT count(:count_2) AS count_1
FROM user_account
```

----------------------------------------

TITLE: Creating Oracle Engines with Various Drivers - Python
DESCRIPTION: Provides examples of creating SQLAlchemy Engines for Oracle Database, showing connections using the preferred oracledb driver and the historical cx_oracle driver, including connecting via host/port/service_name or tnsalias.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_7

LANGUAGE: Python
CODE:
```
engine = create_engine(
    "oracle+oracledb://scott:tiger@127.0.0.1:1521/?service_name=freepdb1"
)
```

LANGUAGE: Python
CODE:
```
engine = create_engine("oracle+oracledb://scott:tiger@tnsalias")
```

LANGUAGE: Python
CODE:
```
engine = create_engine("oracle://scott:tiger@127.0.0.1:1521/?service_name=freepdb1")
```

LANGUAGE: Python
CODE:
```
engine = create_engine("oracle+cx_oracle://scott:tiger@tnsalias")
```

----------------------------------------

TITLE: Migrating Chained Joins - SQLAlchemy 1.x/2.0 ORM Query
DESCRIPTION: Provides the recommended migration path for the deprecated chained join syntax in SQLAlchemy 1.x, showing how to use individual `join` calls for 1.x/2.0 compatibility.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_77

LANGUAGE: Python
CODE:
```
q = session.query(User).join(User.orders).join(Order.items).join(Item.keywords)
```

----------------------------------------

TITLE: Mapping SQL Expression with SQLAlchemy column_property (Python)
DESCRIPTION: Illustrates how to use `column_property` to map a SQL expression (concatenating `firstname` and `lastname`) directly as a loadable attribute on the `User` class. Unlike hybrids, this value is loaded eagerly with the main object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import column_property


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    firstname = mapped_column(String(50))
    lastname = mapped_column(String(50))
    fullname = column_property(firstname + " " + lastname)
```

----------------------------------------

TITLE: Stringifying Select Statement using str() - Python
DESCRIPTION: Demonstrates the simplest way to render a SQLAlchemy `select` statement into its SQL string representation using the built-in `str()` function or implicitly via the `print()` function. This is suitable for basic statements without dialect-specific elements.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#_snippet_0

LANGUAGE: python
CODE:
```
from sqlalchemy import table, column, select
t = table("my_table", column("x"))
statement = select(t)
print(str(statement))
```

LANGUAGE: sql
CODE:
```
SELECT my_table.x
FROM my_table
```

----------------------------------------

TITLE: Ordering and Grouping by Label (SQLAlchemy Python)
DESCRIPTION: Shows how to reference a column or labeled expression from the `SELECT` clause in the `GROUP BY` and `ORDER BY` clauses using its string name in SQLAlchemy Core. Demonstrates using `desc` with a label.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_43

LANGUAGE: Python
CODE:
```
from sqlalchemy import func, desc
stmt = (
    select(Address.user_id, func.count(Address.id).label("num_addresses"))
    .group_by("user_id")
    .order_by("user_id", desc("num_addresses"))
)
print(stmt)
```

----------------------------------------

TITLE: Configuring Relationship Collection as List with Mapped in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates how to configure a one-to-many relationship to use a Python list as its collection type in a Declarative mapping using the `Mapped` annotation. The `Parent` class has a relationship named `children` that will hold `Child` objects in a list.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#_snippet_0

LANGUAGE: python
CODE:
```
from sqlalchemy import ForeignKey

from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class Parent(Base):
    __tablename__ = "parent"

    parent_id: Mapped[int] = mapped_column(primary_key=True)

    # use a list
    children: Mapped[list["Child"]] = relationship()


class Child(Base):
    __tablename__ = "child"

    child_id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent.id"))
```

----------------------------------------

TITLE: Defining Query Expression Attribute - SQLAlchemy ORM - Python
DESCRIPTION: Defines an ORM mapped class (`User`) with a special attribute (`book_count`) using the `query_expression()` directive. This attribute is not mapped to a database column but serves as a placeholder to receive the result of an arbitrary SQL expression at query time via `with_expression`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#_snippet_24

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import query_expression
class User(Base):
    __tablename__ = "user_account"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    fullname: Mapped[Optional[str]]
    book_count: Mapped[int] = query_expression()

    def __repr__(self) -> str:
        return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"
```

----------------------------------------

TITLE: Disabling Cascade Backrefs with Future Mode - SQLAlchemy ORM Python
DESCRIPTION: This snippet demonstrates how setting `future=True` on the `sessionmaker` (enabling 2.0-style behavior) disables the `cascade_backrefs` behavior. Assigning an object (`u1`) already in the session to a backref attribute (`a1.user = u1`) will *not* cascade the object (`a1`) on the other side of the relationship into the session. Requires SQLAlchemy 1.4+ and mapped classes with a bidirectional relationship. Input is a session configured with `future=True` and objects; output is the `a1` object *not* being added to the session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_65

LANGUAGE: Python
CODE:
```
Session = sessionmaker(engine, future=True)

with Session() as session:
    u1 = User()
    session.add(u1)

    a1 = Address()
    a1.user = u1  # <--- will not add "a1" to the Session
```

----------------------------------------

TITLE: Specifying Backref Arguments Using backref() Function (Python)
DESCRIPTION: This snippet shows how to use the `sqlalchemy.orm.backref()` function within the `backref` parameter of a `relationship`. This allows specifying additional arguments for the relationship that is automatically generated on the related class. The example uses `backref("user", lazy="joined")` to configure the automatically created `Address.user` relationship with a `lazy="joined"` loading strategy.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/backref.rst#_snippet_3

LANGUAGE: python
CODE:
```
# <other imports>
from sqlalchemy.orm import backref


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String)

    addresses = relationship(
        "Address",
        backref=backref("user", lazy="joined"),
    )
```

----------------------------------------

TITLE: Select All Columns from Core Table
DESCRIPTION: Shows the simplest form of `select()` using a Core `Table` object (`user_table`), which selects all columns from that table and infers the FROM clause.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_3

LANGUAGE: Python
CODE:
```
print(select(user_table))
```

----------------------------------------

TITLE: Querying with GROUP BY and HAVING (SQLAlchemy Python)
DESCRIPTION: Illustrates selecting data with aggregate functions, applying `GROUP BY` on non-aggregated columns, and filtering results based on aggregate values using the `HAVING` clause in SQLAlchemy Core. Requires an active engine connection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_42

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    result = conn.execute(
        select(User.name, func.count(Address.id).label("count"))
        .join(Address)
        .group_by(User.name)
        .having(func.count(Address.id) > 1)
    )
    print(result.all())
```

----------------------------------------

TITLE: Accessing SQLAlchemy Inspector in AsyncIO via run_sync - Python
DESCRIPTION: This snippet demonstrates how to use the synchronous SQLAlchemy inspector (`inspect`) within an asyncio application context. Since the inspector object itself is not awaitable, access to its methods is performed within the `run_sync` method of the `AsyncConnection`, operating on the synchronous connection attribute.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_42

LANGUAGE: Python
CODE:
```
async def async_main():
    async with engine.connect() as conn:
        tables = await conn.run_sync(
            lambda sync_conn: inspect(sync_conn).get_table_names()
        )
```

----------------------------------------

TITLE: Checking Collection After Relationship Assignment - SQLAlchemy Python
DESCRIPTION: After creating the second `Address` and assigning its `user` attribute (implicitly via constructor), this snippet shows that the `addresses` collection on the `User` object is automatically updated to include the new address.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_5

LANGUAGE: Python
CODE:
```
>>> u1.addresses
[Address(id=None, email_address='pearl.krabs@gmail.com'), Address(id=None, email_address='pearl@aol.com')]
```

----------------------------------------

TITLE: Save-Update Cascade: Adding Parent with Children
DESCRIPTION: Illustrates the default `save-update` cascade behavior. When a parent object (`user1`) with associated child objects (`address1`, `address2`) is added to a `Session`, the child objects are automatically cascaded and also added to the same session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_2

LANGUAGE: Python
CODE:
```
>>> user1 = User()
>>> address1, address2 = Address(), Address()
>>> user1.addresses = [address1, address2]

>>> sess = Session()
>>> sess.add(user1)
>>> address1 in sess
True
```

----------------------------------------

TITLE: Defining Basic One-to-Many (Annotated Declarative) - Python
DESCRIPTION: This example shows a simple, non-bidirectional One-to-Many relationship configuration using annotated Declarative. The foreign key resides on the child table, and the relationship is declared on the parent class to reference a collection of children.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_5

LANGUAGE: Python
CODE:
```
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship()


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent_table.id"))
```

----------------------------------------

TITLE: SQLAlchemy 1.4 / 2.0 Selecting Multiple Aliased Entities with Improved Labeling
DESCRIPTION: Demonstrates using aliased() with the 2.0-style select() construct to select multiple entities (User, Address) from a subquery. This example highlights the improved labeling feature in SQLAlchemy 1.4+ and 2.0, which automatically disambiguates columns with the same name from different tables without requiring explicit labeling.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_88

LANGUAGE: Python
CODE:
```
subq = select(User, Address).join(User.addresses).subquery()

ua = aliased(User, subq)
aa = aliased(Address, subq)

stmt = select(ua, aa).order_by(aa.email_address)
result = session.execute(stmt)
```

----------------------------------------

TITLE: Comparing Inequality SQLAlchemy Python
DESCRIPTION: Demonstrates using the Python `!=` operator on a SQLAlchemy `column` object to generate a SQL inequality expression. The output shows the generated SQL with a bound parameter.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_1

LANGUAGE: Python
CODE:
```
print(column("x") != 5)
```

----------------------------------------

TITLE: Defining Unidirectional Many-to-Many using Association Table - Python
DESCRIPTION: This example shows how to set up a unidirectional Many-to-Many relationship using an association table. The association table is defined as a Core `Table` with foreign keys linking to the two related entities, and it is specified using the `secondary` parameter in the `relationship`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_13

LANGUAGE: python
CODE:
```
from __future__ import annotations

    from sqlalchemy import Column
    from sqlalchemy import Table
    from sqlalchemy import ForeignKey
    from sqlalchemy import Integer
    from sqlalchemy.orm import Mapped
    from sqlalchemy.orm import mapped_column
    from sqlalchemy.orm import DeclarativeBase
    from sqlalchemy.orm import relationship


    class Base(DeclarativeBase):
        pass


    # note for a Core table, we use the sqlalchemy.Column construct,
    # not sqlalchemy.orm.mapped_column
    association_table = Table(
        "association_table",
        Base.metadata,
        Column("left_id", ForeignKey("left_table.id")),
        Column("right_id", ForeignKey("right_table.id")),
    )


    class Parent(Base):
        __tablename__ = "left_table"

        id: Mapped[int] = mapped_column(primary_key=True)
        children: Mapped[List[Child]] = relationship(secondary=association_table)


    class Child(Base):
        __tablename__ = "right_table"

        id: Mapped[int] = mapped_column(primary_key=True)
```

----------------------------------------

TITLE: Creating SQLAlchemy MSSQL Engine with connect_args & URL (Python)
DESCRIPTION: Initializes a SQLAlchemy engine for MSSQL using pyodbc. This example demonstrates that both URL query parameters (like `driver`) and the `connect_args` dictionary (like `timeout`) can be used concurrently to configure the DBAPI connection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_13

LANGUAGE: python
CODE:
```
engine = create_engine(
    "mssql+pyodbc://user:pass@sqlsrvr?driver=ODBC+Driver+13+for+SQL+Server",
    connect_args={"timeout": 30},
)
```

----------------------------------------

TITLE: Building SELECT Statement with SQLAlchemy Lambda (Python)
DESCRIPTION: Defines a Python function `run_my_statement` that constructs a cached SELECT statement using `lambda_stmt`. It adds WHERE and ORDER BY clauses using lambda functions and the `+=` operator. The function executes the statement via a connection and returns the result. This example highlights how the lambda functions are evaluated once for caching and subsequent calls reuse the compiled SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_42

LANGUAGE: python
CODE:
```
from sqlalchemy import lambda_stmt


def run_my_statement(connection, parameter):
    stmt = lambda_stmt(lambda: select(table))
    stmt += lambda s: s.where(table.c.col == parameter)
    stmt += lambda s: s.order_by(table.c.id)

    return connection.execute(stmt)


with engine.connect() as conn:
    result = run_my_statement(some_connection, "some parameter")
```

----------------------------------------

TITLE: Joining Relationship with Aliased Target using of_type - SQLAlchemy ORM Python
DESCRIPTION: Demonstrates joining a relationship (`User.addresses`) multiple times to different aliases of the target entity (`Address`) using the `of_type` modifier. This allows filtering based on conditions applied to each specific alias of the joined entity.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_27

LANGUAGE: Python
CODE:
```
print(
    select(User)
    .join(User.addresses.of_type(address_alias_1))
    .where(address_alias_1.email_address == "patrick@aol.com")
    .join(User.addresses.of_type(address_alias_2))
    .where(address_alias_2.email_address == "patrick@gmail.com")
)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
JOIN address AS address_1 ON user_account.id = address_1.user_id
JOIN address AS address_2 ON user_account.id = address_2.user_id
WHERE address_1.email_address = :email_address_1
AND address_2.email_address = :email_address_2
```

----------------------------------------

TITLE: Correctly Dropping Table after Query - SQLAlchemy Python
DESCRIPTION: Provides the solution to the hanging drop issue by ensuring that all active connections and result sets are fully consumed and closed before attempting to drop the table. This releases any held locks.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/metadata_schema.rst#_snippet_1

LANGUAGE: Python
CODE:
```
connection = engine.connect()
result = connection.execute(mytable.select())

# fully read result sets
result.fetchall()

# close connections
connection.close()

# now locks are removed
mytable.drop(engine)
```

----------------------------------------

TITLE: Chained Joined Eager Load with Inner Join and Resulting SQL
DESCRIPTION: Demonstrates chaining `joinedload` calls where a later link (`Address.widgets`) uses `innerjoin=True`. Shows the Python code to construct the query and the resulting SQL, illustrating the right-nested join structure produced by SQLAlchemy.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_21

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import select
>>> from sqlalchemy.orm import joinedload
>>> stmt = select(User).options(
...     joinedload(User.addresses).joinedload(Address.widgets, innerjoin=True)
... )
>>> results = session.scalars(stmt).unique().all()
```

LANGUAGE: SQL
CODE:
```
SELECT
    widgets_1.id AS widgets_1_id,
    widgets_1.name AS widgets_1_name,
    addresses_1.id AS addresses_1_id,
    addresses_1.email_address AS addresses_1_email_address,
    addresses_1.user_id AS addresses_1_user_id,
    users.id AS users_id, users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
LEFT OUTER JOIN (
    addresses AS addresses_1 JOIN widgets AS widgets_1 ON
    addresses_1.widget_id = widgets_1.id
) ON users.id = addresses_1.user_id
```

----------------------------------------

TITLE: Selecting ORM Entities with Default Naming (SQLAlchemy ORM)
DESCRIPTION: Demonstrates selecting full User and Address entities using `select` and accessing them in the result row by their class names. Includes the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_5

LANGUAGE: Python
CODE:
```
stmt = select(User, Address).join(User.addresses).order_by(User.id, Address.id)
for row in session.execute(stmt):
    print(f"{row.User.name} {row.Address.email_address}")
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname,
address.id AS id_1, address.user_id, address.email_address
FROM user_account JOIN address ON user_account.id = address.user_id
ORDER BY user_account.id, address.id
```

----------------------------------------

TITLE: Upsert with RETURNING using dialect-specific Insert in SQLAlchemy ORM
DESCRIPTION: Illustrates performing an upsert (insert or update on conflict) operation using a dialect-specific insert construct (here, for SQLite). The statement uses values() with a list of dictionaries, on_conflict_do_update() to specify the conflict resolution, and returning() to retrieve the affected ORM entities. The operation is executed via session.scalars().
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_26

LANGUAGE: Python
CODE:
```
from sqlalchemy.dialects.sqlite import insert as sqlite_upsert
stmt = sqlite_upsert(User).values(
    [
        {"name": "spongebob", "fullname": "Spongebob Squarepants"},
        {"name": "sandy", "fullname": "Sandy Cheeks"},
        {"name": "patrick", "fullname": "Patrick Star"},
        {"name": "squidward", "fullname": "Squidward Tentacles"},
        {"name": "ehkrabs", "fullname": "Eugene H. Krabs"},
    ]
)
stmt = stmt.on_conflict_do_update(
    index_elements=[User.name], set_=dict(fullname=stmt.excluded.fullname)
)
result = session.scalars(stmt.returning(User))
print(result.all())
```

----------------------------------------

TITLE: Running Sync ORM Code with AsyncSession.run_sync - SQLAlchemy Python
DESCRIPTION: Illustrates how to execute traditional synchronous SQLAlchemy ORM code, including lazy loading and legacy Query API use, within an asyncio application by wrapping it in a function and calling `await session.run_sync()`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#_snippet_1

LANGUAGE: python
CODE:
```
    import asyncio

    from sqlalchemy import select
    from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine


    def fetch_and_update_objects(session):
        """run traditional sync-style ORM code in a function that will be
        invoked within an awaitable.

        """

        # the session object here is a traditional ORM Session.
        # all features are available here including legacy Query use.

        stmt = select(A)

        result = session.execute(stmt)
        for a1 in result.scalars():
            print(a1)

            # lazy loads
            for b1 in a1.bs:
                print(b1)

        # legacy Query use
        a1 = session.query(A).order_by(A.id).first()

        a1.data = "new data"


    async def async_main():
        engine = create_async_engine(
            "postgresql+asyncpg://scott:tiger@localhost/test",
            echo=True,
        )
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
            await conn.run_sync(Base.metadata.create_all)

        async with AsyncSession(engine) as session:
            async with session.begin():
                session.add_all(
                    [
                        A(bs=[B(), B()], data="a1"),
                        A(bs=[B()], data="a2"),
                        A(bs=[B(), B()], data="a3"),
                    ]
                )

            await session.run_sync(fetch_and_update_objects)

            await session.commit()

        # for AsyncEngine created in function scope, close and
        # clean-up pooled connections
        await engine.dispose()


    asyncio.run(async_main())
```

----------------------------------------

TITLE: Map Multiple Reflected Tables with MetaData.reflect - SQLAlchemy Python
DESCRIPTION: Shows how to reflect multiple tables from a database using `MetaData.reflect` and then map declarative classes to these reflected tables using the `__table__` attribute, accessing tables from `Base.metadata.tables`. Also requires database connectivity during class declaration.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_66

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy import Table
from sqlalchemy.orm import DeclarativeBase

engine = create_engine("postgresql+psycopg2://user:pass@hostname/my_existing_database")


class Base(DeclarativeBase):
    pass


Base.metadata.reflect(engine)


class MyClass(Base):
    __table__ = Base.metadata.tables["mytable"]
```

----------------------------------------

TITLE: Viewing Results of Entity Selection with result.all()
DESCRIPTION: Shows the typical output format when calling `result.all()` on a `Result` object obtained from selecting an entire ORM entity using `session.execute`. The result is a list of tuples, where each tuple contains a single element which is the ORM entity instance.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_3

LANGUAGE: python
CODE:
```
result.all()
```

----------------------------------------

TITLE: Correcting numpy.int64 usage via type conversion - Python
DESCRIPTION: Presents the recommended solution for using NumPy datatypes with SQLAlchemy. It demonstrates converting the NumPy value (`numpy.int64` in this case) to a native Python type (`int`) using the `int()` function before passing it to session operations or expression comparisons. This ensures compatibility with DBAPIs and correct expression evaluation.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/thirdparty.rst#_snippet_2

LANGUAGE: Python
CODE:
```
data = numpy.int64(10)

session.add(A(data=int(data)))

result = session.execute(select(A.data).where(int(data) == A.data))

session.commit()
```

----------------------------------------

TITLE: Ordering Results Descending (ORM) - SQLAlchemy
DESCRIPTION: Shows how to order results in descending order using the desc() modifier on an ORM-mapped attribute. It selects from the User entity and orders by the fullname attribute in descending order.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_40

LANGUAGE: Python
CODE:
```
print(select(User).order_by(User.fullname.desc()))
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account ORDER BY user_account.fullname DESC
```

----------------------------------------

TITLE: Configuring Joined Eager Loading at Mapping Level in SQLAlchemy ORM
DESCRIPTION: Illustrates how to configure joined eager loading as the default loading strategy for a relationship (`Address.user`) directly within the ORM mapping definition using `lazy="joined"`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_17

LANGUAGE: python
CODE:
```
class Address(Base):
    # ...

    user: Mapped[User] = relationship(lazy="joined")
```

----------------------------------------

TITLE: Configuring Constraint Naming Convention in SQLAlchemy
DESCRIPTION: Illustrates setting up a naming convention dictionary for constraints and indexes. This dictionary is passed to the `MetaData` object's `naming_convention` argument. The convention uses string templates to generate names based on constraint properties.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_12

LANGUAGE: Python
CODE:
```
convention = {
    "ix": "ix_%(column_0_label)s",
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s",
}

metadata_obj = MetaData(naming_convention=convention)
```

----------------------------------------

TITLE: Querying Companies with Technologists and Loading Executives (SQLAlchemy Python)
DESCRIPTION: Demonstrates querying `Company` instances using SQLAlchemy ORM. It joins `Company` with `Technologist`, filters based on `Technologist` competency, and uses `selectinload` to eagerly load the associated `Executive` instances for the retrieved companies.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#_snippet_15

LANGUAGE: Python
CODE:
```
session.scalars(
    select(Company)
    .join(Company.technologists)
    .where(Technologist.competency.ilike("%java%"))
    .options(selectinload(Company.executives))
).all()
```

----------------------------------------

TITLE: Defining SQLAlchemy ORM Single-Table Inheritance Mappings
DESCRIPTION: Defines SQLAlchemy ORM classes `Widget`, `FooWidget` (subclass), and `Related` to demonstrate single-table inheritance and relationships used in join examples.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#_snippet_86

LANGUAGE: Python
CODE:
```
class Widget(Base):
    __tablename__ = "widget"
    id = Column(Integer, primary_key=True)
    type = Column(String)
    related_id = Column(ForeignKey("related.id"))
    related = relationship("Related", backref="widget")
    __mapper_args__ = {"polymorphic_on": type}


class FooWidget(Widget):
    __mapper_args__ = {"polymorphic_identity": "foo"}


class Related(Base):
    __tablename__ = "related"
    id = Column(Integer, primary_key=True)
```

----------------------------------------

TITLE: Generated SQL for Select with Labeled Expression
DESCRIPTION: Shows the SQL generated by SQLAlchemy for a `Select` statement that includes a labeled expression concatenating a literal string and a column. Also includes the execution output.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_14

LANGUAGE: SQL
CODE:
```
BEGIN (implicit)
SELECT ? || user_account.name AS username
FROM user_account ORDER BY user_account.name
[...] ('Username: ',){stop}
Username: patrick
Username: sandy
Username: spongebob
{execsql}ROLLBACK
```

----------------------------------------

TITLE: Selecting Mixed ORM Columns and Entities - SQLAlchemy Python
DESCRIPTION: Demonstrates executing a SELECT statement that includes both specific ORM entity columns (`User.name`) and full ORM entities (`Address`). The statement includes a WHERE clause for joining and an ORDER BY clause. All resulting rows are fetched.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_11

LANGUAGE: Python
CODE:
```
session.execute(
    select(User.name, Address).where(User.id == Address.user_id).order_by(Address.id)
).all()
```

----------------------------------------

TITLE: Column Declarations in Mixin (mapped_column) in Python
DESCRIPTION: Illustrates declaring columns within a Declarative mixin `TimestampMixin` using only the `mapped_column` construct. It shows variations: `created_at` without `Mapped` annotation and `updated_at` with `Mapped` annotation.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_6

LANGUAGE: Python
CODE:
```
class TimestampMixin:
    created_at = mapped_column(default=func.now())
    updated_at: Mapped[datetime] = mapped_column()
```

----------------------------------------

TITLE: Applying Naming Conventions with Declared Table Arguments (Python)
DESCRIPTION: This Python snippet demonstrates setting up constraint naming conventions via `MetaData(naming_convention=...)` and using `declared_attr.__table_args__` in an abstract base class (`MyAbstractBase`) to define shared constraints (`UniqueConstraint`, `CheckConstraint`). Concrete classes (`ModelAlpha`, `ModelBeta`) inheriting the base will have constraints generated with names following the convention.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_21

LANGUAGE: python
CODE:
```
    from uuid import UUID

    from sqlalchemy import CheckConstraint
    from sqlalchemy import create_engine
    from sqlalchemy import MetaData
    from sqlalchemy import UniqueConstraint
    from sqlalchemy.orm import DeclarativeBase
    from sqlalchemy.orm import declared_attr
    from sqlalchemy.orm import Mapped
    from sqlalchemy.orm import mapped_column

    constraint_naming_conventions = {
        "ix": "ix_%(column_0_label)s",
        "uq": "uq_%(table_name)s_%(column_0_name)s",
        "ck": "ck_%(table_name)s_%(constraint_name)s",
        "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
        "pk": "pk_%(table_name)s",
    }


    class Base(DeclarativeBase):
        metadata = MetaData(naming_convention=constraint_naming_conventions)


    class MyAbstractBase(Base):
        __abstract__ = True

        @declared_attr.directive
        def __table_args__(cls):
            return (
                UniqueConstraint("uuid"),
                CheckConstraint("x > 0 OR y < 100", name="xy_chk"),
            )

        id: Mapped[int] = mapped_column(primary_key=True)
        uuid: Mapped[UUID]
        x: Mapped[int]
        y: Mapped[int]


    class ModelAlpha(MyAbstractBase):
        __tablename__ = "alpha"


    class ModelBeta(MyAbstractBase):
        __tablename__ = "beta"
```

----------------------------------------

TITLE: Multi-Level contains_eager Path - SQLAlchemy Python
DESCRIPTION: Illustrates how to use `contains_eager` to eagerly load a relationship across multiple levels (e.g., `User` -> `Order` -> `Item`) by chaining `contains_eager` options.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_39

LANGUAGE: python
CODE:
```
stmt = select(User).options(contains_eager(User.orders).contains_eager(Order.items))
```

----------------------------------------

TITLE: Using Python & Operator for AND - Python/SQLAlchemy
DESCRIPTION: Demonstrates using the overloaded Python binary `&` operator to construct a SQL `AND` clause between two expressions. It highlights the requirement for parentheses around the operands due to Python's operator precedence. The corresponding generated SQL query is included.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_22

LANGUAGE: Python
CODE:
```
print((column("x") == 5) & (column("y") == 10))
```

LANGUAGE: SQL
CODE:
```
x = :x_1 AND y = :y_1
```

----------------------------------------

TITLE: Creating and Executing a SQLAlchemy UNION ALL
DESCRIPTION: Illustrates how to combine multiple SELECT statements using the UNION ALL operation in SQLAlchemy. It shows creating two select statements, combining them with `union_all()`, and executing the resulting compound select using a database connection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_71

LANGUAGE: python
CODE:
```
from sqlalchemy import union_all
stmt1 = select(user_table).where(user_table.c.name == "sandy")
stmt2 = select(user_table).where(user_table.c.name == "spongebob")
u = union_all(stmt1, stmt2)
with engine.connect() as conn:
    result = conn.execute(u)
    print(result.all())
```

----------------------------------------

TITLE: Checking Between Range SQLAlchemy Python
DESCRIPTION: Demonstrates using the `.between()` method on a SQLAlchemy `column` object to generate a SQL `BETWEEN` expression. The output shows the generated SQL with two bound parameters.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_6

LANGUAGE: Python
CODE:
```
print(column("x").between(5, 10))
```

----------------------------------------

TITLE: Filtering on Joined Relationship with Select.join and Joinedload
DESCRIPTION: This snippet demonstrates how Select.join and joinedload interact when filtering on a column in the related table (Address.email_address). The explicit join is used for the filter condition, while joinedload handles the eager loading via a separate LEFT OUTER JOIN.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_25

LANGUAGE: Python
CODE:
```
>>> stmt = (
    select(User)
    .join(User.addresses)
    .options(joinedload(User.addresses))
    .filter(User.name == "spongebob")
    .filter(Address.email_address == "someaddress@foo.com")
)
>>> result = session.scalars(stmt).unique().all()
```

LANGUAGE: SQL
CODE:
```
SELECT
    addresses_1.id AS addresses_1_id,
    addresses_1.email_address AS addresses_1_email_address,
    addresses_1.user_id AS addresses_1_user_id,
    users.id AS users_id, users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users JOIN addresses
    ON users.id = addresses.user_id
LEFT OUTER JOIN addresses AS addresses_1
    ON users.id = addresses_1.user_id
WHERE users.name = ? AND addresses.email_address = ?
```

----------------------------------------

TITLE: Configuring Declarative Mapper - Single Table Inheritance
DESCRIPTION: This snippet illustrates configuring single-table inheritance using `__mapper_args__`. The base class specifies the `polymorphic_on` column that discriminates the type and its own `polymorphic_identity`, while subclasses specify their unique `polymorphic_identity` within their own `__mapper_args__`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#_snippet_4

LANGUAGE: Python
CODE:
```
class Person(Base):
    __tablename__ = "person"

    person_id = mapped_column(Integer, primary_key=True)
    type = mapped_column(String, nullable=False)

    __mapper_args__ = dict(
        polymorphic_on=type,
        polymorphic_identity="person",
    )


class Employee(Person):
    __mapper_args__ = dict(
        polymorphic_identity="employee",
    )
```

----------------------------------------

TITLE: Define SQLAlchemy Self-Referential Many-to-Many Relationship (Object Joins) (Python)
DESCRIPTION: Defines a `Node` class and an association table `node_to_node` to represent a self-referential many-to-many relationship. It configures `right_nodes` and `left_nodes` relationships using the `secondary` argument and specifies join conditions with `primaryjoin` and `secondaryjoin` using direct references to column objects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#_snippet_20

LANGUAGE: Python
CODE:
```
from typing import List

from sqlalchemy import Integer, ForeignKey, Column, Table
from sqlalchemy.orm import DeclarativeBase, Mapped
from sqlalchemy.orm import mapped_column, relationship


class Base(DeclarativeBase):
    pass


node_to_node = Table(
    "node_to_node",
    Base.metadata,
    Column("left_node_id", Integer, ForeignKey("node.id"), primary_key=True),
    Column("right_node_id", Integer, ForeignKey("node.id"), primary_key=True),
)


class Node(Base):
    __tablename__ = "node"
    id: Mapped[int] = mapped_column(primary_key=True)
    label: Mapped[str]
    right_nodes: Mapped[List["Node"]] = relationship(
        "Node",
        secondary=node_to_node,
        primaryjoin=id == node_to_node.c.left_node_id,
        secondaryjoin=id == node_to_node.c.right_node_id,
        back_populates="left_nodes",
    )
    left_nodes: Mapped[List["Node"]] = relationship(
        "Node",
        secondary=node_to_node,
        primaryjoin=id == node_to_node.c.right_node_id,
        secondaryjoin=id == node_to_node.c.left_node_id,
        back_populates="right_nodes",
    )
```

----------------------------------------

TITLE: Configuring SQLAlchemy Engine Pool Parameters (Python)
DESCRIPTION: Illustrates how to pass common connection pool tuning parameters like pool_size and max_overflow directly to the create_engine function when creating a SQLAlchemy engine. This configures the integrated QueuePool instance with the specified values. Requires SQLAlchemy and the psycopg2 database driver.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_0

LANGUAGE: Python
CODE:
```
engine = create_engine(
    "postgresql+psycopg2://me@localhost/mydb", pool_size=20, max_overflow=0
)
```

----------------------------------------

TITLE: Benchmarking ORM Object Loading with yield_per
DESCRIPTION: Provides a Python script to benchmark the performance of loading a large number of ORM objects using `Session.query().yield_per()`. It demonstrates how `yield_per` helps manage memory and improve performance when processing large result sets by fetching rows in batches.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#_snippet_5

LANGUAGE: Python
CODE:
```
import time
from sqlalchemy import Integer, Column, create_engine, Table
from sqlalchemy.orm import Session
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


class Foo(Base):
    __table__ = Table(
        "foo",
        Base.metadata,
        Column("id", Integer, primary_key=True),
        Column("a", Integer(), nullable=False),
        Column("b", Integer(), nullable=False),
        Column("c", Integer(), nullable=False),
    )


engine = create_engine("mysql+mysqldb://scott:tiger@localhost/test", echo=True)

sess = Session(engine)

now = time.time()

# avoid using all() so that we don't have the overhead of building
# a large list of full objects in memory
for obj in sess.query(Foo).yield_per(100).limit(1000000):
    pass

print("Total time: %d" % (time.time() - now))
```

----------------------------------------

TITLE: Eager Load Polymorphic Relationship with selectinload and of_type (Python)
DESCRIPTION: Demonstrates eager loading the `Company.employees` relationship using `selectinload`. `of_type(all_employees)` is used with a `with_polymorphic("*")` construct to load all subtypes in the hierarchy.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#_snippet_39

LANGUAGE: Python
CODE:
```
all_employees = with_polymorphic(Employee, "*")
stmt = select(Company).options(selectinload(Company.employees.of_type(all_employees)))
for company in session.scalars(stmt):
    print(f"company: {company.name}")
    print(f"employees: {company.employees}")
```

----------------------------------------

TITLE: Use text() for Arbitrary Expression in SQLAlchemy ORDER BY in Python
DESCRIPTION: Demonstrates how to explicitly use the `text()` construct when providing an arbitrary SQL expression (not a simple column or label reference) to methods like `order_by()`, ensuring clarity and avoiding warnings.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#_snippet_102

LANGUAGE: Python
CODE:
```
stmt = select([users]).order_by(text("some special expression"))
```

----------------------------------------

TITLE: Accessing Typed Rows and Values from SQLAlchemy Results (Python)
DESCRIPTION: Shows how the `Tuple[]` typing from select statements carries through to `Result` and `Row` objects. Explains the use of the `.tuple()` or `.t` accessor on a `Row` object to enable typed tuple unpacking or indexed access, allowing type checkers to correctly identify the Python types of individual row elements.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_2

LANGUAGE: python
CODE:
```
with engine.connect() as conn:
    # (variable) stmt: Select[Tuple[str, int]]
    stmt = select(str_col, int_col)

    # (variable) result: Result[Tuple[str, int]]
    result = conn.execute(stmt)

    # (variable) row: Row[Tuple[str, int]] | None
    row = result.first()

    if row is not None:
        # for typed tuple unpacking or indexed access,
        # use row.tuple() or row.t  (this is the small typing-oriented accessor)
        strval, intval = row.t

        # (variable) strval: str
        strval

        # (variable) intval: int
        intval
```

----------------------------------------

TITLE: Defining Joined Table Inheritance with SQLAlchemy ORM
DESCRIPTION: This snippet shows how to define a `Manager` class that inherits from an `Employee` base class using joined table inheritance. It maps the `Manager` class to its own table (`manager`) which is joined to the base `employee` table via a foreign key on the primary key. It also configures a relationship back to a `Company` class.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#_snippet_4

LANGUAGE: Python
CODE:
```
class Manager(Employee):
    __tablename__ = "manager"
    id: Mapped[int] = mapped_column(ForeignKey("employee.id"), primary_key=True)
    manager_name: Mapped[str]

    company_id: Mapped[int] = mapped_column(ForeignKey("company.id"))
    company: Mapped[Company] = relationship(back_populates="managers")

    __mapper_args__ = {
        "polymorphic_identity": "manager",
    }
```

----------------------------------------

TITLE: Joining to Aliased Targets Using Relationship-Bound Attributes in SQLAlchemy ORM
DESCRIPTION: Shows how to join an entity (`User`) to multiple aliased instances of another entity (`Address`) using a relationship-bound attribute (`User.addresses`) to define the ON clause for each join. This is useful for querying relationships involving the same target table multiple times with different conditions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_26

LANGUAGE: Python
CODE:
```
address_alias_1 = aliased(Address)
address_alias_2 = aliased(Address)
stmt = (
    select(User)
    .join(address_alias_1, User.addresses)
    .where(address_alias_1.email_address == "patrick@aol.com")
    .join(address_alias_2, User.addresses)
)
```

----------------------------------------

TITLE: Creating Object with Relationship Attribute - SQLAlchemy Python
DESCRIPTION: This snippet demonstrates creating a new `Address` object and directly associating it with a `User` object by passing the user instance as a keyword argument during initialization, showcasing another way to establish the relationship link.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_4

LANGUAGE: Python
CODE:
```
>>> a2 = Address(email_address="pearl@aol.com", user=u1)
```

----------------------------------------

TITLE: Demonstrating SQLAlchemy Session Rollback Error - Python
DESCRIPTION: This Python snippet demonstrates a common SQLAlchemy Session error. It shows adding duplicate data to trigger a constraint violation during the first commit attempt, catching the exception without rolling back, and then attempting another commit, which will fail because the session's transaction is already in an aborted state.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine, Column, Integer
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base(create_engine("sqlite://"))


class Foo(Base):
    __tablename__ = "foo"
    id = Column(Integer, primary_key=True)


Base.metadata.create_all()

session = sessionmaker()()

# constraint violation
session.add_all([Foo(id=1), Foo(id=1)])

try:
    session.commit()
except:
    # ignore error
    pass

# continue using session without rolling back
session.commit()
```

----------------------------------------

TITLE: Accessing Lazy-Loaded Attribute (SQLAlchemy ORM)
DESCRIPTION: Demonstrates accessing a subclass-specific attribute (manager_name) on an object loaded via a base class query. This action triggers a lazy load, causing SQLAlchemy to issue a separate SQL query to fetch the attribute's value from the subclass table.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#_snippet_4

LANGUAGE: Python
CODE:
```
print(mr_krabs.manager_name)
```

----------------------------------------

TITLE: Using a SQLAlchemy Compound Select as a Subquery
DESCRIPTION: Shows how to take a compound select construct (like one created by `union_all`) and use it as a subquery within another select statement. It demonstrates calling `.subquery()` on the compound select and joining it to another table.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_72

LANGUAGE: python
CODE:
```
u_subq = u.subquery()
stmt = (
    select(u_subq.c.name, address_table.c.email_address)
    .join_from(address_table, u_subq)
    .order_by(u_subq.c.name, address_table.c.email_address)
)
```

----------------------------------------

TITLE: Validating Collection Append with validates (SQLAlchemy)
DESCRIPTION: Shows how the `@validates` decorator can be applied to a relationship-mapped attribute (`addresses`) to validate items being appended to the collection. The validator method receives the object instance, attribute key, and the item being added (e.g., an `Address` object).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#_snippet_1

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import validates


class User(Base):
    # ...

    addresses = relationship("Address")

    @validates("addresses")
    def validate_address(self, key, address):
        if "@" not in address.email:
            raise ValueError("failed simplified email validation")
        return address
```

----------------------------------------

TITLE: Web Request Flow with SQLAlchemy scoped_session Text
DESCRIPTION: This text-based diagram visualizes the typical lifecycle of a web request integrated with `scoped_session` in a threaded environment. It shows the `scoped_session` registry being set up during application startup and the web request triggering the potential creation or retrieval of a session instance from the registry within that request's thread. It highlights that session creation might be explicit or implicit upon the first database access via the registry.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#_snippet_6

LANGUAGE: Text
CODE:
```
Web Server          Web Framework        SQLAlchemy ORM Code
--------------      --------------       ------------------------------
startup        ->   Web framework        # Session registry is established
                    initializes          Session = scoped_session(sessionmaker())

incoming
web request    ->   web request     ->   # The registry is *optionally*
                    starts               # called upon explicitly to create
```

----------------------------------------

TITLE: Defining SQLAlchemy Delete with Returning Clause - Python
DESCRIPTION: This snippet demonstrates how to build an SQLAlchemy `Delete` construct using the fluent API. It filters rows by name and includes a `returning` clause to select specific columns (`id` and `name`) from the deleted rows.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#_snippet_12

LANGUAGE: Python
CODE:
```
delete_stmt = (
    delete(user_table)
    .where(user_table.c.name == "patrick")
    .returning(user_table.c.id, user_table.c.name)
)
```

----------------------------------------

TITLE: Applying load_only ORM Option in Python
DESCRIPTION: Shows how to use the load_only option to specify only certain columns to load, effectively deferring all others. Examples include applying it directly to the main entity, specifying an explicit parent with Load, and applying it to a relationship path.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#_snippet_39

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import load_only

query(User).options(load_only("name", "fullname"))

# specify explicit parent entity
query(User, Address).options(Load(User).load_only("name", "fullname"))

# specify path
query(User).options(joinedload(User.addresses).load_only("email_address"))
```

----------------------------------------

TITLE: Constructing SQLAlchemy ORM UNION ALL Statement - Python
DESCRIPTION: Shows how to build two separate select statements targeting an ORM entity (User) and combine them into a single union_all statement using SQLAlchemy's SQL expression language constructs. This statement can then be used in various execution contexts.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_74

LANGUAGE: python
CODE:
```
stmt1 = select(User).where(User.name == "sandy")
stmt2 = select(User).where(User.name == "spongebob")
u = union_all(stmt1, stmt2)
```

----------------------------------------

TITLE: SQLAlchemy Select IN Load One-to-Many - Python & SQL
DESCRIPTION: Demonstrates the typical use of `selectinload` for a one-to-many relationship, where SQLAlchemy first selects the parent objects (Users) and then issues a second SELECT query to fetch related child objects (Addresses) using an IN clause with the parent primary keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_27

LANGUAGE: Python
CODE:
```
>>> from sqlalchemy import select
>>> from sqlalchemy.orm import selectinload
>>> stmt = (
...     select(User)
...     .options(selectinload(User.addresses))
...     .filter(or_(User.name == "spongebob", User.name == "ed"))
... )
>>> result = session.scalars(stmt).all()
```

LANGUAGE: SQL
CODE:
```
SELECT
    users.id AS users_id,
    users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
WHERE users.name = ? OR users.name = ?
('spongebob', 'ed')
SELECT
    addresses.id AS addresses_id,
    addresses.email_address AS addresses_email_address,
    addresses.user_id AS addresses_user_id
FROM addresses
WHERE addresses.user_id IN (?, ?)
(5, 7)
```

----------------------------------------

TITLE: Setting Transaction Isolation per Session Connection (Python)
DESCRIPTION: Shows how to set the isolation level for a single transaction within a SQLAlchemy session. Calling `session.connection()` with `execution_options` *before* performing any operations that would start the transaction explicitly acquires a connection and begins the database transaction with the specified isolation level.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_24

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import Session

# assume session just constructed
sess = Session(bind=engine)

# call connection() with options before any other operations proceed.
# this will procure a new connection from the bound engine and begin a real
# database transaction.
sess.connection(execution_options={"isolation_level": "SERIALIZABLE"})

# ... work with session in SERIALIZABLE isolation level...

# commit transaction.  the connection is released
# and reverted to its previous isolation level.
sess.commit()

# subsequent to commit() above, a new transaction may be begun if desired,
# which will proceed with the previous default isolation level unless
# it is set again.
```

----------------------------------------

TITLE: Persisting Composite Objects - Python/SQL
DESCRIPTION: Illustrates creating a `Vertex` instance and assigning `Point` objects to its composite attributes (`start`, `end`). When added to a session and committed, SQLAlchemy automatically maps the `Point` object values to the corresponding columns in the INSERT statement.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#_snippet_3

LANGUAGE: pycon+sql
CODE:
```
>>> v = Vertex(start=Point(3, 4), end=Point(5, 6))
>>> session.add(v)
>>> session.commit()
{execsql}BEGIN (implicit)
INSERT INTO vertices (x1, y1, x2, y2) VALUES (?, ?, ?, ?)
[generated in ...] (3, 4, 5, 6)
COMMIT
```

----------------------------------------

TITLE: Defining Table with Composite Primary Key - Python
DESCRIPTION: This snippet defines the 'invoice' table which serves as the referenced table for a composite foreign key. It demonstrates how to specify a primary key that consists of multiple columns ('invoice_id' and 'ref_num') by marking each column with primary_key=True.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_2

LANGUAGE: python
CODE:
```
invoice = Table(
    "invoice",
    metadata_obj,
    Column("invoice_id", Integer, primary_key=True),
    Column("ref_num", Integer, primary_key=True),
    Column("description", String(60), nullable=False),
)
```

----------------------------------------

TITLE: Configuring Concrete Polymorphic Loading with ConcreteBase - SQLAlchemy - Python
DESCRIPTION: Sets up concrete inheritance mapping using sqlalchemy.ext.declarative.ConcreteBase and sqlalchemy.orm.DeclarativeBase. Defines a base Employee class and concrete Manager and Engineer subclasses, each with its own table and columns. The ConcreteBase helper automatically configures polymorphic loading for the Employee base class.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#_snippet_19

LANGUAGE: Python
CODE:
```
from sqlalchemy.ext.declarative import ConcreteBase
from sqlalchemy.orm import DeclarativeBase


class Base(DeclarativeBase):
    pass


class Employee(ConcreteBase, Base):
    __tablename__ = "employee"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(50))

    __mapper_args__ = {
        "polymorphic_identity": "employee",
        "concrete": True,
    }


class Manager(Employee):
    __tablename__ = "manager"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(50))
    manager_data = mapped_column(String(40))

    __mapper_args__ = {
        "polymorphic_identity": "manager",
        "concrete": True,
    }


class Engineer(Employee):
    __tablename__ = "engineer"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(50))
    engineer_info = mapped_column(String(40))

    __mapper_args__ = {
        "polymorphic_identity": "engineer",
        "concrete": True,
    }
```

----------------------------------------

TITLE: Using with_variant for Dialect-Agnostic Types (SQLAlchemy Python)
DESCRIPTION: Demonstrates the recommended approach using `TypeEngine.with_variant` to associate dialect-specific implementations with a dialect-agnostic base type. This allows for more portable code that adapts to the backend database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#_snippet_18

LANGUAGE: Python
CODE:
```
from sqlalchemy import Date, Integer
from sqlalchemy.dialects.sqlite import DATE
from sqlalchemy.dialects.mysql import INTEGER

d = Date().with_variant(
    DATE(storage_format="%(day)02d.%(month)02d.%(year)04d"), "sqlite"
)

i = Integer().with_variant(INTEGER(display_width=5), "mysql")
```

----------------------------------------

TITLE: Correctly Using Dataclass Init Parameter with MappedColumn Python
DESCRIPTION: Shows the correct method for applying dataclass-specific parameters (like 'init=False') when using the `Annotated` type. These parameters must be placed on the `mapped_column` definition directly on the class attribute, not within the `Annotated` type itself.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import Annotated

from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import registry

intpk = Annotated[int, mapped_column(primary_key=True)]

reg = registry()


@reg.mapped_as_dataclass
class User:
    __tablename__ = "user_account"

    # init=False and other pep-681 arguments must be inline
    id: Mapped[intpk] = mapped_column(init=False)


u1 = User()
```

----------------------------------------

TITLE: Column Declarations in Mixin (Annotated Attributes) in Python
DESCRIPTION: Shows the use of annotated attributes (`Mapped`) within a Declarative mixin class `TimestampMixin`. It includes `created_at` with `mapped_column` and a default, and `updated_at` as a simple annotated attribute.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_5

LANGUAGE: Python
CODE:
```
class TimestampMixin:
    created_at: Mapped[datetime] = mapped_column(default=func.now())
    updated_at: Mapped[datetime]
```

----------------------------------------

TITLE: Select from Text Statement (SQLAlchemy 2.0)
DESCRIPTION: Shows the 2.0 approach for fetching objects by selecting directly from a raw SQL text statement using `select` with `.from_statement(text(...))` and fetching all scalar results. Requires a configured SQLAlchemy session, mapped User class, and the `select` and `text` functions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_50

LANGUAGE: Python
CODE:
```
session.scalars(
  select(User).
  from_statement(
    text("select * from users")
  )
).all()
```

----------------------------------------

TITLE: Defining Unidirectional Association Object Mapping
DESCRIPTION: This snippet illustrates the unidirectional association object pattern. It defines a separate class `Association` mapped to the join table, which includes extra columns (`extra_data`). The `Parent` class has a one-to-many relationship to `Association`, and `Association` has a many-to-one relationship to `Child`, forming a path from Parent -> Association -> Child.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_18

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class Association(Base):
    __tablename__ = "association_table"
    left_id: Mapped[int] = mapped_column(ForeignKey("left_table.id"), primary_key=True)
    right_id: Mapped[int] = mapped_column(
        ForeignKey("right_table.id"), primary_key=True
    )
    extra_data: Mapped[Optional[str]]
    child: Mapped["Child"] = relationship()


class Parent(Base):
    __tablename__ = "left_table"
    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Association"]] = relationship()


class Child(Base):
    __tablename__ = "right_table"
    id: Mapped[int] = mapped_column(primary_key=True)
```

----------------------------------------

TITLE: PostgreSQL Transaction Abort Example - Text
DESCRIPTION: This text snippet demonstrates transaction behavior in PostgreSQL. It shows how a primary key violation error causes the current transaction to be aborted by the database, preventing any further commands within that transaction block until an explicit rollback occurs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#_snippet_1

LANGUAGE: text
CODE:
```
test=> create table foo(id integer primary key);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "foo_pkey" for table "foo"
CREATE TABLE
test=> begin;
BEGIN
test=> insert into foo values(1);
INSERT 0 1
test=> commit;
COMMIT
test=> begin;
BEGIN
test=> insert into foo values(1);
ERROR:  duplicate key value violates unique constraint "foo_pkey"
test=> insert into foo values(2);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
```

----------------------------------------

TITLE: Combining INSERT FROM SELECT with RETURNING in SQLAlchemy
DESCRIPTION: Shows how to combine SQLAlchemy's `insert().from_select()` method, which inserts data based on a SELECT statement, with the `returning()` method to retrieve specific columns from the newly inserted rows.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_11

LANGUAGE: Python
CODE:
```
select_stmt = select(user_table.c.id, user_table.c.name + "@aol.com")
insert_stmt = insert(address_table).from_select(
    ["user_id", "email_address"], select_stmt
)
print(insert_stmt.returning(address_table.c.id, address_table.c.email_address))
```

LANGUAGE: SQL
CODE:
```
INSERT INTO address (user_id, email_address)
SELECT user_account.id, user_account.name || :name_1 AS anon_1
FROM user_account RETURNING address.id, address.email_address
```

----------------------------------------

TITLE: Inspecting Mapped Class Using sqlalchemy.inspect Python
DESCRIPTION: Illustrates how to obtain the internal `Mapper` object for a given SQLAlchemy ORM-mapped class using the `sqlalchemy.inspect` function. This allows access to metadata about the mapping, including attributes, columns, relationships, and the mapped table.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from sqlalchemy import inspect

mapper = inspect(MyClass)
```

----------------------------------------

TITLE: Inserting Multiple Rows with SQLAlchemy Insert and List of Dictionaries (Python)
DESCRIPTION: Demonstrates inserting multiple rows into a table using the `insert()` construct in conjunction with `connection.execute()` and a list of dictionaries. SQLAlchemy automatically generates the appropriate VALUES clause based on the dictionary keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_7

LANGUAGE: Python
CODE:
```
with engine.connect() as conn:
    result = conn.execute(
        insert(user_table),
        [
            {"name": "sandy", "fullname": "Sandy Cheeks"},
            {"name": "patrick", "fullname": "Patrick Star"},
        ],
    )
    conn.commit()
```

----------------------------------------

TITLE: Deleting Objects from SQLAlchemy Session in Python
DESCRIPTION: Illustrates how to mark mapped objects for deletion using `session.delete()`. The actual DELETE statements are executed against the database when `session.commit()` or `session.flush()` is called. Requires a `session` object and persistent mapped object instances.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_10

LANGUAGE: Python
CODE:
```
session.delete(obj1)
session.delete(obj2)

session.commit()  # commit (or flush)
```

----------------------------------------

TITLE: Performing Correlated Update using Scalar Subquery in SQLAlchemy Core
DESCRIPTION: Explains how to update a column based on a value derived from another table using a correlated subquery. The subquery is constructed using `select()` and `scalar_subquery()`, relating back to the table being updated (`user_table`) via a `WHERE` clause.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#_snippet_3

LANGUAGE: Python
CODE:
```
scalar_subq = (
    select(address_table.c.email_address)
    .where(address_table.c.user_id == user_table.c.id)
    .order_by(address_table.c.id)
    .limit(1)
    .scalar_subquery()
)
update_stmt = update(user_table).values(fullname=scalar_subq)
print(update_stmt)
```

LANGUAGE: SQL
CODE:
```
UPDATE user_account SET fullname=(SELECT address.email_address
FROM address
WHERE address.user_id = user_account.id ORDER BY address.id
LIMIT :param_1)
```

----------------------------------------

TITLE: Mixing in Relationships with declared_attr in Python
DESCRIPTION: This example shows how to define a reusable relationship within a mixin using the `@declared_attr` decorator. The `RefTargetMixin` defines a foreign key column `target_id` and a `target` relationship via a method decorated with `@declared_attr`. `Foo` and `Bar` classes inherit this mixin to establish many-to-one relationships to `Target`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#_snippet_8

LANGUAGE: Python
CODE:
```
from sqlalchemy import ForeignKey
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import declared_attr
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class RefTargetMixin:
    target_id: Mapped[int] = mapped_column(ForeignKey("target.id"))

    @declared_attr
    def target(cls) -> Mapped["Target"]:
        return relationship("Target")


class Foo(RefTargetMixin, Base):
    __tablename__ = "foo"
    id: Mapped[int] = mapped_column(primary_key=True)


class Bar(RefTargetMixin, Base):
    __tablename__ = "bar"
    id: Mapped[int] = mapped_column(primary_key=True)


class Target(Base):
    __tablename__ = "target"
    id: Mapped[int] = mapped_column(primary_key=True)
```

----------------------------------------

TITLE: Configuring Cascades on SQLAlchemy Declarative Relationships
DESCRIPTION: Demonstrates how to configure cascade behavior directly on `relationship` objects within a SQLAlchemy declarative class definition. It shows setting `cascade="all, delete-orphan"` for a collection relationship and `cascade="save-update"` for a scalar relationship.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_0

LANGUAGE: Python
CODE:
```
class Order(Base):
    __tablename__ = "order"

    items = relationship("Item", cascade="all, delete-orphan")
    customer = relationship("User", cascade="save-update")
```

----------------------------------------

TITLE: Configuring Many-to-Many Relationship with ON DELETE and passive_deletes - Python
DESCRIPTION: This snippet demonstrates configuring a many-to-many relationship in SQLAlchemy using an association table. It sets database-level `ON DELETE CASCADE` on the foreign keys within the association table and uses `cascade="all, delete"` on the parent-side relationship and `passive_deletes=True` on the child-side relationship to integrate with the database cascade for efficient deletion.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_16

LANGUAGE: Python
CODE:
```
association_table = Table(
    "association",
    Base.metadata,
    Column("left_id", Integer, ForeignKey("left.id", ondelete="CASCADE")),
    Column("right_id", Integer, ForeignKey("right.id", ondelete="CASCADE")),
)


class Parent(Base):
    __tablename__ = "left"
    id = mapped_column(Integer, primary_key=True)
    children = relationship(
        "Child",
        secondary=association_table,
        back_populates="parents",
        cascade="all, delete",
    )


class Child(Base):
    __tablename__ = "right"
    id = mapped_column(Integer, primary_key=True)
    parents = relationship(
        "Parent",
        secondary=association_table,
        back_populates="children",
        passive_deletes=True,
    )
```

----------------------------------------

TITLE: Dynamically Adding Auth Token with do_connect Event (Python)
DESCRIPTION: Attaches a listener to the engine's `do_connect` event to inject a dynamically generated authentication token into the connection parameters. This is useful for authentication mechanisms where tokens are short-lived and need to be refreshed for each new connection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_15

LANGUAGE: python
CODE:
```
from sqlalchemy import event

engine = create_engine("postgresql+psycopg2://user@hostname/dbname")


@event.listens_for(engine, "do_connect")
def provide_token(dialect, conn_rec, cargs, cparams):
    cparams["token"] = get_authentication_token()
```

----------------------------------------

TITLE: Building and Executing a Cached SQLAlchemy Statement (Python)
DESCRIPTION: Demonstrates building a SQLAlchemy Core SELECT statement within a function. This pattern allows SQLAlchemy's automatic SQL compilation cache to reuse the compiled SQL string for subsequent calls with different parameter values, improving performance. Requires a connection object and a parameter value.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_25

LANGUAGE: Python
CODE:
```
def run_my_statement(connection, parameter):
    stmt = select(table)
    stmt = stmt.where(table.c.col == parameter)
    stmt = stmt.order_by(table.c.id)
    return connection.execute(stmt)
```

----------------------------------------

TITLE: Recommended ORM Join to Aliased Entity Using aliased and of_type
DESCRIPTION: Demonstrates the recommended pattern for joining to an aliased ORM entity. It uses `sqlalchemy.orm.aliased` to create the alias and the `of_type()` modifier on the relationship or the target/onclause form.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_18

LANGUAGE: python
CODE:
```
from sqlalchemy.orm import aliased

a1 = aliased(Address)

# of_type() form; recommended
q = (
    s.query(User)
    .join(User.addresses.of_type(a1))
    .filter(a1.email_address == "ed@foo.com")
)

# target, onclause form
q = s.query(User).join(a1, User.addresses).filter(a1.email_address == "ed@foo.com")
```

----------------------------------------

TITLE: Accessing Unloaded Collection - Python
DESCRIPTION: This Python snippet demonstrates attempting to access a collection attribute (addresses) on a detached SQLAlchemy object (u1). This action is shown to fail because the collection has not been loaded and the object is not associated with a session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_73

LANGUAGE: python
CODE:
```
>>> u1.addresses  # <-- will fail, .addresses is not loaded and object is detached
```

----------------------------------------

TITLE: Demonstrating subqueryload Operation (Python/SQL)
DESCRIPTION: Shows a Python example using `select` and `subqueryload` to load `User` objects and their related `addresses`. The accompanying SQL output illustrates the two queries executed: the main query for users and a second query using a subquery of the first to fetch addresses.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_29

LANGUAGE: python
CODE:
```
>>> from sqlalchemy import select
>>> from sqlalchemy.orm import subqueryload
>>> stmt = select(User).options(subqueryload(User.addresses)).filter_by(name="spongebob")
>>> results = session.scalars(stmt).all()
```

LANGUAGE: sql
CODE:
```
{execsql}SELECT
    users.id AS users_id,
    users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
WHERE users.name = ?
('spongebob',)
SELECT
    addresses.id AS addresses_id,
    addresses.email_address AS addresses_email_address,
    addresses.user_id AS addresses_user_id,
    anon_1.users_id AS anon_1_users_id
FROM (
    SELECT users.id AS users_id
    FROM users
    WHERE users.name = ?) AS anon_1
JOIN addresses ON anon_1.users_id = addresses.user_id
ORDER BY anon_1.users_id, addresses.id
('spongebob',)
```

----------------------------------------

TITLE: SQLAlchemy: 2.0 Recommended 'Commit As You Go' Explicit
DESCRIPTION: Demonstrates the SQLAlchemy 2.0 pattern for executing multiple statements and explicitly committing changes within a connection checkout using `conn.commit()`, allowing for zero or more commits per checkout.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_23

LANGUAGE: Python
CODE:
```
# "commit as you go" - zero or more commits per checkout
with engine.connect() as conn:
    result = conn.execute(stmt)
    conn.commit()
```

----------------------------------------

TITLE: SQLAlchemy 1.4 / 2.0 Migration for DISTINCT and ORDER BY
DESCRIPTION: Demonstrates the recommended approach in SQLAlchemy 1.4+ and 2.0 to handle distinct() with order_by() on a non-selected column. It uses the 2.0-style select() construct to explicitly include the required column (Address.email_address) in the SELECT list, and then uses Result.columns() to filter the final result set to only include the User entity.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_84

LANGUAGE: Python
CODE:
```
stmt = (
    select(User, Address.email_address)
    .join(User.addresses)
    .distinct()
    .order_by(Address.email_address)
)

result = session.execute(stmt).columns(User).all()
```

----------------------------------------

TITLE: Bulk Update using session.execute in SQLAlchemy ORM
DESCRIPTION: Shows how to perform a bulk update operation using the sqlalchemy.dml.Update construct. The update is executed via session.execute(), providing a list of dictionaries where each dictionary contains primary key values and the columns to update for a specific row. Note that this method does not support RETURNING.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#_snippet_25

LANGUAGE: Python
CODE:
```
from sqlalchemy import update
session.execute(
    update(User),
    [
        {"id": 1, "fullname": "Spongebob Squarepants"},
        {"id": 3, "fullname": "Patrick Star"},
    ],
)
```

----------------------------------------

TITLE: Executing Many With None For Missing Parameter Python
DESCRIPTION: Provides the solution for the 'value is required' error during `executemany`. If a parameter is expected based on the first parameter set but is optional or absent in subsequent sets, explicitly provide `None` as its value to satisfy the statement's parameter structure.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_10

LANGUAGE: python
CODE:
```
e.execute(
    t.insert(),
    [
        {"a": 1, "b": 2, "c": 3},
        {"a": 2, "b": None, "c": 4},
        {"a": 3, "b": 4, "c": 5},
    ],
)
```

----------------------------------------

TITLE: Creating MySQL Engines with Various Drivers - Python
DESCRIPTION: Provides examples of creating SQLAlchemy Engines for MySQL, showing the default driver (mysqlclient) and explicit specification of mysqlclient (mysqldb) and PyMySQL drivers via the URL format mysql+driver://....
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_6

LANGUAGE: Python
CODE:
```
# default
engine = create_engine("mysql://scott:tiger@localhost/foo")
```

LANGUAGE: Python
CODE:
```
# mysqlclient (a maintained fork of MySQL-Python)
engine = create_engine("mysql+mysqldb://scott:tiger@localhost/foo")
```

LANGUAGE: Python
CODE:
```
# PyMySQL
engine = create_engine("mysql+pymysql://scott:tiger@localhost/foo")
```

----------------------------------------

TITLE: Defining Relationship with delete-orphan Cascade (Python)
DESCRIPTION: Demonstrates how to configure a SQLAlchemy ORM relationship to use the `delete-orphan` cascade, ensuring that associated child objects are automatically deleted from the database when they are removed from the parent collection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_19

LANGUAGE: Python
CODE:
```
class User(Base):
    __tablename__ = "user"

    # ...

    addresses = relationship("Address", cascade="all, delete-orphan")
```

----------------------------------------

TITLE: Creating Individual Table with SQLAlchemy Table.create Python
DESCRIPTION: This shows how to define a single `Table` object and then use its `create()` method to issue a SQL CREATE TABLE statement directly to a database engine. This is useful for creating individual tables rather than managing the entire schema via `MetaData.create_all`. It requires an active database engine connection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#_snippet_6

LANGUAGE: python
CODE:
```
engine = create_engine("sqlite:///:memory:")

metadata_obj = MetaData()

employees = Table(
    "employees",
    metadata_obj,
    Column("employee_id", Integer, primary_key=True),
    Column("employee_name", String(60), nullable=False, key="name"),
    Column("employee_dept", Integer, ForeignKey("departments.department_id")),
)
employees.create(engine)
```

LANGUAGE: sql
CODE:
```
CREATE TABLE employees(
    employee_id SERIAL NOT NULL PRIMARY KEY,
    employee_name VARCHAR(60) NOT NULL,
    employee_dept INTEGER REFERENCES departments(department_id)
)
```

----------------------------------------

TITLE: Creating SQLAlchemy PgSQL Engine with connect_args (Python)
DESCRIPTION: Initializes a SQLAlchemy engine for PostgreSQL. This example shows how to use the `connect_args` dictionary parameter to pass custom arguments directly to the underlying DBAPI's `connect()` function, suitable for non-string parameters or parameters not handled by URL parsing.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_12

LANGUAGE: python
CODE:
```
engine = create_engine(
    "postgresql+psycopg2://user:pass@hostname/dbname",
    connect_args={"connection_factory": MyConnectionFactory},
)
```

----------------------------------------

TITLE: Querying Related Objects with with_parent - SQLAlchemy Python
DESCRIPTION: Illustrates constructing a 2.0-style select statement using `sqlalchemy.orm.with_parent` to filter related objects (posts) based on a parent object (user). Requires importing `with_parent` and having a `User` model and an active session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_98

LANGUAGE: Python
CODE:
```
from sqlalchemy.orm import with_parent

jack = session.get(User, 5)

posts = session.scalars(
    select(Post)
    .where(with_parent(jack, User.posts))
    .where(Post.headline == "this is a post")
)
```

----------------------------------------

TITLE: Defining Check Constraints in SQLAlchemy
DESCRIPTION: Shows how to define check constraints using SQLAlchemy Core. Constraints can be applied at the column level using `Column(..., CheckConstraint(...))` or at the table level using `CheckConstraint` within the `Table` definition. The constraint text is passed directly to the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_10

LANGUAGE: Python
CODE:
```
from sqlalchemy import CheckConstraint

metadata_obj = MetaData()
mytable = Table(
    "mytable",
    metadata_obj,
    # per-column CHECK constraint
    Column("col1", Integer, CheckConstraint("col1>5")),
    Column("col2", Integer),
    Column("col3", Integer),
    # table level CHECK constraint.  'name' is optional.
    CheckConstraint("col2 > col3 + 5", name="check1"),
)
```

----------------------------------------

TITLE: Using SQLAlchemy Inspector for Table Names Python
DESCRIPTION: Introduces the SQLAlchemy Inspector and provides a basic example of how to create an Inspector instance from an engine and use it to retrieve a list of table names from the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#_snippet_20

LANGUAGE: python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy import inspect

engine = create_engine("...")
insp = inspect(engine)
print(insp.get_table_names())
```

----------------------------------------

TITLE: Use SQLAlchemy @validates with Collection Append - Python
DESCRIPTION: Demonstrates using the `@validates` method defined on the `A` model by appending a dictionary to the `bs` collection. The validator automatically intercepts the dictionary and converts it into a `B` instance before adding it to the collection.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#_snippet_43

LANGUAGE: Python
CODE:
```
a1 = A()
a1.bs.append({"data": "b1"})
```

----------------------------------------

TITLE: Equivalently Configuring Engine and Pool Logging - Python
DESCRIPTION: Illustrates how to achieve the same logging level as `echo=True` and `echo_pool="debug"` using explicit Python logging configuration. Sets the `sqlalchemy.engine` logger to INFO and the `sqlalchemy.pool` logger to DEBUG.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#_snippet_20

LANGUAGE: python
CODE:
```
import logging

logging.basicConfig()
logging.getLogger("sqlalchemy.engine").setLevel(logging.INFO)
logging.getLogger("sqlalchemy.pool").setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: SQLAlchemy Select IN Load with Existing Join - Python & SQL
DESCRIPTION: Showcases `selectinload` on a query that already includes a join to the related table, illustrating that `selectinload` still performs a separate SELECT query for the related objects based on the parent IDs from the main query result.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#_snippet_26

LANGUAGE: Python
CODE:
```
>>> stmt = (
...     select(User)
...     .join(User.addresses)
...     .options(selectinload(User.addresses))
...     .filter(User.name == "spongebob")
...     .filter(Address.email_address == "someaddress@foo.com")
... )
>>> result = session.scalars(stmt).all()
```

LANGUAGE: SQL
CODE:
```
SELECT
    users.id AS users_id,
    users.name AS users_name,
    users.fullname AS users_fullname,
    users.nickname AS users_nickname
FROM users
JOIN addresses ON users.id = addresses.user_id
WHERE
    users.name = ?
    AND addresses.email_address = ?
['spongebob', 'someaddress@foo.com']
# ... selectinload() emits a SELECT in order
# to load all address records ...
```

----------------------------------------

TITLE: Streaming Results with yield_per in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates using the `yield_per` execution option with an ORM select statement. It fetches results in partitions of a specified size (10 in this case), allowing processing large result sets without loading all objects into memory at once.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#_snippet_5

LANGUAGE: Python
CODE:
```
stmt = select(User).execution_options(yield_per=10)
for partition in session.scalars(stmt).partitions():
    for user_obj in partition:
        print(user_obj)
```

----------------------------------------

TITLE: Defining One-to-Many Relationship Without Delete Cascade in SQLAlchemy
DESCRIPTION: This Python snippet defines a `User` model with a one-to-many relationship to `Address` objects, but without the `delete` cascade option. This relies on SQLAlchemy's default behavior for one-to-many, which is to de-associate related objects by setting their foreign key to NULL upon parent deletion.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#_snippet_12

LANGUAGE: python
CODE:
```
class User(Base):
  # ...

  addresses = relationship("Address")
```

----------------------------------------

TITLE: Defining SQLAlchemy Relationship with primaryjoin, foreign_keys, remote_side (Python)
DESCRIPTION: Demonstrates defining a SQLAlchemy ORM relationship using `primaryjoin` for the join condition and separate `foreign_keys` and `remote_side` arguments to specify the roles of columns in the join. This approach is used when the join condition is explicit.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#_snippet_6

LANGUAGE: Python
CODE:
```
            "HostEntry",
            primaryjoin=ip_address == cast(content, INET),
            foreign_keys=content,
            remote_side=ip_address,
        )
```

----------------------------------------

TITLE: Defining Bidirectional Association Object Mapping
DESCRIPTION: This snippet shows how to extend the association object pattern to be bidirectional. Additional `relationship` constructs are added to link `Association` back to `Parent` and `Child` back to `Association`, using `back_populates` to ensure relationship coherence in both directions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_19

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class Association(Base):
    __tablename__ = "association_table"
    left_id: Mapped[int] = mapped_column(ForeignKey("left_table.id"), primary_key=True)
    right_id: Mapped[int] = mapped_column(
        ForeignKey("right_table.id"), primary_key=True
    )
    extra_data: Mapped[Optional[str]]
    child: Mapped["Child"] = relationship(back_populates="parents")
    parent: Mapped["Parent"] = relationship(back_populates="children")


class Parent(Base):
    __tablename__ = "left_table"
    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Association"]] = relationship(back_populates="parent")


class Child(Base):
    __tablename__ = "right_table"
    id: Mapped[int] = mapped_column(primary_key=True)
    parents: Mapped[List["Association"]] = relationship(back_populates="child")
```

----------------------------------------

TITLE: Using engine.begin() context manager in SQLAlchemy (Python)
DESCRIPTION: Demonstrates using the engine.begin() context manager to manage a transactional block. The connection is automatically closed upon exiting the block, and the transaction is committed on success or rolled back on error.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#_snippet_0

LANGUAGE: Python
CODE:
```
with engine.begin() as conn:
    # <work with conn in a transaction>
    ...
```

----------------------------------------

TITLE: Incorrect Session Creation in Method - Python
DESCRIPTION: This snippet demonstrates an incorrect pattern for managing a SQLAlchemy Session. Creating the session inside a method that performs data operations violates the principle of keeping the session lifecycle separate and external to data-specific functions. The recommended approach is to manage the session's scope outside of such methods.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_21

LANGUAGE: Python
CODE:
```
### this is the **wrong way to do it** ###


class ThingOne:
    def go(self):
        session = Session()
        try:
```

----------------------------------------

TITLE: Using SQLAlchemy cast for type conversion
DESCRIPTION: Shows how to use the `cast` function to explicitly convert the data type of a column expression in a select statement. Includes executing the statement using an engine connection and displaying the results and the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_105

LANGUAGE: Python
CODE:
```
from sqlalchemy import cast
stmt = select(cast(user_table.c.id, String))
with engine.connect() as conn:
    result = conn.execute(stmt)
    result.all()
```

LANGUAGE: SQL
CODE:
```
BEGIN (implicit)
SELECT CAST(user_account.id AS VARCHAR) AS id
FROM user_account
[...] ()
ROLLBACK
```

----------------------------------------

TITLE: Resolving Query Join Ambiguity with Relationship Attribute - Python
DESCRIPTION: Shows an alternative method to resolve ambiguity in `Query.join()` by specifying the join target using the relationship attribute itself, referencing the relationship on the desired entity alias.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#_snippet_30

LANGUAGE: Python
CODE:
```
# join to User
session.query(User, u_alias).join(Address, User.addresses)

# join to u_alias
session.query(User, u_alias).join(Address, u_alias.addresses)
```

----------------------------------------

TITLE: Accessing ORM Row Data by Column (Python)
DESCRIPTION: Demonstrates various ways to access elements within a SQLAlchemy ORM Row object when the query selects specific columns. Shows accessing data using the column object, the column's string name, or the column object referenced via the table's .c attribute.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_62

LANGUAGE: Python
CODE:
```
row = s.query(User.id, Address.email_address).join(User.addresses).first()

row._mapping[User.id]  # same as row[0]
row._mapping["id"]  # same as row[0]
row._mapping[users.c.id]  # same as row[0]
```

----------------------------------------

TITLE: Executing ORM SELECT with Custom Option - SQLAlchemy Python
DESCRIPTION: This code shows how to construct and execute an ORM SELECT statement using SQLAlchemy's 2.0 style API. It filters for a specific user and attaches a custom execution option (`my_cache_key`), which can be intercepted by a `do_orm_execute` event listener, such as the one implementing caching demonstrated previously. Requires SQLAlchemy Core/ORM constructs like `select`, `where`, `execution_options`, and a `session` object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#_snippet_5

LANGUAGE: Python
CODE:
```
    stmt = (
        select(User).where(User.name == "sandy").execution_options(my_cache_key="key_sandy")
    )

    result = session.execute(stmt)
```

----------------------------------------

TITLE: Iterating Over Named Tuple Query Results - SQLAlchemy ORM Python
DESCRIPTION: Shows how to loop through the results of a multi-column ORM query. The results are returned as named tuples, allowing access to selected columns using dot notation (e.g., `row.name`). Requires the query to be executed (e.g., by iteration).
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#_snippet_1

LANGUAGE: Python
CODE:
```
for row in (
    session.query(User.name, func.count(Address.id).label("numaddresses"))
    .join(Address)
    .group_by(User.name)
):
    print("name", row.name, "number", row.numaddresses)
```

----------------------------------------

TITLE: Checking Pending Object Attributes - SQLAlchemy Python
DESCRIPTION: Before committing, this snippet shows that the primary key (`id`) of the `User` object and the foreign key (`user_id`) of the `Address` objects are still `None` because they have not yet been inserted into the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#_snippet_8

LANGUAGE: Python
CODE:
```
>>> print(u1.id)
None
>>> print(a1.user_id)
None
```

----------------------------------------

TITLE: Executing Basic Session Operations Python
DESCRIPTION: Demonstrates a simple interaction with a SQLAlchemy session using a mapped dataclass. It shows how to add an object to the session, commit the transaction, and illustrates the resulting SQL execution.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#_snippet_8

LANGUAGE: Python
CODE:
```
>>> with Session(e) as session:
...     session.add(User())
...     session.commit()
{execsql}BEGIN (implicit)
INSERT INTO user_account (created_at) VALUES (utc_timestamp())
[generated in 0.00010s] ()
COMMIT
```

----------------------------------------

TITLE: Setting SQLAlchemy Sequence as Python Default Python
DESCRIPTION: Defines a SQLAlchemy Column and associates a Sequence object directly with it as the Python-side default generator. This means SQLAlchemy will use the sequence to get a value before an INSERT if a value isn't provided for the column. Requires a MetaData object.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#_snippet_10

LANGUAGE: python
CODE:
```
Column(
    "cart_id",
    Integer,
    Sequence("cart_id_seq", metadata=metadata_obj, start=1),
    primary_key=True,
)
```

----------------------------------------

TITLE: Manual Session Transaction Handling with Try/Except/Else - SQLAlchemy ORM - Python
DESCRIPTION: Demonstrates a verbose way to manage a database transaction using a try...except...else block within a SQLAlchemy ORM session. It shows how to explicitly call session.begin(), session.add(), session.rollback() on exception, and session.commit() on success.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_1

LANGUAGE: Python
CODE:
```
with Session(engine) as session:
    session.begin()
    try:
        session.add(some_object)
        session.add(some_other_object)
    except:
        session.rollback()
        raise
    else:
        session.commit()
```

----------------------------------------

TITLE: Mapping Bidirectional Backref Python
DESCRIPTION: Demonstrates creating a bidirectional relationship between Department and Employee ORM classes by using the `backref` keyword argument in the `relationship` definition, establishing both forward and backward connections.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#_snippet_21

LANGUAGE: python
CODE:
```
class Department(Base):
    __tablename__ = "department"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))
    employees = relationship("Employee", backref="department")


class Employee(Base):
    __tablename__ = "employee"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))
    dep_id = Column(Integer, ForeignKey("department.id"))
```

----------------------------------------

TITLE: Defining SQLAlchemy Declarative Dataclass with init=False and Default
DESCRIPTION: Defines SQLAlchemy ORM mapped classes using `MappedAsDataclass` and `DeclarativeBase`. It shows how to configure columns with `mapped_column`, setting `primary_key=True` and `init=False` for an 'id' column, and setting a `default` value and `init=False` for a 'status' column. This configuration prevents the columns from being part of the class's `__init__` method but allows default access via descriptor.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_21.rst#_snippet_5

LANGUAGE: python
CODE:
```
class Base(MappedAsDataclass, DeclarativeBase):
    pass


class SomeObject(Base):
    __tablename__ = "parent"
    id: Mapped[int] = mapped_column(primary_key=True, init=False)
    status: Mapped[str] = mapped_column(default="default_status", init=False)
```

----------------------------------------

TITLE: Creating INSERT statement with RETURNING in SQLAlchemy
DESCRIPTION: Demonstrates how to construct an INSERT statement using SQLAlchemy's `insert()` construct and explicitly specify columns to be returned using the `returning()` method. The resulting statement includes the RETURNING clause.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#_snippet_10

LANGUAGE: Python
CODE:
```
insert_stmt = insert(address_table).returning(
    address_table.c.id, address_table.c.email_address
)
print(insert_stmt)
```

LANGUAGE: SQL
CODE:
```
INSERT INTO address (id, user_id, email_address)
VALUES (:id, :user_id, :email_address)
RETURNING address.id, address.email_address
```

----------------------------------------

TITLE: Defining Basic Composite Methods Python
DESCRIPTION: These methods show the minimum requirements for a class to be used with SQLAlchemy's `composite` mapping, specifically providing tuple values for persistence (`__composite_values__`) and comparison logic (`__eq__`, `__ne__`). A `__repr__` is included for debugging.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#_snippet_11

LANGUAGE: Python
CODE:
```
def __composite_values__(self):
  return self.x, self.y
```

LANGUAGE: Python
CODE:
```
def __repr__(self):
  return f"Point(x={self.x!r}, y={self.y!r})"
```

LANGUAGE: Python
CODE:
```
def __eq__(self, other):
  return isinstance(other, Point) and other.x == self.x and other.y == self.y
```

LANGUAGE: Python
CODE:
```
def __ne__(self, other):
  return not self.__eq__(other)
```

----------------------------------------

TITLE: Using Table-Valued Functions with SQLAlchemy's table_valued()
DESCRIPTION: Demonstrates how to represent a SQL table-valued function (like `json_each`) as a selectable element in the FROM clause using SQLAlchemy's `table_valued()` method, allowing it to be queried like a table.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_102

LANGUAGE: Python
CODE:
```
onetwothree = func.json_each('["one", "two", "three"]').table_valued("value")
stmt = select(onetwothree).where(onetwothree.c.value.in_(["two", "three"]))
```

LANGUAGE: SQL
CODE:
```
BEGIN (implicit)
SELECT anon_1.value
FROM json_each(?) AS anon_1
WHERE anon_1.value IN (?, ?)
[...] ('["one", "two", "three"]', 'two', 'three')
[('two',), ('three',)]
ROLLBACK
```

----------------------------------------

TITLE: Executing Select for Specific ORM Columns - SQLAlchemy Python
DESCRIPTION: Executes a SQLAlchemy SELECT statement that targets specific columns of an ORM entity (`User.name`, `User.fullname`) using `Session.execute` and retrieves the first result row. The row will contain individual column values as elements.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_10

LANGUAGE: Python
CODE:
```
row = session.execute(select(User.name, User.fullname)).first()
```

----------------------------------------

TITLE: Configuring Relationships in Dataclass Mappings Python
DESCRIPTION: Explains how to define ORM relationships within dataclass-mapped classes using `Mapped` and `relationship`. It specifically shows the use of `default_factory` for collection-based relationships (like lists) and `default` for scalar relationships to control parameter optionality during dataclass initialization.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import List

from sqlalchemy import ForeignKey
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import registry
from sqlalchemy.orm import relationship

reg = registry()


@reg.mapped_as_dataclass
class Parent:
    __tablename__ = "parent"
    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship(
        default_factory=list, back_populates="parent"
    )


@reg.mapped_as_dataclass
class Child:
    __tablename__ = "child"
    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent.id"))
    parent: Mapped["Parent"] = relationship(default=None)
```

----------------------------------------

TITLE: Using selectin_polymorphic for Polymorphic Loading (Python/SQL)
DESCRIPTION: Demonstrates how to use the `selectin_polymorphic` option with a query to load base entities initially, followed by separate SELECT IN queries for each subclass, improving performance for polymorphic loading compared to joined eager loading.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#_snippet_2

LANGUAGE: pycon+sql
CODE:
```
>>> from sqlalchemy.orm import selectin_polymorphic

>>> query = session.query(Employee).options(
...     selectin_polymorphic(Employee, [Manager, Engineer])
... )

>>> query.all()
SELECT
    employee.id AS employee_id,
    employee.name AS employee_name,
    employee.type AS employee_type
FROM employee
()

SELECT
    engineer.id AS engineer_id,
    employee.id AS employee_id,
    employee.type AS employee_type,
    engineer.engineer_name AS engineer_engineer_name
FROM employee JOIN engineer ON employee.id = engineer.id
WHERE employee.id IN (?, ?) ORDER BY employee.id
(1, 2)

SELECT
    manager.id AS manager_id,
    employee.id AS employee_id,
    employee.type AS employee_type,
    manager.manager_name AS manager_manager_name
FROM employee JOIN manager ON employee.id = manager.id
WHERE employee.id IN (?) ORDER BY employee.id
(3,)
```

----------------------------------------

TITLE: Reflecting All Database Tables (Python)
DESCRIPTION: Shows how to reflect all accessible tables from the database into the `MetaData` object using the `reflect()` method with a bound engine. After reflection, all tables are available in the `metadata_obj.tables` dictionary by name. Requires a `MetaData` object and an engine.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#_snippet_6

LANGUAGE: Python
CODE:
```
metadata_obj = MetaData()
metadata_obj.reflect(bind=someengine)
users_table = metadata_obj.tables["users"]
addresses_table = metadata_obj.tables["addresses"]
```

----------------------------------------

TITLE: Defining Reusable Annotated Column Types
DESCRIPTION: This snippet defines several reusable column configurations using `Annotated` and `mapped_column`. `intpk` defines an integer primary key, `timestamp` defines a non-nullable datetime with a server default, and `required_name` defines a non-nullable string with a length constraint.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_21

LANGUAGE: Python
CODE:
```
import datetime

from typing_extensions import Annotated

from sqlalchemy import func
from sqlalchemy import String
from sqlalchemy.orm import mapped_column


intpk = Annotated[int, mapped_column(primary_key=True)]
timestamp = Annotated[
    datetime.datetime,
    mapped_column(nullable=False, server_default=func.CURRENT_TIMESTAMP()),
]
required_name = Annotated[str, mapped_column(String(30), nullable=False)]
```

----------------------------------------

TITLE: Compiling ORM Query Statement Python
DESCRIPTION: Explains how to obtain the underlying Core statement from an ORM `Query` object using the `.statement` attribute. This allows the statement to be compiled using a specific dialect, enabling correct stringification or further processing of dialect-specific elements within the query.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#_snippet_4

LANGUAGE: python
CODE:
```
statement = query.statement
print(statement.compile(dialect=postgresql.dialect()))
```

----------------------------------------

TITLE: Initializing Database and Session (Python)
DESCRIPTION: Initializes a SQLite in-memory database engine, drops and creates all tables defined by the ORM models using `Base.metadata.create_all`, and sets up a database connection and an ORM session for interacting with the database.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_inheritance_setup.rst#_snippet_1

LANGUAGE: python
CODE:
```
>>> engine = create_engine("sqlite://", echo=True)
>>>
>>> Base.metadata.create_all(engine)
BEGIN ...

>>> conn = engine.connect()
>>> from sqlalchemy.orm import Session
>>> session = Session(conn)
```

----------------------------------------

TITLE: Defining Bidirectional Many-to-Many using Association Table - Python
DESCRIPTION: This example shows how to configure a bidirectional Many-to-Many relationship. Both sides of the relationship define a collection type (Mapped[List[...]]) and reference the same association table via the `secondary` parameter, using `back_populates` to link the two sides.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_15

LANGUAGE: python
CODE:
```
from __future__ import annotations

    from sqlalchemy import Column
    from sqlalchemy import Table
    from sqlalchemy import ForeignKey
    from sqlalchemy import Integer
    from sqlalchemy.orm import Mapped
    from sqlalchemy.orm import mapped_column
    from sqlalchemy.orm import DeclarativeBase
    from sqlalchemy.orm import relationship


    class Base(DeclarativeBase):
        pass


    association_table = Table(
        "association_table",
        Base.metadata,
        Column("left_id", ForeignKey("left_table.id"), primary_key=True),
        Column("right_id", ForeignKey("right_table.id"), primary_key=True),
    )


    class Parent(Base):
        __tablename__ = "left_table"

        id: Mapped[int] = mapped_column(primary_key=True)
        children: Mapped[List[Child]] = relationship(
            secondary=association_table, back_populates="parents"
        )


    class Child(Base):
        __tablename__ = "right_table"

        id: Mapped[int] = mapped_column(primary_key=True)
        parents: Mapped[List[Parent]] = relationship(
            secondary=association_table, back_populates="children"
        )
```

----------------------------------------

TITLE: Defining Client-Invoked SQL Expression Defaults - SQLAlchemy Python
DESCRIPTION: This snippet illustrates using SQL expressions with `func` and `select` as column defaults for INSERT (`default`) and UPDATE (`onupdate`). `func.now()` and `select(...)` are used for INSERT defaults, while `func.utc_timestamp()` is used for an UPDATE default. SQLAlchemy renders these expressions inline.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#_snippet_5

LANGUAGE: Python
CODE:
```
t = Table(
    "mytable",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    # define 'create_date' to default to now()
    Column("create_date", DateTime, default=func.now()),
    # define 'key' to pull its default from the 'keyvalues' table
    Column(
        "key",
        String(20),
        default=select(keyvalues.c.key).where(keyvalues.c.type="type1"),
    ),
    # define 'last_modified' to use the current_timestamp SQL function on update
    Column("last_modified", DateTime, onupdate=func.utc_timestamp()),
)
```

----------------------------------------

TITLE: Managing SQLAlchemy ORM Transaction Commit-as-You-Go
DESCRIPTION: Illustrates the commit-as-you-go pattern where operations are added to the session, and transactions are explicitly managed using `session.commit()` or `session.rollback()`. The session automatically begins a new transaction as needed after commit or rollback.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_2

LANGUAGE: Python
CODE:
```
session = Session(engine)

session.add(some_object())
session.add(some_other_object())

session.commit()  # commits

# will automatically begin again
result = session.execute(text("< some select statement >"))
session.add_all([more_objects, ...])
session.commit()  # commits

session.add(still_another_object)
session.flush()  # flush still_another_object
session.rollback()  # rolls back still_another_object
```

----------------------------------------

TITLE: Executing INSERT with RETURNING SQLAlchemy Python
DESCRIPTION: Demonstrates using the `returning()` method on an `insert()` construct to fetch column values (like id and timestamp) after the insertion, supported by databases like PostgreSQL, Oracle, MS-SQL, and Firebird.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#_snippet_14

LANGUAGE: python
CODE:
```
result = connection.execute(
    table.insert().values(data="some data").returning(table.c.id, table.c.timestamp)
)
row = result.first()
```

----------------------------------------

TITLE: Configuring SQLAlchemy LIFO Pool with Pre-ping in Python
DESCRIPTION: This example shows how to create a SQLAlchemy engine configured to use LIFO (Last-In, First-Out) behavior for its connection pool. It also enables the `pool_pre_ping` feature, which tests connections upon checkout to gracefully handle server-side disconnects.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#_snippet_11

LANGUAGE: python
CODE:
```
from sqlalchemy import create_engine

engine = create_engine("postgresql://", pool_use_lifo=True, pool_pre_ping=True)
```

----------------------------------------

TITLE: Query ORM Entities from CTE using aliased (Python/SQL)
DESCRIPTION: Demonstrates how to use `sqlalchemy.orm.aliased` to map an ORM entity (Address) to a SQL Common Table Expression (CTE). The example constructs a select statement joining User with the aliased Address CTE and executes it within a session to retrieve ORM objects. This is analogous to the subquery example but uses a CTE. Includes the Python code and the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_57

LANGUAGE: Python
CODE:
```
cte_obj = select(Address).where(~Address.email_address.like("%@aol.com")).cte()
address_cte = aliased(Address, cte_obj)
stmt = (
    select(User, address_cte)
    .join_from(User, address_cte)
    .order_by(User.id, address_cte.id)
)
with Session(engine) as session:
    for user, address in session.execute(stmt):
        print(f"{user} {address}")
# Output:
# User(id=1, name='spongebob', fullname='Spongebob Squarepants') Address(id=1, email_address='spongebob@sqlalchemy.org')
# User(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=2, email_address='sandy@sqlalchemy.org')
```

LANGUAGE: SQL
CODE:
```
BEGIN (implicit)
WITH anon_1 AS
(SELECT address.id AS id, address.email_address AS email_address, address.user_id AS user_id
FROM address
WHERE address.email_address NOT LIKE ?)
SELECT user_account.id, user_account.name, user_account.fullname,
anon_1.id AS id_1, anon_1.email_address, anon_1.user_id
FROM user_account
JOIN anon_1 ON user_account.id = anon_1.user_id
ORDER BY user_account.id, anon_1.id
[...] ('%@aol.com',)
```

----------------------------------------

TITLE: Expiring Specific Attributes on Object - SQLAlchemy Session - Python
DESCRIPTION: Demonstrates the use of the `session.expire()` method with a list of string attribute names. This marks only the specified attributes (`attr1`, `attr2`) on the given object (`obj1`) as expired. Accessing these specific attributes will trigger a reload, while others not in the list remain in their current state.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#_snippet_21

LANGUAGE: Python
CODE:
```
# expire only attributes obj1.attr1, obj1.attr2
session.expire(obj1, ["attr1", "attr2"])
```

----------------------------------------

TITLE: Mapping Table Without Primary Key Using Mapper Args Python
DESCRIPTION: Demonstrates how to map a table that lacks a defined primary key in the database by explicitly specifying the columns that should function as the primary key within the ORM mapping using the `__mapper_args__` attribute. This requires the specified columns to uniquely identify rows.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#_snippet_0

LANGUAGE: Python
CODE:
```
class SomeClass(Base):
    __table__ = some_table_with_no_pk
    __mapper_args__ = {
        "primary_key": [some_table_with_no_pk.c.uid, some_table_with_no_pk.c.bar]
    }
```

----------------------------------------

TITLE: Define Column Property with Subquery
DESCRIPTION: Defines a `column_property` on a mapped class (`User`) that uses a correlated subquery (`select`) to calculate a value (`score`) based on a related table (`B`). This demonstrates a common pattern for computed attributes.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#_snippet_17

LANGUAGE: python
CODE:
```
class User(Base):
    ...

    score = column_property(func.coalesce(self.tables.users.c.name, None))
```

----------------------------------------

TITLE: Initializing SQLAlchemy MetaData Object - Python
DESCRIPTION: Initializes a MetaData object, which serves as a collection to hold Table objects. This is the starting point for programmatically defining database schema using SQLAlchemy Core.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import MetaData
metadata_obj = MetaData()
```

----------------------------------------

TITLE: Streaming Results with yield_per using SQLAlchemy Core Python
DESCRIPTION: This snippet demonstrates how to use the `yield_per` execution option on a connection to execute a query and then iterate over the results in batches using `result.partitions()`. This enables server-side cursors and fetches rows from the database in chunks of the specified size (100 in this case), reducing client-side memory usage.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_18

LANGUAGE: python
CODE:
```
with engine.connect() as conn:
    with conn.execution_options(yield_per=100).execute(
        text("select * from table")
    ) as result:
        for partition in result.partitions():
            # partition is an iterable that will be at most 100 items
            for row in partition:
                print(f"{row}")
```

----------------------------------------

TITLE: Rendering Cacheable LIMIT/OFFSET (1.4+) - Python
DESCRIPTION: This function demonstrates the cache-compatible method for rendering SQL LIMIT and OFFSET clauses in SQLAlchemy 1.4+. It utilizes `render_literal_execute` in conjunction with `_limit_clause` and `_offset_clause` to defer literal integer rendering to execution time, enabling statement caching. It includes checks for simple integer clauses and raises `CompileError` otherwise.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/connections.rst#_snippet_41

LANGUAGE: python
CODE:
```
    # 1.4 cache-compatible code
    def limit_clause(self, select, **kw):
        text = ""

        limit_clause = select._limit_clause
        offset_clause = select._offset_clause

        if select._simple_int_clause(limit_clause):
            text += " \n LIMIT %s" % (
                self.process(limit_clause.render_literal_execute(), **kw)
            )
        elif limit_clause is not None:
            # assuming the DB doesn't support SQL expressions for LIMIT.
            # Otherwise render here normally
            raise exc.CompileError(
                "dialect 'mydialect' can only render simple integers for LIMIT"
            )
        if select._simple_int_clause(offset_clause):
            text += " \n OFFSET %s" % (
                self.process(offset_clause.render_literal_execute(), **kw)
            )
        elif offset_clause is not None:
            # assuming the DB doesn't support SQL expressions for OFFSET.
            # Otherwise render here normally
            raise exc.CompileError(
                "dialect 'mydialect' can only render simple integers for OFFSET"
            )

        return text
```

----------------------------------------

TITLE: Using session.expire() for Lazy Attribute Refresh
DESCRIPTION: This example shows how to use the `session.expire()` method. Calling `expire()` on an object marks its attributes as expired, causing them to be lazy-loaded from the database transaction upon their next access.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#_snippet_16

LANGUAGE: python
CODE:
```
session.expire(u1)
u1.some_attribute  # <-- lazy loads from the transaction
```

----------------------------------------

TITLE: Illustrating numpy.int64 == Column expression issue - Python
DESCRIPTION: This example shows how NumPy's overridden `__eq__()` method interferes with SQLAlchemy's expression language when a `numpy.int64` object is used on the left side of an equality comparison with a SQLAlchemy column. Instead of returning a `ColumnElement` expression as expected by SQLAlchemy, it returns a boolean (`numpy.True` or `numpy.False`), causing an `ArgumentError`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/thirdparty.rst#_snippet_1

LANGUAGE: Python
CODE:
```
import numpy
from sqlalchemy import column, Integer
print(column("x", Integer) == numpy.int64(10))  # works
print(numpy.int64(10) == column("x", Integer))  # breaks
```

----------------------------------------

TITLE: Compiling Statement for MySQL Dialect - Python
DESCRIPTION: Shows how to compile a SQLAlchemy statement object specifically for a target database dialect represented by an `Engine` object. This is necessary when the statement includes dialect-specific syntax or features.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#_snippet_2

LANGUAGE: python
CODE:
```
from sqlalchemy import create_engine

engine = create_engine("mysql+pymysql://scott:tiger@localhost/test")
print(statement.compile(engine))
```

----------------------------------------

TITLE: Creating Basic SQLAlchemy Core Delete Statement
DESCRIPTION: Shows how to use the `delete()` function to build a `DELETE` statement. It includes specifying the target table (`user_table`) and filtering rows to delete using `.where()`. The printed output shows the generated SQL.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#_snippet_7

LANGUAGE: Python
CODE:
```
from sqlalchemy import delete
stmt = delete(user_table).where(user_table.c.name == "patrick")
print(stmt)
```

LANGUAGE: SQL
CODE:
```
DELETE FROM user_account WHERE user_account.name = :name_1
```

----------------------------------------

TITLE: Using Python | Operator for OR - Python/SQLAlchemy
DESCRIPTION: Demonstrates using the overloaded Python binary `|` operator to construct a SQL `OR` clause between two expressions. It highlights the requirement for parentheses around the operands due to Python's operator precedence. The corresponding generated SQL query is included.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_23

LANGUAGE: Python
CODE:
```
print((column("x") == 5) | (column("y") == 10))
```

LANGUAGE: SQL
CODE:
```
x = :x_1 OR y = :y_1
```

----------------------------------------

TITLE: Explicit JOIN using join_from (Core)
DESCRIPTION: Illustrates using the `join_from` method on a SQLAlchemy Core `select` statement to explicitly specify the left and right sides of a JOIN. The ON clause is inferred based on foreign keys.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_select.rst#_snippet_32

LANGUAGE: Python
CODE:
```
print(
    select(user_table.c.name, address_table.c.email_address).join_from(
        user_table, address_table
    )
)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.name, address.email_address
FROM user_account JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: Setting UTC_TIMESTAMP Server Default in SQLAlchemy Mapped Column (Python)
DESCRIPTION: Demonstrates configuring a mapped column attribute (`created_at`) to use `func.UTC_TIMESTAMP()` as its server-side default value, overriding the default `CURRENT_TIMESTAMP`. Requires SQLAlchemy ORM and `func`.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#_snippet_26

LANGUAGE: Python
CODE:
```
created_at: Mapped[timestamp] = mapped_column(server_default=func.UTC_TIMESTAMP())
```

----------------------------------------

TITLE: Creating Textual SQL Statement with text() - SQLAlchemy Python
DESCRIPTION: The ORM supports loading entities from textual SELECT statements. A textual statement is represented using the `text` construct, taking the raw SQL string as input.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_12

LANGUAGE: Python
CODE:
```
from sqlalchemy import text
textual_sql = text("SELECT id, name, fullname FROM user_account ORDER BY id")
```

----------------------------------------

TITLE: Setting Transaction Isolation within Session Begin Block (Python)
DESCRIPTION: Provides an alternative approach to setting transaction isolation when using the `session.begin()` context manager. By calling `session.connection()` with `execution_options` immediately inside the `with sess.begin():` block, the database transaction started by `begin()` is configured with the desired isolation level.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_25

LANGUAGE: python
CODE:
```
sess = Session(bind=engine)

with sess.begin():
    # call connection() with options before any other operations proceed.
    # this will procure a new connection from the bound engine and begin a
    # real database transaction.
    sess.connection(execution_options={"isolation_level": "SERIALIZABLE"})

    # ... work with session in SERIALIZABLE isolation level...

# outside the block, the transaction has been committed.  the connection is
# released and reverted to its previous isolation level.
```

----------------------------------------

TITLE: Joining with Explicit SQL Expression ON Clause in SQLAlchemy ORM
DESCRIPTION: Shows how to explicitly provide the ON clause for a join using a SQL expression (`User.id == Address.user_id`) when joining the `User` entity to the `Address` entity. This gives fine-grained control over the join condition.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#_snippet_23

LANGUAGE: Python
CODE:
```
stmt = select(User).join(Address, User.id == Address.user_id)
```

LANGUAGE: SQL
CODE:
```
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account JOIN address ON user_account.id = address.user_id
```

----------------------------------------

TITLE: Defining Column Properties with Composite and Subquery
DESCRIPTION: Maps a 'User' class to a 'users' table and defines two 'column_property' attributes: 'fullname' which is a concatenation of firstname and lastname, and 'numposts' which is the result of a correlated subquery counting posts for the user.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#_snippet_11

LANGUAGE: Python
CODE:
```
mapper(
    User,
    users,
    properties={
        "fullname": column_property(
            (users.c.firstname + users.c.lastname).label("fullname")
        ),
        "numposts": column_property(
            select([func.count(1)], users.c.id == posts.c.user_id)
            .correlate(users)
            .label("posts")
        ),
    },
)
```

----------------------------------------

TITLE: Expiring All Objects in Session (SQLAlchemy Python)
DESCRIPTION: Marks all ORM objects currently loaded in the SQLAlchemy Session as expired. Accessing any attribute on an expired object will trigger a reload of its state from the database upon the next access. This is often used automatically after a transaction commits or rolls back.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#_snippet_23

LANGUAGE: Python
CODE:
```
session.expire_all()
```

----------------------------------------

TITLE: Configuring SQLAlchemy Engine with connect_args (Python)
DESCRIPTION: Demonstrates how to pass a dictionary of custom arguments directly to the underlying DBAPI connect function using the `connect_args` parameter when creating a SQLAlchemy Engine. This is useful for specifying parameters not typically included in the connection URL, such as encoding.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/connections.rst#_snippet_0

LANGUAGE: Python
CODE:
```
e = create_engine(
    "mysql+mysqldb://scott:tiger@localhost/test", connect_args={"encoding": "utf8"}
)
```

----------------------------------------

TITLE: Reflecting a Single Table using autoload_with (Python)
DESCRIPTION: Demonstrates reflecting a single database table named "messages" into a SQLAlchemy `Table` object using the `autoload_with` parameter and an engine. It shows how to access the reflected column names. Requires a `MetaData` object and an engine.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#_snippet_0

LANGUAGE: Python
CODE:
```
messages = Table("messages", metadata_obj, autoload_with=engine)
```

LANGUAGE: Python
CODE:
```
[c.name for c in messages.columns]
```

----------------------------------------

TITLE: Accessing ORM Row Data by Aliased Entity (Python)
DESCRIPTION: Illustrates how to access elements within a SQLAlchemy ORM Row object when the query selects an aliased entity. The example shows using the aliased entity object itself as the key with the _mapping attribute to retrieve the entity instance.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_14.rst#_snippet_61

LANGUAGE: Python
CODE:
```
u1 = aliased(User)
row = s.query(u1).only_return_tuples(True).first()
row._mapping[u1]  # same as row[0]
```

----------------------------------------

TITLE: Committing Transactions with SQLAlchemy Engine Connect
DESCRIPTION: Demonstrates establishing a connection from an Engine using a context manager, executing SQL statements, and explicitly committing the transaction using conn.commit(). Requires an Engine instance and table/insert constructs.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#_snippet_10

LANGUAGE: Python
CODE:
```
engine = create_engine("postgresql+psycopg2://user:pass@host/dbname")

with engine.connect() as conn:
    conn.execute(
        some_table.insert(),
        [
            {"data": "some data one"},
            {"data": "some data two"},
            {"data": "some data three"},
        ],
    )
    conn.commit()
```

----------------------------------------

TITLE: Defining Structural and Data Elements in SQLAlchemy Core
DESCRIPTION: Demonstrates how to define structural elements like tables and columns using `Table` and `Column`, and how to use data elements within clauses like `in_` when constructing SQLAlchemy Core expressions.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#_snippet_32

LANGUAGE: Python
CODE:
```
# table columns for CREATE TABLE - structural
table = Table("table", metadata_obj, Column("x", Integer), Column("y", Integer))

# columns in a SELECT statement - structural
stmt = select(table.c.x, table.c.y)

# literal elements in an IN clause - data
stmt = stmt.where(table.c.y.in_([1, 2, 3]))
```

----------------------------------------

TITLE: Deleting from Many-to-Many Secondary Table via Collection Removal
DESCRIPTION: This snippet shows how to remove a row from the 'secondary' table in a many-to-many relationship. By removing an object from the `children` collection of a `Parent` instance, SQLAlchemy ORM automatically handles the deletion of the corresponding row in the secondary table upon flushing the session.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#_snippet_17

LANGUAGE: Python
CODE:
```
# row will be deleted from the "secondary" table
# automatically
myparent.children.remove(somechild)
```

----------------------------------------

TITLE: Defining Table with Identity Column (SQLAlchemy Python)
DESCRIPTION: Demonstrates how to define a SQLAlchemy `Table` object with an `Identity` column using the `Identity` construct to configure start and cycle properties. Requires the `sqlalchemy` library. Creates a table named 'data' with an integer primary key 'id' configured as an identity column starting at 42 with cycling, and a string column 'data'.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#_snippet_16

LANGUAGE: Python
CODE:
```
from sqlalchemy import Table, Column, MetaData, Integer, Identity, String

metadata_obj = MetaData()

data = Table(
    "data",
    metadata_obj,
    Column("id", Integer, Identity(start=42, cycle=True), primary_key=True),
    Column("data", String),
)
```

----------------------------------------

TITLE: Checking NOT IN Operator SQLAlchemy Python
DESCRIPTION: Demonstrates using the `.not_in()` method with a list of values on a SQLAlchemy `column` object. The output shows the generated SQL `NOT IN` clause using the post-compile parameter format.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#_snippet_10

LANGUAGE: Python
CODE:
```
print(column("x").not_in([1, 2, 3]))
```

----------------------------------------

TITLE: Defining Primary Key Constraint Explicitly in SQLAlchemy
DESCRIPTION: While primary keys are typically inferred from `Column(primary_key=True)`, this snippet demonstrates using the explicit `PrimaryKeyConstraint` object. This allows defining multi-column primary keys and assigning an explicit name.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#_snippet_11

LANGUAGE: Python
CODE:
```
from sqlalchemy import PrimaryKeyConstraint

my_table = Table(
    "mytable",
    metadata_obj,
    Column("id", Integer),
    Column("version_id", Integer),
    Column("data", String(50)),
    PrimaryKeyConstraint("id", "version_id", name="mytable_pk"),
)
```

----------------------------------------

TITLE: Define Polymorphic Mapping
DESCRIPTION: Defines a polymorphic mapping for class `A` based on the `type` column, using `__mapper_args__` to specify the polymorphic identity and eager loading strategy. This mapping is used to illustrate another scenario where `order_by` with column properties was fixed.
SOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#_snippet_25

LANGUAGE: python
CODE:
```
class A(Base):
    __tablename__ = "a"

    id = Column(Integer, primary_key=True)
    type = Column(String)

    __mapper_args__ = {"polymorphic_on": type, "with_polymorphic": "*"}
```